
wave_runner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e364  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800e538  0800e538  0000f538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec90  0800ec90  000101e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec90  0800ec90  0000fc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec98  0800ec98  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec98  0800ec98  0000fc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec9c  0800ec9c  0000fc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800eca0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ed8  200001e8  0800ee88  000101e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050c0  0800ee88  000110c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e61f  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004445  00000000  00000000  0002e837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  00032c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001409  00000000  00000000  00034630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267f1  00000000  00000000  00035a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201a3  00000000  00000000  0005c22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0c90  00000000  00000000  0007c3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d05d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008128  00000000  00000000  0015d0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001651c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e51c 	.word	0x0800e51c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800e51c 	.word	0x0800e51c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <HMC5883LDriver_Init>:

/* Declaração da Declinação Magnética (em radianos) */
#define MAGNETIC_DECLINATION 0.0f // Ajuste para sua localização

// Inicializa o HMC5883L
void HMC5883LDriver_Init(I2C_HandleTypeDef *hi2c) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	6078      	str	r0, [r7, #4]
    magnetometer.hi2c = hi2c; // Atribui o handle I2C passado
 8000f80:	4a3a      	ldr	r2, [pc, #232]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
    magnetometer.samples_avg = 3;
 8000f86:	4b39      	ldr	r3, [pc, #228]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000f88:	2203      	movs	r2, #3
 8000f8a:	711a      	strb	r2, [r3, #4]
    magnetometer.output_rate = 4;
 8000f8c:	4b37      	ldr	r3, [pc, #220]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000f8e:	2204      	movs	r2, #4
 8000f90:	715a      	strb	r2, [r3, #5]
    magnetometer.measurement_mode = 0;
 8000f92:	4b36      	ldr	r3, [pc, #216]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	719a      	strb	r2, [r3, #6]
    magnetometer.gain = 1;
 8000f98:	4b34      	ldr	r3, [pc, #208]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	71da      	strb	r2, [r3, #7]
    magnetometer.operation_mode = 0;
 8000f9e:	4b33      	ldr	r3, [pc, #204]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	721a      	strb	r2, [r3, #8]

    uint8_t config_reg_a = ((magnetometer.samples_avg & 0b11) << 5) |
 8000fa4:	4b31      	ldr	r3, [pc, #196]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000fa6:	791b      	ldrb	r3, [r3, #4]
 8000fa8:	015b      	lsls	r3, r3, #5
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000fb0:	b25a      	sxtb	r2, r3
                           ((magnetometer.output_rate & 0b111) << 2) |
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000fb4:	795b      	ldrb	r3, [r3, #5]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	f003 031c 	and.w	r3, r3, #28
 8000fbe:	b25b      	sxtb	r3, r3
    uint8_t config_reg_a = ((magnetometer.samples_avg & 0b11) << 5) |
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b25a      	sxtb	r2, r3
                           (magnetometer.measurement_mode & 0b11);
 8000fc4:	4b29      	ldr	r3, [pc, #164]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000fc6:	799b      	ldrb	r3, [r3, #6]
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	b25b      	sxtb	r3, r3
                           ((magnetometer.output_rate & 0b111) << 2) |
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	b2db      	uxtb	r3, r3
    uint8_t config_reg_a = ((magnetometer.samples_avg & 0b11) << 5) |
 8000fd6:	73fb      	strb	r3, [r7, #15]

    uint8_t config_reg_b = (magnetometer.gain & 0b111) << 5;
 8000fd8:	4b24      	ldr	r3, [pc, #144]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000fda:	79db      	ldrb	r3, [r3, #7]
 8000fdc:	015b      	lsls	r3, r3, #5
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	73bb      	strb	r3, [r7, #14]
    uint8_t mode_reg = magnetometer.operation_mode & 0b11;
 8000fe2:	4b22      	ldr	r3, [pc, #136]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000fe4:	7a1b      	ldrb	r3, [r3, #8]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	737b      	strb	r3, [r7, #13]

    if (HAL_I2C_Mem_Write(magnetometer.hi2c, HMC5883L_ADDRESS, HMC5883L_CONF_REG_A, 1, &config_reg_a, 1, HAL_MAX_DELAY) != HAL_OK ||
 8000fee:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f107 030f 	add.w	r3, r7, #15
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	2200      	movs	r2, #0
 8001006:	213c      	movs	r1, #60	@ 0x3c
 8001008:	f002 fe6c 	bl	8003ce4 <HAL_I2C_Mem_Write>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d123      	bne.n	800105a <HMC5883LDriver_Init+0xe2>
        HAL_I2C_Mem_Write(magnetometer.hi2c, HMC5883L_ADDRESS, HMC5883L_CONF_REG_B, 1, &config_reg_b, 1, HAL_MAX_DELAY) != HAL_OK ||
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2301      	movs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 030e 	add.w	r3, r7, #14
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	2201      	movs	r2, #1
 800102a:	213c      	movs	r1, #60	@ 0x3c
 800102c:	f002 fe5a 	bl	8003ce4 <HAL_I2C_Mem_Write>
 8001030:	4603      	mov	r3, r0
    if (HAL_I2C_Mem_Write(magnetometer.hi2c, HMC5883L_ADDRESS, HMC5883L_CONF_REG_A, 1, &config_reg_a, 1, HAL_MAX_DELAY) != HAL_OK ||
 8001032:	2b00      	cmp	r3, #0
 8001034:	d111      	bne.n	800105a <HMC5883LDriver_Init+0xe2>
        HAL_I2C_Mem_Write(magnetometer.hi2c, HMC5883L_ADDRESS, HMC5883L_MODE_REG, 1, &mode_reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <HMC5883LDriver_Init+0xf4>)
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 030d 	add.w	r3, r7, #13
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	2202      	movs	r2, #2
 800104e:	213c      	movs	r1, #60	@ 0x3c
 8001050:	f002 fe48 	bl	8003ce4 <HAL_I2C_Mem_Write>
 8001054:	4603      	mov	r3, r0
        HAL_I2C_Mem_Write(magnetometer.hi2c, HMC5883L_ADDRESS, HMC5883L_CONF_REG_B, 1, &config_reg_b, 1, HAL_MAX_DELAY) != HAL_OK ||
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <HMC5883LDriver_Init+0xe8>
        printf("Erro ao inicializar o HMC5883L.\n");
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <HMC5883LDriver_Init+0xf8>)
 800105c:	f00a f9ce 	bl	800b3fc <puts>
    }

    // Calibração
    HMC5883LDriver_Calibrate();
 8001060:	f000 f842 	bl	80010e8 <HMC5883LDriver_Calibrate>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000204 	.word	0x20000204
 8001070:	0800e538 	.word	0x0800e538

08001074 <HMC5883LDriver_Read>:

/* Leitura do Magnetômetro */
bool HMC5883LDriver_Read(HMC5883L_DataTypeDef *data) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af04      	add	r7, sp, #16
 800107a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];

    if (HAL_I2C_Mem_Read(magnetometer.hi2c, HMC5883L_ADDRESS, HMC5883L_DATAX_MSB_REG, 1, buffer, 6, HAL_MAX_DELAY) != HAL_OK) {
 800107c:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <HMC5883LDriver_Read+0x70>)
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	2306      	movs	r3, #6
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	213c      	movs	r1, #60	@ 0x3c
 8001096:	f002 ff1f 	bl	8003ed8 <HAL_I2C_Mem_Read>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HMC5883LDriver_Read+0x30>
        return false;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e01b      	b.n	80010dc <HMC5883LDriver_Read+0x68>
    }

    data->x_axis = (buffer[0] << 8) | buffer[1];
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	7a7b      	ldrb	r3, [r7, #9]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	801a      	strh	r2, [r3, #0]
    data->z_axis = (buffer[2] << 8) | buffer[3];
 80010b6:	7abb      	ldrb	r3, [r7, #10]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	809a      	strh	r2, [r3, #4]
    data->y_axis = (buffer[4] << 8) | buffer[5];
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	7b7b      	ldrb	r3, [r7, #13]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	805a      	strh	r2, [r3, #2]

    return true;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000204 	.word	0x20000204

080010e8 <HMC5883LDriver_Calibrate>:

/* Calibração do Magnetômetro */
void HMC5883LDriver_Calibrate(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
    HMC5883L_DataTypeDef data;

    calibration.xmin = INT16_MAX;
 80010ee:	4b76      	ldr	r3, [pc, #472]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 80010f0:	4a76      	ldr	r2, [pc, #472]	@ (80012cc <HMC5883LDriver_Calibrate+0x1e4>)
 80010f2:	601a      	str	r2, [r3, #0]
    calibration.xmax = INT16_MIN;
 80010f4:	4b74      	ldr	r3, [pc, #464]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 80010f6:	f04f 4247 	mov.w	r2, #3338665984	@ 0xc7000000
 80010fa:	605a      	str	r2, [r3, #4]
    calibration.ymin = INT16_MAX;
 80010fc:	4b72      	ldr	r3, [pc, #456]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 80010fe:	4a73      	ldr	r2, [pc, #460]	@ (80012cc <HMC5883LDriver_Calibrate+0x1e4>)
 8001100:	609a      	str	r2, [r3, #8]
    calibration.ymax = INT16_MIN;
 8001102:	4b71      	ldr	r3, [pc, #452]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001104:	f04f 4247 	mov.w	r2, #3338665984	@ 0xc7000000
 8001108:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < 100; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e078      	b.n	8001202 <HMC5883LDriver_Calibrate+0x11a>
        if (HMC5883LDriver_Read(&data)) {
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ffae 	bl	8001074 <HMC5883LDriver_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d06e      	beq.n	80011fc <HMC5883LDriver_Calibrate+0x114>
            calibration.xmin = (data.x_axis < calibration.xmin) ? data.x_axis : calibration.xmin;
 800111e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112a:	4b67      	ldr	r3, [pc, #412]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d506      	bpl.n	8001148 <HMC5883LDriver_Calibrate+0x60>
 800113a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001146:	e002      	b.n	800114e <HMC5883LDriver_Calibrate+0x66>
 8001148:	4b5f      	ldr	r3, [pc, #380]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	4b5e      	ldr	r3, [pc, #376]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001150:	edc3 7a00 	vstr	s15, [r3]
            calibration.xmax = (data.x_axis > calibration.xmax) ? data.x_axis : calibration.xmax;
 8001154:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001160:	4b59      	ldr	r3, [pc, #356]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001162:	edd3 7a01 	vldr	s15, [r3, #4]
 8001166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	dd06      	ble.n	800117e <HMC5883LDriver_Calibrate+0x96>
 8001170:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	e002      	b.n	8001184 <HMC5883LDriver_Calibrate+0x9c>
 800117e:	4b52      	ldr	r3, [pc, #328]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001180:	edd3 7a01 	vldr	s15, [r3, #4]
 8001184:	4b50      	ldr	r3, [pc, #320]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001186:	edc3 7a01 	vstr	s15, [r3, #4]
            calibration.ymin = (data.y_axis < calibration.ymin) ? data.y_axis : calibration.ymin;
 800118a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001196:	4b4c      	ldr	r3, [pc, #304]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001198:	edd3 7a02 	vldr	s15, [r3, #8]
 800119c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d506      	bpl.n	80011b4 <HMC5883LDriver_Calibrate+0xcc>
 80011a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	e002      	b.n	80011ba <HMC5883LDriver_Calibrate+0xd2>
 80011b4:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 80011b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ba:	4b43      	ldr	r3, [pc, #268]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 80011bc:	edc3 7a02 	vstr	s15, [r3, #8]
            calibration.ymax = (data.y_axis > calibration.ymax) ? data.y_axis : calibration.ymax;
 80011c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011cc:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 80011ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80011d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	dd06      	ble.n	80011ea <HMC5883LDriver_Calibrate+0x102>
 80011dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	e002      	b.n	80011f0 <HMC5883LDriver_Calibrate+0x108>
 80011ea:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 80011ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f0:	4b35      	ldr	r3, [pc, #212]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 80011f2:	edc3 7a03 	vstr	s15, [r3, #12]

            HAL_Delay(10);
 80011f6:	200a      	movs	r0, #10
 80011f8:	f001 fdd0 	bl	8002d9c <HAL_Delay>
    for (int i = 0; i < 100; i++) {
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2b63      	cmp	r3, #99	@ 0x63
 8001206:	dd83      	ble.n	8001110 <HMC5883LDriver_Calibrate+0x28>
        }
    }

    calibration.x_offset = (calibration.xmax + calibration.xmin) / 2.0f;
 8001208:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 800120a:	ed93 7a01 	vldr	s14, [r3, #4]
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001218:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800121c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001220:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001222:	edc3 7a04 	vstr	s15, [r3, #16]
    calibration.y_offset = (calibration.ymax + calibration.ymin) / 2.0f;
 8001226:	4b28      	ldr	r3, [pc, #160]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001228:	ed93 7a03 	vldr	s14, [r3, #12]
 800122c:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 800122e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001236:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800123a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123e:	4b22      	ldr	r3, [pc, #136]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001240:	edc3 7a05 	vstr	s15, [r3, #20]

    float x_var = calibration.xmax - calibration.xmin;
 8001244:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001246:	ed93 7a01 	vldr	s14, [r3, #4]
 800124a:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001254:	edc7 7a04 	vstr	s15, [r7, #16]
    float y_var = calibration.ymax - calibration.ymin;
 8001258:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 800125a:	ed93 7a03 	vldr	s14, [r3, #12]
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001260:	edd3 7a02 	vldr	s15, [r3, #8]
 8001264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001268:	edc7 7a03 	vstr	s15, [r7, #12]

    calibration.x_scale = (x_var > y_var) ? 1.0f : y_var / x_var;
 800126c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001270:	edd7 7a03 	vldr	s15, [r7, #12]
 8001274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127c:	dd02      	ble.n	8001284 <HMC5883LDriver_Calibrate+0x19c>
 800127e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001282:	e005      	b.n	8001290 <HMC5883LDriver_Calibrate+0x1a8>
 8001284:	edd7 6a03 	vldr	s13, [r7, #12]
 8001288:	ed97 7a04 	vldr	s14, [r7, #16]
 800128c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001290:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 8001292:	edc3 7a06 	vstr	s15, [r3, #24]
    calibration.y_scale = (y_var > x_var) ? 1.0f : x_var / y_var;
 8001296:	ed97 7a03 	vldr	s14, [r7, #12]
 800129a:	edd7 7a04 	vldr	s15, [r7, #16]
 800129e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd02      	ble.n	80012ae <HMC5883LDriver_Calibrate+0x1c6>
 80012a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80012ac:	e005      	b.n	80012ba <HMC5883LDriver_Calibrate+0x1d2>
 80012ae:	edd7 6a04 	vldr	s13, [r7, #16]
 80012b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ba:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HMC5883LDriver_Calibrate+0x1e0>)
 80012bc:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000210 	.word	0x20000210
 80012cc:	46fffe00 	.word	0x46fffe00

080012d0 <HMC5883LDriver_GetHeading>:

/* Cálculo do Ângulo */
float HMC5883LDriver_GetHeading(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
    HMC5883L_DataTypeDef data;

    if (HMC5883LDriver_Read(&data)) {
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fecb 	bl	8001074 <HMC5883LDriver_Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d07c      	beq.n	80013de <HMC5883LDriver_GetHeading+0x10e>
        float x_norm = (data.x_axis - calibration.x_offset) * calibration.x_scale;
 80012e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f0:	4b43      	ldr	r3, [pc, #268]	@ (8001400 <HMC5883LDriver_GetHeading+0x130>)
 80012f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012fa:	4b41      	ldr	r3, [pc, #260]	@ (8001400 <HMC5883LDriver_GetHeading+0x130>)
 80012fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	edc7 7a04 	vstr	s15, [r7, #16]
        float y_norm = (data.y_axis - calibration.y_offset) * calibration.y_scale;
 8001308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001314:	4b3a      	ldr	r3, [pc, #232]	@ (8001400 <HMC5883LDriver_GetHeading+0x130>)
 8001316:	edd3 7a05 	vldr	s15, [r3, #20]
 800131a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800131e:	4b38      	ldr	r3, [pc, #224]	@ (8001400 <HMC5883LDriver_GetHeading+0x130>)
 8001320:	edd3 7a07 	vldr	s15, [r3, #28]
 8001324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001328:	edc7 7a03 	vstr	s15, [r7, #12]

        float heading = atan2f(y_norm, x_norm);
 800132c:	edd7 0a04 	vldr	s1, [r7, #16]
 8001330:	ed97 0a03 	vldr	s0, [r7, #12]
 8001334:	f00c f864 	bl	800d400 <atan2f>
 8001338:	ed87 0a05 	vstr	s0, [r7, #20]
        heading += MAGNETIC_DECLINATION;
 800133c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001340:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001404 <HMC5883LDriver_GetHeading+0x134>
 8001344:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001348:	edc7 7a05 	vstr	s15, [r7, #20]
        if (heading < 0) heading += 2 * M_PI;
 800134c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d50f      	bpl.n	800137a <HMC5883LDriver_GetHeading+0xaa>
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff f914 	bl	8000588 <__aeabi_f2d>
 8001360:	a323      	add	r3, pc, #140	@ (adr r3, 80013f0 <HMC5883LDriver_GetHeading+0x120>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7fe ffb1 	bl	80002cc <__adddf3>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fc39 	bl	8000be8 <__aeabi_d2f>
 8001376:	4603      	mov	r3, r0
 8001378:	617b      	str	r3, [r7, #20]
        if (heading >= 2 * M_PI) heading -= 2 * M_PI;
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff f904 	bl	8000588 <__aeabi_f2d>
 8001380:	a31b      	add	r3, pc, #108	@ (adr r3, 80013f0 <HMC5883LDriver_GetHeading+0x120>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff fbdd 	bl	8000b44 <__aeabi_dcmpge>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00f      	beq.n	80013b0 <HMC5883LDriver_GetHeading+0xe0>
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f7ff f8f9 	bl	8000588 <__aeabi_f2d>
 8001396:	a316      	add	r3, pc, #88	@ (adr r3, 80013f0 <HMC5883LDriver_GetHeading+0x120>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7fe ff94 	bl	80002c8 <__aeabi_dsub>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fc1e 	bl	8000be8 <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	617b      	str	r3, [r7, #20]

        return heading * 180.0f / M_PI;
 80013b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80013b4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001408 <HMC5883LDriver_GetHeading+0x138>
 80013b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013bc:	ee17 0a90 	vmov	r0, s15
 80013c0:	f7ff f8e2 	bl	8000588 <__aeabi_f2d>
 80013c4:	a30c      	add	r3, pc, #48	@ (adr r3, 80013f8 <HMC5883LDriver_GetHeading+0x128>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff fa5f 	bl	800088c <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fc07 	bl	8000be8 <__aeabi_d2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	e001      	b.n	80013e2 <HMC5883LDriver_GetHeading+0x112>
    }

    return 0; // Retorna 0 se a leitura falhar
 80013de:	f04f 0300 	mov.w	r3, #0
}
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	54442d18 	.word	0x54442d18
 80013f4:	401921fb 	.word	0x401921fb
 80013f8:	54442d18 	.word	0x54442d18
 80013fc:	400921fb 	.word	0x400921fb
 8001400:	20000210 	.word	0x20000210
 8001404:	00000000 	.word	0x00000000
 8001408:	43340000 	.word	0x43340000

0800140c <JDY18_Init>:

/**
 * @brief Inicializa o módulo JDY-18 com as configurações necessárias para a competição.
 */
void JDY18_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    JDY18_SendCommand("AT");                 // Entra no modo AT
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <JDY18_Init+0x38>)
 8001412:	f000 f825 	bl	8001460 <JDY18_SendCommand>
    JDY18_SendCommand("AT+RESET");           // Reset para estado inicial
 8001416:	480c      	ldr	r0, [pc, #48]	@ (8001448 <JDY18_Init+0x3c>)
 8001418:	f000 f822 	bl	8001460 <JDY18_SendCommand>
    JDY18_SendCommand("AT+NAMEWAVE_RUNNER"); // Configura nome do módulo
 800141c:	480b      	ldr	r0, [pc, #44]	@ (800144c <JDY18_Init+0x40>)
 800141e:	f000 f81f 	bl	8001460 <JDY18_SendCommand>
    JDY18_SendCommand("AT+ROLE1");           // Define como central (master)
 8001422:	480b      	ldr	r0, [pc, #44]	@ (8001450 <JDY18_Init+0x44>)
 8001424:	f000 f81c 	bl	8001460 <JDY18_SendCommand>
    JDY18_SendCommand("AT+INQM=0,10,24");    // Configura modo de inquiry
 8001428:	480a      	ldr	r0, [pc, #40]	@ (8001454 <JDY18_Init+0x48>)
 800142a:	f000 f819 	bl	8001460 <JDY18_SendCommand>
    JDY18_SendCommand("AT+BAUD4");           // Define baud rate 9600bps
 800142e:	480a      	ldr	r0, [pc, #40]	@ (8001458 <JDY18_Init+0x4c>)
 8001430:	f000 f816 	bl	8001460 <JDY18_SendCommand>
    JDY18_SendCommand("AT+PARITY0");         // Sem paridade
 8001434:	4809      	ldr	r0, [pc, #36]	@ (800145c <JDY18_Init+0x50>)
 8001436:	f000 f813 	bl	8001460 <JDY18_SendCommand>
    JDY18_SendCommand("AT+RESET");           // Reinicia para aplicar configurações
 800143a:	4803      	ldr	r0, [pc, #12]	@ (8001448 <JDY18_Init+0x3c>)
 800143c:	f000 f810 	bl	8001460 <JDY18_SendCommand>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	0800e558 	.word	0x0800e558
 8001448:	0800e55c 	.word	0x0800e55c
 800144c:	0800e568 	.word	0x0800e568
 8001450:	0800e57c 	.word	0x0800e57c
 8001454:	0800e588 	.word	0x0800e588
 8001458:	0800e598 	.word	0x0800e598
 800145c:	0800e5a4 	.word	0x0800e5a4

08001460 <JDY18_SendCommand>:
/**
 * @brief Envia um comando AT para o JDY-18.
 * @param cmd Comando a ser enviado.
 */
void JDY18_SendCommand(const char *cmd)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)cmd, strlen(cmd), HAL_MAX_DELAY);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7fe ff21 	bl	80002b0 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4806      	ldr	r0, [pc, #24]	@ (8001494 <JDY18_SendCommand+0x34>)
 800147a:	f005 f8f3 	bl	8006664 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	2202      	movs	r2, #2
 8001484:	4904      	ldr	r1, [pc, #16]	@ (8001498 <JDY18_SendCommand+0x38>)
 8001486:	4803      	ldr	r0, [pc, #12]	@ (8001494 <JDY18_SendCommand+0x34>)
 8001488:	f005 f8ec 	bl	8006664 <HAL_UART_Transmit>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000500 	.word	0x20000500
 8001498:	0800e5b0 	.word	0x0800e5b0

0800149c <JDY18_ReceiveResponse>:

/**
 * @brief Inicia a recepção de dados do JDY-18.
 */
void JDY18_ReceiveResponse(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
    memset(rxBuffer, 0, sizeof(rxBuffer));                      // Limpa o buffer
 80014a0:	22fe      	movs	r2, #254	@ 0xfe
 80014a2:	2100      	movs	r1, #0
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <JDY18_ReceiveResponse+0x20>)
 80014a6:	f00a f889 	bl	800b5bc <memset>
    HAL_UART_Receive(&huart3, rxBuffer, sizeof(rxBuffer), 500); // Timeout ajustável
 80014aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014ae:	22fe      	movs	r2, #254	@ 0xfe
 80014b0:	4902      	ldr	r1, [pc, #8]	@ (80014bc <JDY18_ReceiveResponse+0x20>)
 80014b2:	4803      	ldr	r0, [pc, #12]	@ (80014c0 <JDY18_ReceiveResponse+0x24>)
 80014b4:	f005 f961 	bl	800677a <HAL_UART_Receive>
    if (DEBUG_MODE)
    {
        printf("Received: %s\n", rxBuffer);
    }
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000234 	.word	0x20000234
 80014c0:	20000500 	.word	0x20000500

080014c4 <JDY18_ScanDevices>:

/**
 * @brief Realiza a varredura de dispositivos Bluetooth.
 */
void JDY18_ScanDevices(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
    JDY18_BeaconCount = 0; // Reseta contadores
 80014ca:	4b34      	ldr	r3, [pc, #208]	@ (800159c <JDY18_ScanDevices+0xd8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
    JDY18_SendCommand("AT+INQ");
 80014d0:	4833      	ldr	r0, [pc, #204]	@ (80015a0 <JDY18_ScanDevices+0xdc>)
 80014d2:	f7ff ffc5 	bl	8001460 <JDY18_SendCommand>
    JDY18_ReceiveResponse();
 80014d6:	f7ff ffe1 	bl	800149c <JDY18_ReceiveResponse>

    char *start = (char *)rxBuffer;
 80014da:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <JDY18_ScanDevices+0xe0>)
 80014dc:	607b      	str	r3, [r7, #4]
	printf("Dispositivos escaneados.\n");
 80014de:	4832      	ldr	r0, [pc, #200]	@ (80015a8 <JDY18_ScanDevices+0xe4>)
 80014e0:	f009 ff8c 	bl	800b3fc <puts>
    while ((start = strstr(start, "+DEV:")) != NULL)
 80014e4:	e04c      	b.n	8001580 <JDY18_ScanDevices+0xbc>
    {
        int rssi = ExtractRSSI(start);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f86c 	bl	80015c4 <ExtractRSSI>
 80014ec:	6038      	str	r0, [r7, #0]

        // Verifica se o dispositivo corresponde a um dos beacons
        if (strstr(start, BEACON_NAME_1) != NULL)
 80014ee:	492f      	ldr	r1, [pc, #188]	@ (80015ac <JDY18_ScanDevices+0xe8>)
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f00a f878 	bl	800b5e6 <strstr>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00d      	beq.n	8001518 <JDY18_ScanDevices+0x54>
        {
            JDY18_RSSI[0] = calculateDistance(rssi);
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f000 f887 	bl	8001610 <calculateDistance>
 8001502:	eef0 7a40 	vmov.f32	s15, s0
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <JDY18_ScanDevices+0xec>)
 8001508:	edc3 7a00 	vstr	s15, [r3]
#if DEBUG_MODE
            printf("BEACON_NAME_1 -> RSSI: %d, Distance: %.2f meters\n", rssi, JDY18_RSSI[0]);
#endif
            JDY18_BeaconCount++;
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <JDY18_ScanDevices+0xd8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a22      	ldr	r2, [pc, #136]	@ (800159c <JDY18_ScanDevices+0xd8>)
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e028      	b.n	800156a <JDY18_ScanDevices+0xa6>
        }
        else if (strstr(start, BEACON_NAME_2) != NULL)
 8001518:	4926      	ldr	r1, [pc, #152]	@ (80015b4 <JDY18_ScanDevices+0xf0>)
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f00a f863 	bl	800b5e6 <strstr>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00d      	beq.n	8001542 <JDY18_ScanDevices+0x7e>
        {
            JDY18_RSSI[1] = calculateDistance(rssi);
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f000 f872 	bl	8001610 <calculateDistance>
 800152c:	eef0 7a40 	vmov.f32	s15, s0
 8001530:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <JDY18_ScanDevices+0xec>)
 8001532:	edc3 7a01 	vstr	s15, [r3, #4]
#if DEBUG_MODE
            printf("BEACON_NAME_2 -> RSSI: %d, Distance: %.2f meters\n", rssi, JDY18_RSSI[1]);
#endif
            JDY18_BeaconCount++;
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <JDY18_ScanDevices+0xd8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	4a17      	ldr	r2, [pc, #92]	@ (800159c <JDY18_ScanDevices+0xd8>)
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	e013      	b.n	800156a <JDY18_ScanDevices+0xa6>
        }
        else if (strstr(start, BEACON_NAME_3) != NULL)
 8001542:	491d      	ldr	r1, [pc, #116]	@ (80015b8 <JDY18_ScanDevices+0xf4>)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f00a f84e 	bl	800b5e6 <strstr>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00c      	beq.n	800156a <JDY18_ScanDevices+0xa6>
        {
            JDY18_RSSI[2] = calculateDistance(rssi);
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f000 f85d 	bl	8001610 <calculateDistance>
 8001556:	eef0 7a40 	vmov.f32	s15, s0
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <JDY18_ScanDevices+0xec>)
 800155c:	edc3 7a02 	vstr	s15, [r3, #8]
#if DEBUG_MODE
            printf("BEACON_NAME_3 -> RSSI: %d, Distance: %.2f meters\n", rssi, JDY18_RSSI[2]);
#endif
            JDY18_BeaconCount++;
 8001560:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <JDY18_ScanDevices+0xd8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a0d      	ldr	r2, [pc, #52]	@ (800159c <JDY18_ScanDevices+0xd8>)
 8001568:	6013      	str	r3, [r2, #0]
        }

        // Avança para o próximo token
        start = strstr(start, "\r\n");
 800156a:	4914      	ldr	r1, [pc, #80]	@ (80015bc <JDY18_ScanDevices+0xf8>)
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f00a f83a 	bl	800b5e6 <strstr>
 8001572:	6078      	str	r0, [r7, #4]
        if (start != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <JDY18_ScanDevices+0xbc>
            start += 2;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3302      	adds	r3, #2
 800157e:	607b      	str	r3, [r7, #4]
    while ((start = strstr(start, "+DEV:")) != NULL)
 8001580:	490f      	ldr	r1, [pc, #60]	@ (80015c0 <JDY18_ScanDevices+0xfc>)
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f00a f82f 	bl	800b5e6 <strstr>
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1aa      	bne.n	80014e6 <JDY18_ScanDevices+0x22>
    }

#if DEBUG_MODE
    //    printf("Total Relevant Devices Found: %d\n", JDY18_BeaconCount);
#endif
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000340 	.word	0x20000340
 80015a0:	0800e5b4 	.word	0x0800e5b4
 80015a4:	20000234 	.word	0x20000234
 80015a8:	0800e5bc 	.word	0x0800e5bc
 80015ac:	0800e5d8 	.word	0x0800e5d8
 80015b0:	20000334 	.word	0x20000334
 80015b4:	0800e5e4 	.word	0x0800e5e4
 80015b8:	0800e5f0 	.word	0x0800e5f0
 80015bc:	0800e5b0 	.word	0x0800e5b0
 80015c0:	0800e5fc 	.word	0x0800e5fc

080015c4 <ExtractRSSI>:
 * @brief Extrai o valor de RSSI de um token recebido.
 * @param token String do dispositivo detectado.
 * @return RSSI como um número inteiro.
 */
int ExtractRSSI(char *token)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    // Localiza a primeira vírgula
    char *firstComma = strchr(token, ',');
 80015cc:	212c      	movs	r1, #44	@ 0x2c
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f009 fffc 	bl	800b5cc <strchr>
 80015d4:	60f8      	str	r0, [r7, #12]
    if (firstComma != NULL)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d013      	beq.n	8001604 <ExtractRSSI+0x40>
    {
        // Avança para o próximo caractere após a primeira vírgula
        char *rssiStart = firstComma + 1;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3301      	adds	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]

        // Verifica se o próximo caractere é um número ou sinal de RSSI (-)
        if (*rssiStart == '-' || (*rssiStart >= '0' && *rssiStart <= '9'))
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b2d      	cmp	r3, #45	@ 0x2d
 80015e8:	d007      	beq.n	80015fa <ExtractRSSI+0x36>
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80015f0:	d908      	bls.n	8001604 <ExtractRSSI+0x40>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b39      	cmp	r3, #57	@ 0x39
 80015f8:	d804      	bhi.n	8001604 <ExtractRSSI+0x40>
        {
            return atoi(rssiStart); // Converte o valor para inteiro
 80015fa:	68b8      	ldr	r0, [r7, #8]
 80015fc:	f009 f8f4 	bl	800a7e8 <atoi>
 8001600:	4603      	mov	r3, r0
 8001602:	e001      	b.n	8001608 <ExtractRSSI+0x44>
        }
    }
    return -100; // Retorna -100 em caso de falha
 8001604:	f06f 0363 	mvn.w	r3, #99	@ 0x63
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <calculateDistance>:
 * @brief Calcula a distância baseada no RSSI.
 * @param rssi Valor do RSSI recebido.
 * @return Distância estimada em metros.
 */
float calculateDistance(int rssi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
    static const int rssi_at_one_meter = -59; // RSSI típico a 1 metro
    return pow(10.0, (rssi_at_one_meter - rssi) / (10.0 * 2.0));
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <calculateDistance+0x60>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff9f 	bl	8000564 <__aeabi_i2d>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <calculateDistance+0x64>)
 800162c:	f7ff f92e 	bl	800088c <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	ec43 2b17 	vmov	d7, r2, r3
 8001638:	eeb0 1a47 	vmov.f32	s2, s14
 800163c:	eef0 1a67 	vmov.f32	s3, s15
 8001640:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001668 <calculateDistance+0x58>
 8001644:	f00b fe6c 	bl	800d320 <pow>
 8001648:	ec53 2b10 	vmov	r2, r3, d0
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff faca 	bl	8000be8 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
}
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	f3af 8000 	nop.w
 8001668:	00000000 	.word	0x00000000
 800166c:	40240000 	.word	0x40240000
 8001670:	0800e894 	.word	0x0800e894
 8001674:	40340000 	.word	0x40340000

08001678 <HAL_UART_RxCpltCallback>:
/**
 * @brief Callback de recepção UART via DMA.
 * @param huart Handle do UART que chamou o callback.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af02      	add	r7, sp, #8
 800167e:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a11      	ldr	r2, [pc, #68]	@ (80016c8 <HAL_UART_RxCpltCallback+0x50>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d11a      	bne.n	80016be <HAL_UART_RxCpltCallback+0x46>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]

        /* Notifica a tarefa responsável pelo processamento */
        if (JDY18_TaskHandle != NULL)
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <HAL_UART_RxCpltCallback+0x54>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <HAL_UART_RxCpltCallback+0x30>
        {
            xTaskNotifyFromISR(JDY18_TaskHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8001694:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_UART_RxCpltCallback+0x54>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	f007 ffd0 	bl	8009648 <xTaskGenericNotifyFromISR>
        }

        /* Garante que a tarefa notificada será executada imediatamente */
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <HAL_UART_RxCpltCallback+0x46>
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <HAL_UART_RxCpltCallback+0x58>)
 80016b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	f3bf 8f6f 	isb	sy
    }
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000500 	.word	0x20000500
 80016cc:	20000230 	.word	0x20000230
 80016d0:	e000ed04 	.word	0xe000ed04

080016d4 <L293DDriver_Init>:
 *
 * @param handler Ponteiro para o handler do módulo L293D.
 * @param period Período inicial do timer.
 */
void L293DDriver_Init(L293D_HandleTypeDef* handler, uint32_t period)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
    PwmService_SetPeriod(handler->htim, handler->channel, period);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f000 fba1 	bl	8001e30 <PwmService_SetPeriod>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <L293DDriver_SetSpeed>:
 *
 * @param handler Ponteiro para o handler do módulo L293D.
 * @param speed Velocidade relativa do motor, entre 0.0 (mínima) e 1.0 (máxima).
 */
void L293DDriver_SetSpeed(L293D_HandleTypeDef* handler, float speed)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	ed87 0a00 	vstr	s0, [r7]
    PwmService_SetDutyCycle(handler->htim, handler->channel, speed);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	ed97 0a00 	vldr	s0, [r7]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f000 fba5 	bl	8001e60 <PwmService_SetDutyCycle>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <SG90Driver_SetPosition>:
#include "pwm_config.h"

int lastDegrees = 91;
static int16_t current_degrees = -999; // Valor inicial inválido

void SG90Driver_SetPosition(TIM_HandleTypeDef* htim, uint32_t channel, int16_t degrees) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	4613      	mov	r3, r2
 800172c:	80fb      	strh	r3, [r7, #6]
    // Limita os graus entre -90 e 90
    if (degrees < -90) degrees = -90;
 800172e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001732:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8001736:	da02      	bge.n	800173e <SG90Driver_SetPosition+0x1e>
 8001738:	f64f 73a6 	movw	r3, #65446	@ 0xffa6
 800173c:	80fb      	strh	r3, [r7, #6]
    if (degrees > 90) degrees = 90;
 800173e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001742:	2b5a      	cmp	r3, #90	@ 0x5a
 8001744:	dd01      	ble.n	800174a <SG90Driver_SetPosition+0x2a>
 8001746:	235a      	movs	r3, #90	@ 0x5a
 8001748:	80fb      	strh	r3, [r7, #6]

    // Mapeia os graus para pulsos em ticks
    uint32_t pulse_ticks = ((degrees + 90) * (200 - 100) / 180) + 100;
 800174a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174e:	335a      	adds	r3, #90	@ 0x5a
 8001750:	2264      	movs	r2, #100	@ 0x64
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	4a0f      	ldr	r2, [pc, #60]	@ (8001794 <SG90Driver_SetPosition+0x74>)
 8001758:	fb82 1203 	smull	r1, r2, r2, r3
 800175c:	441a      	add	r2, r3
 800175e:	11d2      	asrs	r2, r2, #7
 8001760:	17db      	asrs	r3, r3, #31
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	3364      	adds	r3, #100	@ 0x64
 8001766:	617b      	str	r3, [r7, #20]

    // Converte ticks para duty cycle (fração do período total)
    float duty_cycle = (float)pulse_ticks / 2000.0f; // 2000 é o período total do timer
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001772:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001798 <SG90Driver_SetPosition+0x78>
 8001776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Ajusta o PWM
    PwmService_SetDutyCycle(htim, channel, duty_cycle);
 800177e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 fb6b 	bl	8001e60 <PwmService_SetDutyCycle>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	b60b60b7 	.word	0xb60b60b7
 8001798:	44fa0000 	.word	0x44fa0000

0800179c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80017a4:	1d39      	adds	r1, r7, #4
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	2201      	movs	r2, #1
 80017ac:	4803      	ldr	r0, [pc, #12]	@ (80017bc <__io_putchar+0x20>)
 80017ae:	f004 ff59 	bl	8006664 <HAL_UART_Transmit>
  return ch;
 80017b2:	687b      	ldr	r3, [r7, #4]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200004b8 	.word	0x200004b8

080017c0 <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b08c      	sub	sp, #48	@ 0x30
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c6:	f001 fa77 	bl	8002cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ca:	f000 f84d 	bl	8001868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ce:	f000 fac1 	bl	8001d54 <MX_GPIO_Init>
  MX_DMA_Init();
 80017d2:	f000 fa97 	bl	8001d04 <MX_DMA_Init>
  MX_TIM3_Init();
 80017d6:	f000 f921 	bl	8001a1c <MX_TIM3_Init>
  MX_TIM2_Init();
 80017da:	f000 f8d3 	bl	8001984 <MX_TIM2_Init>
  MX_I2C1_Init();
 80017de:	f000 f8a3 	bl	8001928 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80017e2:	f000 fa3b 	bl	8001c5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017e6:	f000 fa63 	bl	8001cb0 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 80017ea:	f000 f9e9 	bl	8001bc0 <MX_TIM5_Init>
  MX_TIM4_Init();
 80017ee:	f000 f98d 	bl	8001b0c <MX_TIM4_Init>

  // Inicialização de dispositivos
  JDY18_Init();
 80017f2:	f7ff fe0b 	bl	800140c <JDY18_Init>
  HMC5883LDriver_Init(&hi2c1);
 80017f6:	4817      	ldr	r0, [pc, #92]	@ (8001854 <main+0x94>)
 80017f8:	f7ff fbbe 	bl	8000f78 <HMC5883LDriver_Init>

  DEBUG_PRINT("Sistema iniciado.\n");
 80017fc:	4816      	ldr	r0, [pc, #88]	@ (8001858 <main+0x98>)
 80017fe:	f009 fdfd 	bl	800b3fc <puts>

  // Inicialização do kernel do FreeRTOS
  osKernelInitialize();
 8001802:	f005 ffa1 	bl	8007748 <osKernelInitialize>

  // Criação de filas
  sensorDataQueueHandle = osMessageQueueNew(10, sizeof(SensorData_t), NULL);
 8001806:	2200      	movs	r2, #0
 8001808:	2110      	movs	r1, #16
 800180a:	200a      	movs	r0, #10
 800180c:	f006 f893 	bl	8007936 <osMessageQueueNew>
 8001810:	4603      	mov	r3, r0
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <main+0x9c>)
 8001814:	6013      	str	r3, [r2, #0]
  actuationDataQueueHandle = osMessageQueueNew(10, sizeof(ActuationData_t), NULL);
 8001816:	2200      	movs	r2, #0
 8001818:	210c      	movs	r1, #12
 800181a:	200a      	movs	r0, #10
 800181c:	f006 f88b 	bl	8007936 <osMessageQueueNew>
 8001820:	4603      	mov	r3, r0
 8001822:	4a0f      	ldr	r2, [pc, #60]	@ (8001860 <main+0xa0>)
 8001824:	6013      	str	r3, [r2, #0]
  ;

  TaskActuationArgs_t actuationArgs = {
 8001826:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <main+0xa4>)
 8001828:	463c      	mov	r4, r7
 800182a:	461d      	mov	r5, r3
 800182c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001834:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          .SER_GPIO = GPIOA,
          .SER_Pin = GPIO_PIN_10,
          .CLK_GPIO = GPIOA,
          .CLK_Pin = GPIO_PIN_11}};

  CreateTasks(&actuationArgs);
 800183c:	463b      	mov	r3, r7
 800183e:	4618      	mov	r0, r3
 8001840:	f001 f938 	bl	8002ab4 <CreateTasks>

  // Início do kernel do FreeRTOS
  osKernelStart();
 8001844:	f005 ffa4 	bl	8007790 <osKernelStart>

  // Loop principal para diagnóstico (caso o kernel pare)
  while (1)
  {
    HAL_Delay(1000);
 8001848:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800184c:	f001 faa6 	bl	8002d9c <HAL_Delay>
 8001850:	e7fa      	b.n	8001848 <main+0x88>
 8001852:	bf00      	nop
 8001854:	20000344 	.word	0x20000344
 8001858:	0800e610 	.word	0x0800e610
 800185c:	20000608 	.word	0x20000608
 8001860:	2000060c 	.word	0x2000060c
 8001864:	0800e624 	.word	0x0800e624

08001868 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	@ 0x50
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	2234      	movs	r2, #52	@ 0x34
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f009 fea0 	bl	800b5bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <SystemClock_Config+0xb8>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	4a22      	ldr	r2, [pc, #136]	@ (8001920 <SystemClock_Config+0xb8>)
 8001896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189a:	6413      	str	r3, [r2, #64]	@ 0x40
 800189c:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <SystemClock_Config+0xb8>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018a8:	2300      	movs	r3, #0
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <SystemClock_Config+0xbc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001924 <SystemClock_Config+0xbc>)
 80018b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <SystemClock_Config+0xbc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018cc:	2301      	movs	r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d0:	2310      	movs	r3, #16
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fba5 	bl	800502c <HAL_RCC_OscConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80018e8:	f000 fa9c 	bl	8001e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ec:	230f      	movs	r3, #15
 80018ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f003 f8cc 	bl	8004aa4 <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001912:	f000 fa87 	bl	8001e24 <Error_Handler>
  }
}
 8001916:	bf00      	nop
 8001918:	3750      	adds	r7, #80	@ 0x50
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <MX_I2C1_Init+0x50>)
 800192e:	4a13      	ldr	r2, [pc, #76]	@ (800197c <MX_I2C1_Init+0x54>)
 8001930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001934:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <MX_I2C1_Init+0x58>)
 8001936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800194a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001966:	f002 f879 	bl	8003a5c <HAL_I2C_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001970:	f000 fa58 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000344 	.word	0x20000344
 800197c:	40005400 	.word	0x40005400
 8001980:	000186a0 	.word	0x000186a0

08001984 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	463b      	mov	r3, r7
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160 - 1;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019aa:	229f      	movs	r2, #159	@ 0x9f
 80019ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 80019b4:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019b6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80019ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019bc:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c8:	4813      	ldr	r0, [pc, #76]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019ca:	f003 fdcd 	bl	8005568 <HAL_TIM_Base_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019d4:	f000 fa26 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	4619      	mov	r1, r3
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019e6:	f004 f947 	bl	8005c78 <HAL_TIM_ConfigClockSource>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019f0:	f000 fa18 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_TIM2_Init+0x94>)
 8001a02:	f004 fd4f 	bl	80064a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a0c:	f000 fa0a 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001a10:	bf00      	nop
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000398 	.word	0x20000398

08001a1c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08e      	sub	sp, #56	@ 0x38
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	f107 0320 	add.w	r3, r7, #32
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b08 <MX_TIM3_Init+0xec>)
 8001a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a52:	4b2c      	ldr	r3, [pc, #176]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a58:	4b2a      	ldr	r3, [pc, #168]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001a5e:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001a60:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a66:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a74:	4823      	ldr	r0, [pc, #140]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001a76:	f003 fd77 	bl	8005568 <HAL_TIM_Base_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a80:	f000 f9d0 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481c      	ldr	r0, [pc, #112]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001a92:	f004 f8f1 	bl	8005c78 <HAL_TIM_ConfigClockSource>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a9c:	f000 f9c2 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aa0:	4818      	ldr	r0, [pc, #96]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001aa2:	f003 fdb0 	bl	8005606 <HAL_TIM_PWM_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001aac:	f000 f9ba 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	4619      	mov	r1, r3
 8001abe:	4811      	ldr	r0, [pc, #68]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001ac0:	f004 fcf0 	bl	80064a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001aca:	f000 f9ab 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ace:	2360      	movs	r3, #96	@ 0x60
 8001ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4807      	ldr	r0, [pc, #28]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001ae6:	f004 f805 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001af0:	f000 f998 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001af4:	4803      	ldr	r0, [pc, #12]	@ (8001b04 <MX_TIM3_Init+0xe8>)
 8001af6:	f000 faff 	bl	80020f8 <HAL_TIM_MspPostInit>
}
 8001afa:	bf00      	nop
 8001afc:	3738      	adds	r7, #56	@ 0x38
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003e0 	.word	0x200003e0
 8001b08:	40000400 	.word	0x40000400

08001b0c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b2e:	4b22      	ldr	r3, [pc, #136]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001b30:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <MX_TIM4_Init+0xb0>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160 - 1;
 8001b34:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001b36:	229f      	movs	r2, #159	@ 0x9f
 8001b38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000 - 1;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001b42:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001b46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b54:	4818      	ldr	r0, [pc, #96]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001b56:	f003 fd56 	bl	8005606 <HAL_TIM_PWM_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001b60:	f000 f960 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b6c:	f107 0320 	add.w	r3, r7, #32
 8001b70:	4619      	mov	r1, r3
 8001b72:	4811      	ldr	r0, [pc, #68]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001b74:	f004 fc96 	bl	80064a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001b7e:	f000 f951 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b82:	2360      	movs	r3, #96	@ 0x60
 8001b84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4807      	ldr	r0, [pc, #28]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001b9a:	f003 ffab 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001ba4:	f000 f93e 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ba8:	4803      	ldr	r0, [pc, #12]	@ (8001bb8 <MX_TIM4_Init+0xac>)
 8001baa:	f000 faa5 	bl	80020f8 <HAL_TIM_MspPostInit>
}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	@ 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000428 	.word	0x20000428
 8001bbc:	40000800 	.word	0x40000800

08001bc0 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <MX_TIM5_Init+0x94>)
 8001bde:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <MX_TIM5_Init+0x98>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100 - 1;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c54 <MX_TIM5_Init+0x94>)
 8001be4:	2263      	movs	r2, #99	@ 0x63
 8001be6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <MX_TIM5_Init+0x94>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8000 - 1;
 8001bee:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <MX_TIM5_Init+0x94>)
 8001bf0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001bf4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <MX_TIM5_Init+0x94>)
 8001bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bfc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <MX_TIM5_Init+0x94>)
 8001c00:	2280      	movs	r2, #128	@ 0x80
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c04:	4813      	ldr	r0, [pc, #76]	@ (8001c54 <MX_TIM5_Init+0x94>)
 8001c06:	f003 fcaf 	bl	8005568 <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001c10:	f000 f908 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <MX_TIM5_Init+0x94>)
 8001c22:	f004 f829 	bl	8005c78 <HAL_TIM_ConfigClockSource>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001c2c:	f000 f8fa 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c38:	463b      	mov	r3, r7
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <MX_TIM5_Init+0x94>)
 8001c3e:	f004 fc31 	bl	80064a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001c48:	f000 f8ec 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
}
 8001c4c:	bf00      	nop
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000470 	.word	0x20000470
 8001c58:	40000c00 	.word	0x40000c00

08001c5c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	@ (8001cac <MX_USART2_UART_Init+0x50>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c94:	f004 fc96 	bl	80065c4 <HAL_UART_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c9e:	f000 f8c1 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200004b8 	.word	0x200004b8
 8001cac:	40004400 	.word	0x40004400

08001cb0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <MX_USART3_UART_Init+0x50>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cbc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ce6:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001ce8:	f004 fc6c 	bl	80065c4 <HAL_UART_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cf2:	f000 f897 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000500 	.word	0x20000500
 8001d00:	40004800 	.word	0x40004800

08001d04 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <MX_DMA_Init+0x4c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a0f      	ldr	r2, [pc, #60]	@ (8001d50 <MX_DMA_Init+0x4c>)
 8001d14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <MX_DMA_Init+0x4c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	200c      	movs	r0, #12
 8001d2c:	f001 f935 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d30:	200c      	movs	r0, #12
 8001d32:	f001 f94e 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2105      	movs	r1, #5
 8001d3a:	200e      	movs	r0, #14
 8001d3c:	f001 f92d 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001d40:	200e      	movs	r0, #14
 8001d42:	f001 f946 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e18 <MX_GPIO_Init+0xc4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a29      	ldr	r2, [pc, #164]	@ (8001e18 <MX_GPIO_Init+0xc4>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b27      	ldr	r3, [pc, #156]	@ (8001e18 <MX_GPIO_Init+0xc4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <MX_GPIO_Init+0xc4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a22      	ldr	r2, [pc, #136]	@ (8001e18 <MX_GPIO_Init+0xc4>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <MX_GPIO_Init+0xc4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <MX_GPIO_Init+0xc4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a1b      	ldr	r2, [pc, #108]	@ (8001e18 <MX_GPIO_Init+0xc4>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <MX_GPIO_Init+0xc4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L293D_LATCH_Pin | L293D_EN_Pin | L293D_SER_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8001dc4:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <MX_GPIO_Init+0xc8>)
 8001dc6:	f001 fe2f 	bl	8003a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2120      	movs	r1, #32
 8001dce:	4814      	ldr	r0, [pc, #80]	@ (8001e20 <MX_GPIO_Init+0xcc>)
 8001dd0:	f001 fe2a 	bl	8003a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = L293D_LATCH_Pin | L293D_EN_Pin | L293D_SER_Pin;
 8001dd4:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <MX_GPIO_Init+0xc8>)
 8001dee:	f001 fc87 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 8001df2:	2320      	movs	r3, #32
 8001df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_GPIO_Init+0xcc>)
 8001e0a:	f001 fc79 	bl	8003700 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020400 	.word	0x40020400

08001e24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <Error_Handler+0x8>

08001e30 <PwmService_SetPeriod>:
 */

#include "pwm_config.h"

void PwmService_SetPeriod(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t period)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	HAL_TIM_PWM_Stop(htim, channel);
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f003 fcf8 	bl	8005834 <HAL_TIM_PWM_Stop>

	htim->Init.Period = period;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Init(htim);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f003 fbdb 	bl	8005606 <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(htim, channel);
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f003 fc26 	bl	80056a4 <HAL_TIM_PWM_Start>
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <PwmService_SetDutyCycle>:

void PwmService_SetDutyCycle(TIM_HandleTypeDef *htim, uint32_t channel, float duty_cycle)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	@ 0x30
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_TIM_PWM_Stop(htim, channel);
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f003 fcdf 	bl	8005834 <HAL_TIM_PWM_Stop>

	uint32_t pulse = duty_cycle * htim->Init.Period;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8e:	ee17 3a90 	vmov	r3, s15
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	615a      	str	r2, [r3, #20]
 8001ea6:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea8:	2360      	movs	r3, #96	@ 0x60
 8001eaa:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = pulse;
 8001eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eae:	617b      	str	r3, [r7, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
	HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, channel);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f003 fe17 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(htim, channel);
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f003 fbeb 	bl	80056a4 <HAL_TIM_PWM_Start>
}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	@ 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <HAL_MspInit+0x54>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_MspInit+0x54>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <HAL_MspInit+0x54>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_MspInit+0x54>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <HAL_MspInit+0x54>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <HAL_MspInit+0x54>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	210f      	movs	r1, #15
 8001f1a:	f06f 0001 	mvn.w	r0, #1
 8001f1e:	f001 f83c 	bl	8002f9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	@ 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <HAL_I2C_MspInit+0x84>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d12c      	bne.n	8001fac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_I2C_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a17      	ldr	r2, [pc, #92]	@ (8001fb8 <HAL_I2C_MspInit+0x88>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <HAL_I2C_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f6e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f74:	2312      	movs	r3, #18
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f80:	2304      	movs	r3, #4
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <HAL_I2C_MspInit+0x8c>)
 8001f8c:	f001 fbb8 	bl	8003700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_I2C_MspInit+0x88>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_I2C_MspInit+0x88>)
 8001f9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <HAL_I2C_MspInit+0x88>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	@ 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40005400 	.word	0x40005400
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020400 	.word	0x40020400

08001fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	@ 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe0:	d12c      	bne.n	800203c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4a2e      	ldr	r2, [pc, #184]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a27      	ldr	r2, [pc, #156]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b25      	ldr	r3, [pc, #148]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800201a:	2308      	movs	r3, #8
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800202a:	2301      	movs	r3, #1
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	481c      	ldr	r0, [pc, #112]	@ (80020a8 <HAL_TIM_Base_MspInit+0xe8>)
 8002036:	f001 fb63 	bl	8003700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800203a:	e02e      	b.n	800209a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1a      	ldr	r2, [pc, #104]	@ (80020ac <HAL_TIM_Base_MspInit+0xec>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	4a15      	ldr	r2, [pc, #84]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6413      	str	r3, [r2, #64]	@ 0x40
 8002056:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
}
 8002062:	e01a      	b.n	800209a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM5)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a11      	ldr	r2, [pc, #68]	@ (80020b0 <HAL_TIM_Base_MspInit+0xf0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d115      	bne.n	800209a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6413      	str	r3, [r2, #64]	@ 0x40
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_TIM_Base_MspInit+0xe4>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2105      	movs	r1, #5
 800208e:	2032      	movs	r0, #50	@ 0x32
 8002090:	f000 ff83 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002094:	2032      	movs	r0, #50	@ 0x32
 8002096:	f000 ff9c 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3730      	adds	r7, #48	@ 0x30
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000c00 	.word	0x40000c00

080020b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0b      	ldr	r2, [pc, #44]	@ (80020f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10d      	bne.n	80020e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <HAL_TIM_PWM_MspInit+0x40>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	4a09      	ldr	r2, [pc, #36]	@ (80020f4 <HAL_TIM_PWM_MspInit+0x40>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_TIM_PWM_MspInit+0x40>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40000800 	.word	0x40000800
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	@ 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a24      	ldr	r2, [pc, #144]	@ (80021a8 <HAL_TIM_MspPostInit+0xb0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d11e      	bne.n	8002158 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <HAL_TIM_MspPostInit+0xb4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	4a22      	ldr	r2, [pc, #136]	@ (80021ac <HAL_TIM_MspPostInit+0xb4>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6313      	str	r3, [r2, #48]	@ 0x30
 800212a:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <HAL_TIM_MspPostInit+0xb4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002146:	2302      	movs	r3, #2
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4817      	ldr	r0, [pc, #92]	@ (80021b0 <HAL_TIM_MspPostInit+0xb8>)
 8002152:	f001 fad5 	bl	8003700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002156:	e022      	b.n	800219e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a15      	ldr	r2, [pc, #84]	@ (80021b4 <HAL_TIM_MspPostInit+0xbc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11d      	bne.n	800219e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <HAL_TIM_MspPostInit+0xb4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a10      	ldr	r2, [pc, #64]	@ (80021ac <HAL_TIM_MspPostInit+0xb4>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_TIM_MspPostInit+0xb4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 800217e:	2340      	movs	r3, #64	@ 0x40
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800218e:	2302      	movs	r3, #2
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	4807      	ldr	r0, [pc, #28]	@ (80021b8 <HAL_TIM_MspPostInit+0xc0>)
 800219a:	f001 fab1 	bl	8003700 <HAL_GPIO_Init>
}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	@ 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40020400 	.word	0x40020400

080021bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	@ 0x30
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a66      	ldr	r2, [pc, #408]	@ (8002374 <HAL_UART_MspInit+0x1b8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d12c      	bne.n	8002238 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	4b65      	ldr	r3, [pc, #404]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	4a64      	ldr	r2, [pc, #400]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ee:	4b62      	ldr	r3, [pc, #392]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a5d      	ldr	r2, [pc, #372]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b5b      	ldr	r3, [pc, #364]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002216:	230c      	movs	r3, #12
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002226:	2307      	movs	r3, #7
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4852      	ldr	r0, [pc, #328]	@ (800237c <HAL_UART_MspInit+0x1c0>)
 8002232:	f001 fa65 	bl	8003700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002236:	e098      	b.n	800236a <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a50      	ldr	r2, [pc, #320]	@ (8002380 <HAL_UART_MspInit+0x1c4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	f040 8093 	bne.w	800236a <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	4a4a      	ldr	r2, [pc, #296]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 800224e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002252:	6413      	str	r3, [r2, #64]	@ 0x40
 8002254:	4b48      	ldr	r3, [pc, #288]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	4b44      	ldr	r3, [pc, #272]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	4a43      	ldr	r2, [pc, #268]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002270:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_UART_MspInit+0x1bc>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800227c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800228e:	2307      	movs	r3, #7
 8002290:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	4619      	mov	r1, r3
 8002298:	483a      	ldr	r0, [pc, #232]	@ (8002384 <HAL_UART_MspInit+0x1c8>)
 800229a:	f001 fa31 	bl	8003700 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800229e:	4b3a      	ldr	r3, [pc, #232]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022a0:	4a3a      	ldr	r2, [pc, #232]	@ (800238c <HAL_UART_MspInit+0x1d0>)
 80022a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80022a4:	4b38      	ldr	r3, [pc, #224]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ac:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b2:	4b35      	ldr	r3, [pc, #212]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022b8:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022be:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022c0:	4b31      	ldr	r3, [pc, #196]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022c6:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80022cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80022d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80022d8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022da:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022dc:	2200      	movs	r2, #0
 80022de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80022e0:	4829      	ldr	r0, [pc, #164]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022e2:	f000 fe91 	bl	8003008 <HAL_DMA_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80022ec:	f7ff fd9a 	bl	8001e24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a25      	ldr	r2, [pc, #148]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022f6:	4a24      	ldr	r2, [pc, #144]	@ (8002388 <HAL_UART_MspInit+0x1cc>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80022fc:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 80022fe:	4a25      	ldr	r2, [pc, #148]	@ (8002394 <HAL_UART_MspInit+0x1d8>)
 8002300:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002302:	4b23      	ldr	r3, [pc, #140]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 8002304:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002308:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800230a:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 800230c:	2240      	movs	r2, #64	@ 0x40
 800230e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002310:	4b1f      	ldr	r3, [pc, #124]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002316:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 8002318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800231c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800231e:	4b1c      	ldr	r3, [pc, #112]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002324:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800232a:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 800232c:	2200      	movs	r2, #0
 800232e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002330:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 8002332:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002336:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002338:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800233e:	4814      	ldr	r0, [pc, #80]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 8002340:	f000 fe62 	bl	8003008 <HAL_DMA_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_UART_MspInit+0x192>
      Error_Handler();
 800234a:	f7ff fd6b 	bl	8001e24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a0f      	ldr	r2, [pc, #60]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 8002352:	639a      	str	r2, [r3, #56]	@ 0x38
 8002354:	4a0e      	ldr	r2, [pc, #56]	@ (8002390 <HAL_UART_MspInit+0x1d4>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2105      	movs	r1, #5
 800235e:	2027      	movs	r0, #39	@ 0x27
 8002360:	f000 fe1b 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002364:	2027      	movs	r0, #39	@ 0x27
 8002366:	f000 fe34 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3730      	adds	r7, #48	@ 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40004400 	.word	0x40004400
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000
 8002380:	40004800 	.word	0x40004800
 8002384:	40020800 	.word	0x40020800
 8002388:	20000548 	.word	0x20000548
 800238c:	40026028 	.word	0x40026028
 8002390:	200005a8 	.word	0x200005a8
 8002394:	40026058 	.word	0x40026058

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <NMI_Handler+0x4>

080023a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <MemManage_Handler+0x4>

080023b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <BusFault_Handler+0x4>

080023b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <UsageFault_Handler+0x4>

080023c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d2:	f000 fcc3 	bl	8002d5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80023d6:	f007 f8a9 	bl	800952c <xTaskGetSchedulerState>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d001      	beq.n	80023e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80023e0:	f007 ff82 	bl	800a2e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80023ec:	4802      	ldr	r0, [pc, #8]	@ (80023f8 <DMA1_Stream1_IRQHandler+0x10>)
 80023ee:	f000 ff4b 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000548 	.word	0x20000548

080023fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002400:	4802      	ldr	r0, [pc, #8]	@ (800240c <DMA1_Stream3_IRQHandler+0x10>)
 8002402:	f000 ff41 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200005a8 	.word	0x200005a8

08002410 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002414:	4802      	ldr	r0, [pc, #8]	@ (8002420 <USART3_IRQHandler+0x10>)
 8002416:	f004 fa47 	bl	80068a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000500 	.word	0x20000500

08002424 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002428:	4802      	ldr	r0, [pc, #8]	@ (8002434 <TIM5_IRQHandler+0x10>)
 800242a:	f003 fa73 	bl	8005914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000470 	.word	0x20000470

08002438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return 1;
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_kill>:

int _kill(int pid, int sig)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002452:	f009 f929 	bl	800b6a8 <__errno>
 8002456:	4603      	mov	r3, r0
 8002458:	2216      	movs	r2, #22
 800245a:	601a      	str	r2, [r3, #0]
  return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_exit>:

void _exit (int status)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffe7 	bl	8002448 <_kill>
  while (1) {}    /* Make sure we hang here */
 800247a:	bf00      	nop
 800247c:	e7fd      	b.n	800247a <_exit+0x12>

0800247e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e00a      	b.n	80024a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002490:	f3af 8000 	nop.w
 8002494:	4601      	mov	r1, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	60ba      	str	r2, [r7, #8]
 800249c:	b2ca      	uxtb	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dbf0      	blt.n	8002490 <_read+0x12>
  }

  return len;
 80024ae:	687b      	ldr	r3, [r7, #4]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e009      	b.n	80024de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	60ba      	str	r2, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f962 	bl	800179c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	dbf1      	blt.n	80024ca <_write+0x12>
  }
  return len;
 80024e6:	687b      	ldr	r3, [r7, #4]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_close>:

int _close(int file)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002518:	605a      	str	r2, [r3, #4]
  return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_isatty>:

int _isatty(int file)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002530:	2301      	movs	r3, #1
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f009 f88e 	bl	800b6a8 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20020000 	.word	0x20020000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	20000610 	.word	0x20000610
 80025c0:	200050c0 	.word	0x200050c0

080025c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <SystemInit+0x20>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <SystemInit+0x20>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <Task_Trilateration>:
 * @param currentX Posição X atual.
 * @param currentY Posição Y atual.
 * @return Índice do próximo beacon alvo.
 */
void Task_Trilateration(void *argument)
{
 80025e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025ec:	b094      	sub	sp, #80	@ 0x50
 80025ee:	af04      	add	r7, sp, #16
 80025f0:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("Task_Trilateration iniciada.\n");
 80025f2:	489b      	ldr	r0, [pc, #620]	@ (8002860 <Task_Trilateration+0x278>)
 80025f4:	f008 ff02 	bl	800b3fc <puts>
    SensorData_t sensorData;
    ActuationData_t actuationData;

    while (1)
    {
        if (osMessageQueueGet(sensorDataQueueHandle, &sensorData, NULL, osWaitForever) == osOK)
 80025f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002864 <Task_Trilateration+0x27c>)
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	f107 0118 	add.w	r1, r7, #24
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	2200      	movs	r2, #0
 8002606:	f005 fa69 	bl	8007adc <osMessageQueueGet>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f040 8106 	bne.w	800281e <Task_Trilateration+0x236>
        {
            // Trilateração com as distâncias dos beacons
            float A = -2 * BEACON_X1 + 2 * BEACON_X2;
 8002612:	4b95      	ldr	r3, [pc, #596]	@ (8002868 <Task_Trilateration+0x280>)
 8002614:	63fb      	str	r3, [r7, #60]	@ 0x3c
            float B = -2 * BEACON_Y1 + 2 * BEACON_Y2;
 8002616:	4b95      	ldr	r3, [pc, #596]	@ (800286c <Task_Trilateration+0x284>)
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
            float C = pow(sensorData.distances[0], 2) - pow(sensorData.distances[1], 2) - pow(BEACON_X1, 2) + pow(BEACON_X2, 2) - pow(BEACON_Y1, 2) + pow(BEACON_Y2, 2);
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ffb3 	bl	8000588 <__aeabi_f2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	ed9f 1b80 	vldr	d1, [pc, #512]	@ 8002828 <Task_Trilateration+0x240>
 800262a:	ec43 2b10 	vmov	d0, r2, r3
 800262e:	f00a fe77 	bl	800d320 <pow>
 8002632:	ec55 4b10 	vmov	r4, r5, d0
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd ffa5 	bl	8000588 <__aeabi_f2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 8002828 <Task_Trilateration+0x240>
 8002646:	ec43 2b10 	vmov	d0, r2, r3
 800264a:	f00a fe69 	bl	800d320 <pow>
 800264e:	ec53 2b10 	vmov	r2, r3, d0
 8002652:	4620      	mov	r0, r4
 8002654:	4629      	mov	r1, r5
 8002656:	f7fd fe37 	bl	80002c8 <__aeabi_dsub>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	a373      	add	r3, pc, #460	@ (adr r3, 8002830 <Task_Trilateration+0x248>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fd fe2e 	bl	80002c8 <__aeabi_dsub>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	a370      	add	r3, pc, #448	@ (adr r3, 8002838 <Task_Trilateration+0x250>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fd fe27 	bl	80002cc <__adddf3>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	a36e      	add	r3, pc, #440	@ (adr r3, 8002840 <Task_Trilateration+0x258>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fd fe1c 	bl	80002c8 <__aeabi_dsub>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	a36b      	add	r3, pc, #428	@ (adr r3, 8002848 <Task_Trilateration+0x260>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd fe15 	bl	80002cc <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fa9d 	bl	8000be8 <__aeabi_d2f>
 80026ae:	4603      	mov	r3, r0
 80026b0:	637b      	str	r3, [r7, #52]	@ 0x34
            float D = -2 * BEACON_X2 + 2 * BEACON_X3;
 80026b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002870 <Task_Trilateration+0x288>)
 80026b4:	633b      	str	r3, [r7, #48]	@ 0x30
            float E = -2 * BEACON_Y2 + 2 * BEACON_Y3;
 80026b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002874 <Task_Trilateration+0x28c>)
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            float F = pow(sensorData.distances[1], 2) - pow(sensorData.distances[2], 2) - pow(BEACON_X2, 2) + pow(BEACON_X3, 2) - pow(BEACON_Y2, 2) + pow(BEACON_Y3, 2);
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff63 	bl	8000588 <__aeabi_f2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8002828 <Task_Trilateration+0x240>
 80026ca:	ec43 2b10 	vmov	d0, r2, r3
 80026ce:	f00a fe27 	bl	800d320 <pow>
 80026d2:	ec55 4b10 	vmov	r4, r5, d0
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff55 	bl	8000588 <__aeabi_f2d>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8002828 <Task_Trilateration+0x240>
 80026e6:	ec43 2b10 	vmov	d0, r2, r3
 80026ea:	f00a fe19 	bl	800d320 <pow>
 80026ee:	ec53 2b10 	vmov	r2, r3, d0
 80026f2:	4620      	mov	r0, r4
 80026f4:	4629      	mov	r1, r5
 80026f6:	f7fd fde7 	bl	80002c8 <__aeabi_dsub>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	a34d      	add	r3, pc, #308	@ (adr r3, 8002838 <Task_Trilateration+0x250>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fd fdde 	bl	80002c8 <__aeabi_dsub>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	a34e      	add	r3, pc, #312	@ (adr r3, 8002850 <Task_Trilateration+0x268>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fd fdd7 	bl	80002cc <__adddf3>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	a348      	add	r3, pc, #288	@ (adr r3, 8002848 <Task_Trilateration+0x260>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd fdcc 	bl	80002c8 <__aeabi_dsub>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	a347      	add	r3, pc, #284	@ (adr r3, 8002858 <Task_Trilateration+0x270>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7fd fdc5 	bl	80002cc <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fa4d 	bl	8000be8 <__aeabi_d2f>
 800274e:	4603      	mov	r3, r0
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28

            actuationData.position[0] = (C * E - F * B) / (E * A - B * D);
 8002752:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002756:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800275a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800275e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8002762:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800276e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002772:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277a:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 800277e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002782:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800278a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278e:	edc7 7a03 	vstr	s15, [r7, #12]
            actuationData.position[1] = (C * D - A * F) / (B * D - A * E);
 8002792:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002796:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800279a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800279e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80027a2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027ae:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80027b2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80027b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ba:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 80027be:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80027c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ce:	edc7 7a04 	vstr	s15, [r7, #16]
            actuationData.heading = sensorData.orientation;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	617b      	str	r3, [r7, #20]

            DEBUG_PRINT("Position calculada: X=%.2f, Y=%.2f, Heading=%.2f°\n",
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fed5 	bl	8000588 <__aeabi_f2d>
 80027de:	4680      	mov	r8, r0
 80027e0:	4689      	mov	r9, r1
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd fecf 	bl	8000588 <__aeabi_f2d>
 80027ea:	4604      	mov	r4, r0
 80027ec:	460d      	mov	r5, r1
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fec9 	bl	8000588 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027fe:	e9cd 4500 	strd	r4, r5, [sp]
 8002802:	4642      	mov	r2, r8
 8002804:	464b      	mov	r3, r9
 8002806:	481c      	ldr	r0, [pc, #112]	@ (8002878 <Task_Trilateration+0x290>)
 8002808:	f008 fd90 	bl	800b32c <iprintf>
                        actuationData.position[0],
                        actuationData.position[1],
                        actuationData.heading);

            osMessageQueuePut(actuationDataQueueHandle, &actuationData, 0, osWaitForever);
 800280c:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <Task_Trilateration+0x294>)
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	f107 010c 	add.w	r1, r7, #12
 8002814:	f04f 33ff 	mov.w	r3, #4294967295
 8002818:	2200      	movs	r2, #0
 800281a:	f005 f8ff 	bl	8007a1c <osMessageQueuePut>
        }

        osDelay(100); // Intervalo de execução
 800281e:	2064      	movs	r0, #100	@ 0x64
 8002820:	f005 f86e 	bl	8007900 <osDelay>
        if (osMessageQueueGet(sensorDataQueueHandle, &sensorData, NULL, osWaitForever) == osOK)
 8002824:	e6e8      	b.n	80025f8 <Task_Trilateration+0x10>
 8002826:	bf00      	nop
 8002828:	00000000 	.word	0x00000000
 800282c:	40000000 	.word	0x40000000
 8002830:	09fb7940 	.word	0x09fb7940
 8002834:	42cbb011 	.word	0x42cbb011
 8002838:	2dcf6fac 	.word	0x2dcf6fac
 800283c:	42cbb009 	.word	0x42cbb009
 8002840:	fece0bac 	.word	0xfece0bac
 8002844:	42558b62 	.word	0x42558b62
 8002848:	52b16f1b 	.word	0x52b16f1b
 800284c:	42558b9d 	.word	0x42558b9d
 8002850:	ffead42d 	.word	0xffead42d
 8002854:	42cbb018 	.word	0x42cbb018
 8002858:	c1c929fb 	.word	0xc1c929fb
 800285c:	42558bd3 	.word	0x42558bd3
 8002860:	0800e654 	.word	0x0800e654
 8002864:	20000608 	.word	0x20000608
 8002868:	c2073333 	.word	0xc2073333
 800286c:	41c90ef5 	.word	0x41c90ef5
 8002870:	428810bc 	.word	0x428810bc
 8002874:	41bba1fe 	.word	0x41bba1fe
 8002878:	0800e674 	.word	0x0800e674
 800287c:	2000060c 	.word	0x2000060c

08002880 <Task_Actuation>:

/**
 * @brief Tarefa responsável por controlar os atuadores do sistema.
 */
void Task_Actuation(void *argument)
{
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	b09c      	sub	sp, #112	@ 0x70
 8002884:	af02      	add	r7, sp, #8
 8002886:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("Task_Actuation iniciada.\n");
 8002888:	4881      	ldr	r0, [pc, #516]	@ (8002a90 <Task_Actuation+0x210>)
 800288a:	f008 fdb7 	bl	800b3fc <puts>
    ActuationData_t actuationData;
    int currentTargetIndex = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	667b      	str	r3, [r7, #100]	@ 0x64

    float beaconPositions[3][2] = {
 8002892:	4b80      	ldr	r3, [pc, #512]	@ (8002a94 <Task_Actuation+0x214>)
 8002894:	f107 040c 	add.w	r4, r7, #12
 8002898:	461d      	mov	r5, r3
 800289a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028a2:	e884 0003 	stmia.w	r4, {r0, r1}
        {BEACON_X1, BEACON_Y1},
        {BEACON_X2, BEACON_Y2},
        {BEACON_X3, BEACON_Y3}};

    // Extrai os handles dos timers e do motor a partir do argumento
    TaskActuationArgs_t *args = (TaskActuationArgs_t *)argument;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    TIM_HandleTypeDef *motorTimer = args->motorTimer;
 80028aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    TIM_HandleTypeDef *servoTimer = args->servoTimer;
 80028b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	657b      	str	r3, [r7, #84]	@ 0x54
    L293D_HandleTypeDef *motorHandle = &args->motorHandle;
 80028b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b8:	3308      	adds	r3, #8
 80028ba:	653b      	str	r3, [r7, #80]	@ 0x50

    // Inicializa o motor de propulsão
    L293DDriver_Init(motorHandle, 20000); // Período de 20ms para o motor
 80028bc:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80028c0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80028c2:	f7fe ff07 	bl	80016d4 <L293DDriver_Init>

    while (1)
    {
        if (osMessageQueueGet(actuationDataQueueHandle, &actuationData, NULL, osWaitForever) == osOK)
 80028c6:	4b74      	ldr	r3, [pc, #464]	@ (8002a98 <Task_Actuation+0x218>)
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	2200      	movs	r2, #0
 80028d4:	f005 f902 	bl	8007adc <osMessageQueueGet>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80cd 	bne.w	8002a7a <Task_Actuation+0x1fa>
        {
            float targetX = beaconPositions[currentTargetIndex][0];
 80028e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	3368      	adds	r3, #104	@ 0x68
 80028e6:	443b      	add	r3, r7
 80028e8:	3b5c      	subs	r3, #92	@ 0x5c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
            float targetY = beaconPositions[currentTargetIndex][1];
 80028ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	3368      	adds	r3, #104	@ 0x68
 80028f4:	443b      	add	r3, r7
 80028f6:	3b58      	subs	r3, #88	@ 0x58
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	64bb      	str	r3, [r7, #72]	@ 0x48

            float errorX = targetX - actuationData.position[0];
 80028fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002900:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002908:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            float errorY = targetY - actuationData.position[1];
 800290c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002910:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002918:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            float distanceToTarget = sqrtf(errorX * errorX + errorY * errorY);
 800291c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002920:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002924:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002928:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800292c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002930:	eeb0 0a67 	vmov.f32	s0, s15
 8002934:	f00a fd66 	bl	800d404 <sqrtf>
 8002938:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

            // Troca de alvo se dentro da margem de erro
            if (distanceToTarget <= ERROR_MARGIN_DISTANCE)
 800293c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002940:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	d812      	bhi.n	8002974 <Task_Actuation+0xf4>
            {
                currentTargetIndex = (currentTargetIndex + 1) % 3;
 800294e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	4b52      	ldr	r3, [pc, #328]	@ (8002a9c <Task_Actuation+0x21c>)
 8002954:	fb83 3102 	smull	r3, r1, r3, r2
 8002958:	17d3      	asrs	r3, r2, #31
 800295a:	1ac9      	subs	r1, r1, r3
 800295c:	460b      	mov	r3, r1
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	440b      	add	r3, r1
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	667b      	str	r3, [r7, #100]	@ 0x64
                DEBUG_PRINT("Alvo alcançado. Próximo alvo: Beacon %d.\n", currentTargetIndex + 1);
 8002966:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002968:	3301      	adds	r3, #1
 800296a:	4619      	mov	r1, r3
 800296c:	484c      	ldr	r0, [pc, #304]	@ (8002aa0 <Task_Actuation+0x220>)
 800296e:	f008 fcdd 	bl	800b32c <iprintf>
                continue;
 8002972:	e085      	b.n	8002a80 <Task_Actuation+0x200>
            }

            float targetHeading = atan2f(errorY, errorX) * 180.0f / M_PI;
 8002974:	edd7 0a11 	vldr	s1, [r7, #68]	@ 0x44
 8002978:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 800297c:	f00a fd40 	bl	800d400 <atan2f>
 8002980:	eef0 7a40 	vmov.f32	s15, s0
 8002984:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002aa4 <Task_Actuation+0x224>
 8002988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298c:	ee17 0a90 	vmov	r0, s15
 8002990:	f7fd fdfa 	bl	8000588 <__aeabi_f2d>
 8002994:	a33c      	add	r3, pc, #240	@ (adr r3, 8002a88 <Task_Actuation+0x208>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fd ff77 	bl	800088c <__aeabi_ddiv>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	f7fe f91f 	bl	8000be8 <__aeabi_d2f>
 80029aa:	4603      	mov	r3, r0
 80029ac:	63bb      	str	r3, [r7, #56]	@ 0x38
            float headingError = targetHeading - actuationData.heading;
 80029ae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80029b2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80029b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ba:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

            // Normaliza o erro para o intervalo [-180, 180]
            while (headingError > 180.0f)
 80029be:	e007      	b.n	80029d0 <Task_Actuation+0x150>
                headingError -= 360.0f;
 80029c0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80029c4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8002aa8 <Task_Actuation+0x228>
 80029c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029cc:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
            while (headingError > 180.0f)
 80029d0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80029d4:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002aa4 <Task_Actuation+0x224>
 80029d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	dcee      	bgt.n	80029c0 <Task_Actuation+0x140>
            while (headingError < -180.0f)
 80029e2:	e007      	b.n	80029f4 <Task_Actuation+0x174>
                headingError += 360.0f;
 80029e4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80029e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002aa8 <Task_Actuation+0x228>
 80029ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029f0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
            while (headingError < -180.0f)
 80029f4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80029f8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002aac <Task_Actuation+0x22c>
 80029fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a04:	d4ee      	bmi.n	80029e4 <Task_Actuation+0x164>

            // Converte erro angular para graus para o servo SG90
            int16_t servoPosition = (int16_t)(-headingError); // Inverte o sinal para alinhar o controle
 8002a06:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002a0a:	eef1 7a67 	vneg.f32	s15, s15
 8002a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a12:	ee17 3a90 	vmov	r3, s15
 8002a16:	86fb      	strh	r3, [r7, #54]	@ 0x36

            // Aplica posição ao servo (usando o timer do servo)
            SG90Driver_SetPosition(servoTimer, TIM_CHANNEL_1, servoPosition);
 8002a18:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2100      	movs	r1, #0
 8002a20:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002a22:	f7fe fe7d 	bl	8001720 <SG90Driver_SetPosition>

            // Ajusta velocidade proporcional à distância
            float speed = (distanceToTarget > 5.0f) ? 1.0f : distanceToTarget / 5.0f; // Velocidade máxima para distância > 5m
 8002a26:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002a2a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	dd02      	ble.n	8002a3e <Task_Actuation+0x1be>
 8002a38:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002a3c:	e005      	b.n	8002a4a <Task_Actuation+0x1ca>
 8002a3e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002a42:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a4a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            L293DDriver_SetSpeed(motorHandle, speed);
 8002a4e:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8002a52:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002a54:	f7fe fe4f 	bl	80016f6 <L293DDriver_SetSpeed>

            // Log para depuração
            DEBUG_PRINT("Erro de orientação: %.2f graus. Velocidade: %.2f.\n", headingError, speed);
 8002a58:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002a5a:	f7fd fd95 	bl	8000588 <__aeabi_f2d>
 8002a5e:	4604      	mov	r4, r0
 8002a60:	460d      	mov	r5, r1
 8002a62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a64:	f7fd fd90 	bl	8000588 <__aeabi_f2d>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	e9cd 2300 	strd	r2, r3, [sp]
 8002a70:	4622      	mov	r2, r4
 8002a72:	462b      	mov	r3, r5
 8002a74:	480e      	ldr	r0, [pc, #56]	@ (8002ab0 <Task_Actuation+0x230>)
 8002a76:	f008 fc59 	bl	800b32c <iprintf>
        }

        osDelay(50); // Intervalo de execução
 8002a7a:	2032      	movs	r0, #50	@ 0x32
 8002a7c:	f004 ff40 	bl	8007900 <osDelay>
        if (osMessageQueueGet(actuationDataQueueHandle, &actuationData, NULL, osWaitForever) == osOK)
 8002a80:	e721      	b.n	80028c6 <Task_Actuation+0x46>
 8002a82:	bf00      	nop
 8002a84:	f3af 8000 	nop.w
 8002a88:	54442d18 	.word	0x54442d18
 8002a8c:	400921fb 	.word	0x400921fb
 8002a90:	0800e6a8 	.word	0x0800e6a8
 8002a94:	0800e728 	.word	0x0800e728
 8002a98:	2000060c 	.word	0x2000060c
 8002a9c:	55555556 	.word	0x55555556
 8002aa0:	0800e6c4 	.word	0x0800e6c4
 8002aa4:	43340000 	.word	0x43340000
 8002aa8:	43b40000 	.word	0x43b40000
 8002aac:	c3340000 	.word	0xc3340000
 8002ab0:	0800e6f0 	.word	0x0800e6f0

08002ab4 <CreateTasks>:
    }
}

void CreateTasks(TaskActuationArgs_t *actuationArgs)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b09e      	sub	sp, #120	@ 0x78
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    const osThreadAttr_t taskReadSensorsAttr = {
 8002abc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ac0:	2224      	movs	r2, #36	@ 0x24
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f008 fd79 	bl	800b5bc <memset>
 8002aca:	4b24      	ldr	r3, [pc, #144]	@ (8002b5c <CreateTasks+0xa8>)
 8002acc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ace:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ad4:	2318      	movs	r3, #24
 8002ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        .name = "Task_ReadSensors",
        .stack_size = 512 * 4,
        .priority = osPriorityNormal};
    taskReadSensorsHandle = osThreadNew(Task_ReadSensors, NULL, &taskReadSensorsAttr);
 8002ad8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002adc:	461a      	mov	r2, r3
 8002ade:	2100      	movs	r1, #0
 8002ae0:	481f      	ldr	r0, [pc, #124]	@ (8002b60 <CreateTasks+0xac>)
 8002ae2:	f004 fe7b 	bl	80077dc <osThreadNew>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b64 <CreateTasks+0xb0>)
 8002aea:	6013      	str	r3, [r2, #0]

    const osThreadAttr_t taskTrilaterationAttr = {
 8002aec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002af0:	2224      	movs	r2, #36	@ 0x24
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f008 fd61 	bl	800b5bc <memset>
 8002afa:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <CreateTasks+0xb4>)
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002afe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b04:	2310      	movs	r3, #16
 8002b06:	64bb      	str	r3, [r7, #72]	@ 0x48
        .name = "Task_Trilateration",
        .stack_size = 512 * 4,
        .priority = osPriorityBelowNormal};
    taskTrilaterationHandle = osThreadNew(Task_Trilateration, NULL, &taskTrilaterationAttr);
 8002b08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4816      	ldr	r0, [pc, #88]	@ (8002b6c <CreateTasks+0xb8>)
 8002b12:	f004 fe63 	bl	80077dc <osThreadNew>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a15      	ldr	r2, [pc, #84]	@ (8002b70 <CreateTasks+0xbc>)
 8002b1a:	6013      	str	r3, [r2, #0]

    const osThreadAttr_t taskActuationAttr = {
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	2224      	movs	r2, #36	@ 0x24
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f008 fd49 	bl	800b5bc <memset>
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <CreateTasks+0xc0>)
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	2320      	movs	r3, #32
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
        .name = "Task_Actuation",
        .stack_size = 1024 * 4, // Aumentado para evitar stack overflow
        .priority = osPriorityAboveNormal};
    taskActuationHandle = osThreadNew(Task_Actuation, actuationArgs, &taskActuationAttr);
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	480d      	ldr	r0, [pc, #52]	@ (8002b78 <CreateTasks+0xc4>)
 8002b42:	f004 fe4b 	bl	80077dc <osThreadNew>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4a0c      	ldr	r2, [pc, #48]	@ (8002b7c <CreateTasks+0xc8>)
 8002b4a:	6013      	str	r3, [r2, #0]

    DEBUG_PRINT("Tarefas criadas com sucesso.\n");
 8002b4c:	480c      	ldr	r0, [pc, #48]	@ (8002b80 <CreateTasks+0xcc>)
 8002b4e:	f008 fc55 	bl	800b3fc <puts>
}
 8002b52:	bf00      	nop
 8002b54:	3778      	adds	r7, #120	@ 0x78
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	0800e740 	.word	0x0800e740
 8002b60:	08002b85 	.word	0x08002b85
 8002b64:	20000614 	.word	0x20000614
 8002b68:	0800e754 	.word	0x0800e754
 8002b6c:	080025e9 	.word	0x080025e9
 8002b70:	20000618 	.word	0x20000618
 8002b74:	0800e768 	.word	0x0800e768
 8002b78:	08002881 	.word	0x08002881
 8002b7c:	2000061c 	.word	0x2000061c
 8002b80:	0800e778 	.word	0x0800e778

08002b84 <Task_ReadSensors>:

void Task_ReadSensors(void *argument)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b08e      	sub	sp, #56	@ 0x38
 8002b8a:	af06      	add	r7, sp, #24
 8002b8c:	6078      	str	r0, [r7, #4]
    SensorData_t sensorData;

    printf("Task_ReadSensors inicializada.\n");
 8002b8e:	482e      	ldr	r0, [pc, #184]	@ (8002c48 <Task_ReadSensors+0xc4>)
 8002b90:	f008 fc34 	bl	800b3fc <puts>

    while (1)
    {
        printf("Task_ReadSensors inicializada 2.\n");
 8002b94:	482d      	ldr	r0, [pc, #180]	@ (8002c4c <Task_ReadSensors+0xc8>)
 8002b96:	f008 fc31 	bl	800b3fc <puts>

        // Leitura das distâncias dos beacons
        JDY18_ScanDevices(); // Atualiza JDY18_RSSI diretamente para distâncias em metros
 8002b9a:	f7fe fc93 	bl	80014c4 <JDY18_ScanDevices>

        // Copia as distâncias dos beacons para o struct SensorData_t
        for (int i = 0; i < 3; i++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	e00d      	b.n	8002bc0 <Task_ReadSensors+0x3c>
        {
            sensorData.distances[i] = JDY18_RSSI[i];
 8002ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c50 <Task_ReadSensors+0xcc>)
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	3320      	adds	r3, #32
 8002bb4:	443b      	add	r3, r7
 8002bb6:	3b14      	subs	r3, #20
 8002bb8:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < 3; i++)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	ddee      	ble.n	8002ba4 <Task_ReadSensors+0x20>
        }

        // Leitura do ângulo do magnetômetro
        sensorData.orientation = HMC5883LDriver_GetHeading();
 8002bc6:	f7fe fb83 	bl	80012d0 <HMC5883LDriver_GetHeading>
 8002bca:	eef0 7a40 	vmov.f32	s15, s0
 8002bce:	edc7 7a06 	vstr	s15, [r7, #24]

        // Log para depuração
        printf("Leitura dos sensores: Dist1=%.2f, Dist2=%.2f, Dist3=%.2f, Orient=%.2f\n",
               sensorData.distances[0], sensorData.distances[1],
 8002bd2:	68fb      	ldr	r3, [r7, #12]
        printf("Leitura dos sensores: Dist1=%.2f, Dist2=%.2f, Dist3=%.2f, Orient=%.2f\n",
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fcd7 	bl	8000588 <__aeabi_f2d>
 8002bda:	4682      	mov	sl, r0
 8002bdc:	468b      	mov	fp, r1
               sensorData.distances[0], sensorData.distances[1],
 8002bde:	693b      	ldr	r3, [r7, #16]
        printf("Leitura dos sensores: Dist1=%.2f, Dist2=%.2f, Dist3=%.2f, Orient=%.2f\n",
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fcd1 	bl	8000588 <__aeabi_f2d>
 8002be6:	4604      	mov	r4, r0
 8002be8:	460d      	mov	r5, r1
               sensorData.distances[2], sensorData.orientation);
 8002bea:	697b      	ldr	r3, [r7, #20]
        printf("Leitura dos sensores: Dist1=%.2f, Dist2=%.2f, Dist3=%.2f, Orient=%.2f\n",
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fccb 	bl	8000588 <__aeabi_f2d>
 8002bf2:	4680      	mov	r8, r0
 8002bf4:	4689      	mov	r9, r1
               sensorData.distances[2], sensorData.orientation);
 8002bf6:	69bb      	ldr	r3, [r7, #24]
        printf("Leitura dos sensores: Dist1=%.2f, Dist2=%.2f, Dist3=%.2f, Orient=%.2f\n",
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fcc5 	bl	8000588 <__aeabi_f2d>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c06:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002c0a:	e9cd 4500 	strd	r4, r5, [sp]
 8002c0e:	4652      	mov	r2, sl
 8002c10:	465b      	mov	r3, fp
 8002c12:	4810      	ldr	r0, [pc, #64]	@ (8002c54 <Task_ReadSensors+0xd0>)
 8002c14:	f008 fb8a 	bl	800b32c <iprintf>

        // Envia os dados para a fila
        if (osMessageQueuePut(sensorDataQueueHandle, &sensorData, 0, osWaitForever) == osOK)
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <Task_ReadSensors+0xd4>)
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	f107 010c 	add.w	r1, r7, #12
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295
 8002c24:	2200      	movs	r2, #0
 8002c26:	f004 fef9 	bl	8007a1c <osMessageQueuePut>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <Task_ReadSensors+0xb4>
        {
            printf("Dados de sensores enviados para a fila.\n");
 8002c30:	480a      	ldr	r0, [pc, #40]	@ (8002c5c <Task_ReadSensors+0xd8>)
 8002c32:	f008 fbe3 	bl	800b3fc <puts>
 8002c36:	e002      	b.n	8002c3e <Task_ReadSensors+0xba>
        }
        else
        {
            printf("Erro ao enviar dados de sensores para a fila.\n");
 8002c38:	4809      	ldr	r0, [pc, #36]	@ (8002c60 <Task_ReadSensors+0xdc>)
 8002c3a:	f008 fbdf 	bl	800b3fc <puts>
        }

        osDelay(100); // Executa a cada 100ms
 8002c3e:	2064      	movs	r0, #100	@ 0x64
 8002c40:	f004 fe5e 	bl	8007900 <osDelay>
        printf("Task_ReadSensors inicializada 2.\n");
 8002c44:	e7a6      	b.n	8002b94 <Task_ReadSensors+0x10>
 8002c46:	bf00      	nop
 8002c48:	0800e798 	.word	0x0800e798
 8002c4c:	0800e7b8 	.word	0x0800e7b8
 8002c50:	20000334 	.word	0x20000334
 8002c54:	0800e7dc 	.word	0x0800e7dc
 8002c58:	20000608 	.word	0x20000608
 8002c5c:	0800e824 	.word	0x0800e824
 8002c60:	0800e84c 	.word	0x0800e84c

08002c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c68:	f7ff fcac 	bl	80025c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c6c:	480c      	ldr	r0, [pc, #48]	@ (8002ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c6e:	490d      	ldr	r1, [pc, #52]	@ (8002ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c74:	e002      	b.n	8002c7c <LoopCopyDataInit>

08002c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7a:	3304      	adds	r3, #4

08002c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c80:	d3f9      	bcc.n	8002c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c84:	4c0a      	ldr	r4, [pc, #40]	@ (8002cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c88:	e001      	b.n	8002c8e <LoopFillZerobss>

08002c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c8c:	3204      	adds	r2, #4

08002c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c90:	d3fb      	bcc.n	8002c8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c92:	f008 fd0f 	bl	800b6b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c96:	f7fe fd93 	bl	80017c0 <main>
  bx  lr    
 8002c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002ca8:	0800eca0 	.word	0x0800eca0
  ldr r2, =_sbss
 8002cac:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002cb0:	200050c0 	.word	0x200050c0

08002cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC_IRQHandler>
	...

08002cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf8 <HAL_Init+0x40>)
 8002cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf8 <HAL_Init+0x40>)
 8002cce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	@ (8002cf8 <HAL_Init+0x40>)
 8002cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f94f 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f000 f808 	bl	8002cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff f8f4 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023c00 	.word	0x40023c00

08002cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <HAL_InitTick+0x54>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_InitTick+0x58>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f967 	bl	8002fee <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f000 f92f 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	@ (8002d58 <HAL_InitTick+0x5c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000008 	.word	0x20000008
 8002d58:	20000004 	.word	0x20000004

08002d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <HAL_IncTick+0x20>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_IncTick+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <HAL_IncTick+0x24>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000008 	.word	0x20000008
 8002d80:	20000620 	.word	0x20000620

08002d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return uwTick;
 8002d88:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <HAL_GetTick+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000620 	.word	0x20000620

08002d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff ffee 	bl	8002d84 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d005      	beq.n	8002dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db6:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <HAL_Delay+0x44>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc2:	bf00      	nop
 8002dc4:	f7ff ffde 	bl	8002d84 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d8f7      	bhi.n	8002dc4 <HAL_Delay+0x28>
  {
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000008 	.word	0x20000008

08002de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e16:	4a04      	ldr	r2, [pc, #16]	@ (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	60d3      	str	r3, [r2, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e30:	4b04      	ldr	r3, [pc, #16]	@ (8002e44 <__NVIC_GetPriorityGrouping+0x18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	f003 0307 	and.w	r3, r3, #7
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db0b      	blt.n	8002e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4907      	ldr	r1, [pc, #28]	@ (8002e80 <__NVIC_EnableIRQ+0x38>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	@ (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	@ (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	@ 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	@ 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff8e 	bl	8002e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff29 	bl	8002de4 <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff3e 	bl	8002e2c <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff8e 	bl	8002ed8 <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5d 	bl	8002e84 <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff31 	bl	8002e48 <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffa2 	bl	8002f40 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7ff feb6 	bl	8002d84 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e099      	b.n	8003158 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003044:	e00f      	b.n	8003066 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003046:	f7ff fe9d 	bl	8002d84 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b05      	cmp	r3, #5
 8003052:	d908      	bls.n	8003066 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e078      	b.n	8003158 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e8      	bne.n	8003046 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4b38      	ldr	r3, [pc, #224]	@ (8003160 <HAL_DMA_Init+0x158>)
 8003080:	4013      	ands	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003092:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d107      	bne.n	80030d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	4313      	orrs	r3, r2
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0307 	bic.w	r3, r3, #7
 80030e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d117      	bne.n	800312a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00e      	beq.n	800312a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fa7b 	bl	8003608 <DMA_CheckFifoParam>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003126:	2301      	movs	r3, #1
 8003128:	e016      	b.n	8003158 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fa32 	bl	800359c <DMA_CalcBaseAndBitshift>
 8003138:	4603      	mov	r3, r0
 800313a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	223f      	movs	r2, #63	@ 0x3f
 8003142:	409a      	lsls	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	f010803f 	.word	0xf010803f

08003164 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003172:	f7ff fe07 	bl	8002d84 <HAL_GetTick>
 8003176:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d008      	beq.n	8003196 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2280      	movs	r2, #128	@ 0x80
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e052      	b.n	800323c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0216 	bic.w	r2, r2, #22
 80031a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <HAL_DMA_Abort+0x62>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0208 	bic.w	r2, r2, #8
 80031d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e6:	e013      	b.n	8003210 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e8:	f7ff fdcc 	bl	8002d84 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d90c      	bls.n	8003210 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2203      	movs	r2, #3
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e015      	b.n	800323c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e4      	bne.n	80031e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003222:	223f      	movs	r2, #63	@ 0x3f
 8003224:	409a      	lsls	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d004      	beq.n	8003262 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2280      	movs	r2, #128	@ 0x80
 800325c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00c      	b.n	800327c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2205      	movs	r2, #5
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003294:	4b8e      	ldr	r3, [pc, #568]	@ (80034d0 <HAL_DMA_IRQHandler+0x248>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a8e      	ldr	r2, [pc, #568]	@ (80034d4 <HAL_DMA_IRQHandler+0x24c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	0a9b      	lsrs	r3, r3, #10
 80032a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	2208      	movs	r2, #8
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01a      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	2208      	movs	r2, #8
 80032e2:	409a      	lsls	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	2201      	movs	r2, #1
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	f043 0202 	orr.w	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	2204      	movs	r2, #4
 800334e:	409a      	lsls	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	2210      	movs	r2, #16
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d043      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d03c      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	2210      	movs	r2, #16
 8003384:	409a      	lsls	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d018      	beq.n	80033ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d024      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	e01f      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
 80033c8:	e016      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0208 	bic.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	2220      	movs	r2, #32
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 808f 	beq.w	8003528 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8087 	beq.w	8003528 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	2220      	movs	r2, #32
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b05      	cmp	r3, #5
 8003430:	d136      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0216 	bic.w	r2, r2, #22
 8003440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_DMA_IRQHandler+0x1da>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0208 	bic.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003476:	223f      	movs	r2, #63	@ 0x3f
 8003478:	409a      	lsls	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003492:	2b00      	cmp	r3, #0
 8003494:	d07e      	beq.n	8003594 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
        }
        return;
 800349e:	e079      	b.n	8003594 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01d      	beq.n	80034ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d031      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e02c      	b.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000
 80034d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d023      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
 80034e8:	e01e      	b.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10f      	bne.n	8003518 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0210 	bic.w	r2, r2, #16
 8003506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	2b00      	cmp	r3, #0
 800352e:	d032      	beq.n	8003596 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2205      	movs	r2, #5
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3301      	adds	r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	d307      	bcc.n	8003570 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f2      	bne.n	8003554 <HAL_DMA_IRQHandler+0x2cc>
 800356e:	e000      	b.n	8003572 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003570:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	e000      	b.n	8003596 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003594:	bf00      	nop
    }
  }
}
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	3b10      	subs	r3, #16
 80035ac:	4a14      	ldr	r2, [pc, #80]	@ (8003600 <DMA_CalcBaseAndBitshift+0x64>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035b6:	4a13      	ldr	r2, [pc, #76]	@ (8003604 <DMA_CalcBaseAndBitshift+0x68>)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d909      	bls.n	80035de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	@ 0x58
 80035dc:	e007      	b.n	80035ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	aaaaaaab 	.word	0xaaaaaaab
 8003604:	0800e8b0 	.word	0x0800e8b0

08003608 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11f      	bne.n	8003662 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d856      	bhi.n	80036d6 <DMA_CheckFifoParam+0xce>
 8003628:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <DMA_CheckFifoParam+0x28>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003641 	.word	0x08003641
 8003634:	08003653 	.word	0x08003653
 8003638:	08003641 	.word	0x08003641
 800363c:	080036d7 	.word	0x080036d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d046      	beq.n	80036da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003650:	e043      	b.n	80036da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800365a:	d140      	bne.n	80036de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003660:	e03d      	b.n	80036de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800366a:	d121      	bne.n	80036b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d837      	bhi.n	80036e2 <DMA_CheckFifoParam+0xda>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <DMA_CheckFifoParam+0x70>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	08003689 	.word	0x08003689
 800367c:	0800368f 	.word	0x0800368f
 8003680:	08003689 	.word	0x08003689
 8003684:	080036a1 	.word	0x080036a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
      break;
 800368c:	e030      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d025      	beq.n	80036e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800369e:	e022      	b.n	80036e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036a8:	d11f      	bne.n	80036ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ae:	e01c      	b.n	80036ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d903      	bls.n	80036be <DMA_CheckFifoParam+0xb6>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d003      	beq.n	80036c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036bc:	e018      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
      break;
 80036c2:	e015      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00e      	beq.n	80036ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      break;
 80036d4:	e00b      	b.n	80036ee <DMA_CheckFifoParam+0xe6>
      break;
 80036d6:	bf00      	nop
 80036d8:	e00a      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036da:	bf00      	nop
 80036dc:	e008      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036de:	bf00      	nop
 80036e0:	e006      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036e2:	bf00      	nop
 80036e4:	e004      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
    }
  } 
  
  return status; 
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	@ 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e165      	b.n	80039e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800371c:	2201      	movs	r2, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	429a      	cmp	r2, r3
 8003736:	f040 8154 	bne.w	80039e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d005      	beq.n	8003752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374e:	2b02      	cmp	r3, #2
 8003750:	d130      	bne.n	80037b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 0201 	and.w	r2, r3, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d017      	beq.n	80037f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d123      	bne.n	8003844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	08da      	lsrs	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3208      	adds	r2, #8
 8003804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	69b9      	ldr	r1, [r7, #24]
 8003840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80ae 	beq.w	80039e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	4a5c      	ldr	r2, [pc, #368]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 8003890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003894:	6453      	str	r3, [r2, #68]	@ 0x44
 8003896:	4b5a      	ldr	r3, [pc, #360]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a2:	4a58      	ldr	r2, [pc, #352]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	3302      	adds	r3, #2
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	220f      	movs	r2, #15
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003a08 <HAL_GPIO_Init+0x308>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d025      	beq.n	800391a <HAL_GPIO_Init+0x21a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4e      	ldr	r2, [pc, #312]	@ (8003a0c <HAL_GPIO_Init+0x30c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01f      	beq.n	8003916 <HAL_GPIO_Init+0x216>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003a10 <HAL_GPIO_Init+0x310>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d019      	beq.n	8003912 <HAL_GPIO_Init+0x212>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003a14 <HAL_GPIO_Init+0x314>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_GPIO_Init+0x20e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a18 <HAL_GPIO_Init+0x318>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00d      	beq.n	800390a <HAL_GPIO_Init+0x20a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4a      	ldr	r2, [pc, #296]	@ (8003a1c <HAL_GPIO_Init+0x31c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <HAL_GPIO_Init+0x206>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a49      	ldr	r2, [pc, #292]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <HAL_GPIO_Init+0x202>
 80038fe:	2306      	movs	r3, #6
 8003900:	e00c      	b.n	800391c <HAL_GPIO_Init+0x21c>
 8003902:	2307      	movs	r3, #7
 8003904:	e00a      	b.n	800391c <HAL_GPIO_Init+0x21c>
 8003906:	2305      	movs	r3, #5
 8003908:	e008      	b.n	800391c <HAL_GPIO_Init+0x21c>
 800390a:	2304      	movs	r3, #4
 800390c:	e006      	b.n	800391c <HAL_GPIO_Init+0x21c>
 800390e:	2303      	movs	r3, #3
 8003910:	e004      	b.n	800391c <HAL_GPIO_Init+0x21c>
 8003912:	2302      	movs	r3, #2
 8003914:	e002      	b.n	800391c <HAL_GPIO_Init+0x21c>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_GPIO_Init+0x21c>
 800391a:	2300      	movs	r3, #0
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f002 0203 	and.w	r2, r2, #3
 8003922:	0092      	lsls	r2, r2, #2
 8003924:	4093      	lsls	r3, r2
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800392c:	4935      	ldr	r1, [pc, #212]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395e:	4a31      	ldr	r2, [pc, #196]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003964:	4b2f      	ldr	r3, [pc, #188]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003988:	4a26      	ldr	r2, [pc, #152]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800398e:	4b25      	ldr	r3, [pc, #148]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039dc:	4a11      	ldr	r2, [pc, #68]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3301      	adds	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b0f      	cmp	r3, #15
 80039ec:	f67f ae96 	bls.w	800371c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3724      	adds	r7, #36	@ 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40013800 	.word	0x40013800
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	40020400 	.word	0x40020400
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40020c00 	.word	0x40020c00
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40021400 	.word	0x40021400
 8003a20:	40021800 	.word	0x40021800
 8003a24:	40013c00 	.word	0x40013c00

08003a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
 8003a34:	4613      	mov	r3, r2
 8003a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a38:	787b      	ldrb	r3, [r7, #1]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a44:	e003      	b.n	8003a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	041a      	lsls	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	619a      	str	r2, [r3, #24]
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e12b      	b.n	8003cc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe fa54 	bl	8001f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	@ 0x24
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ac0:	f001 f8e2 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 8003ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4a81      	ldr	r2, [pc, #516]	@ (8003cd0 <HAL_I2C_Init+0x274>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d807      	bhi.n	8003ae0 <HAL_I2C_Init+0x84>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a80      	ldr	r2, [pc, #512]	@ (8003cd4 <HAL_I2C_Init+0x278>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	bf94      	ite	ls
 8003ad8:	2301      	movls	r3, #1
 8003ada:	2300      	movhi	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e006      	b.n	8003aee <HAL_I2C_Init+0x92>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8003cd8 <HAL_I2C_Init+0x27c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	bf94      	ite	ls
 8003ae8:	2301      	movls	r3, #1
 8003aea:	2300      	movhi	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0e7      	b.n	8003cc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a78      	ldr	r2, [pc, #480]	@ (8003cdc <HAL_I2C_Init+0x280>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0c9b      	lsrs	r3, r3, #18
 8003b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a6a      	ldr	r2, [pc, #424]	@ (8003cd0 <HAL_I2C_Init+0x274>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d802      	bhi.n	8003b30 <HAL_I2C_Init+0xd4>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	e009      	b.n	8003b44 <HAL_I2C_Init+0xe8>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	4a69      	ldr	r2, [pc, #420]	@ (8003ce0 <HAL_I2C_Init+0x284>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	099b      	lsrs	r3, r3, #6
 8003b42:	3301      	adds	r3, #1
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	495c      	ldr	r1, [pc, #368]	@ (8003cd0 <HAL_I2C_Init+0x274>)
 8003b60:	428b      	cmp	r3, r1
 8003b62:	d819      	bhi.n	8003b98 <HAL_I2C_Init+0x13c>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1e59      	subs	r1, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b72:	1c59      	adds	r1, r3, #1
 8003b74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b78:	400b      	ands	r3, r1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_I2C_Init+0x138>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1e59      	subs	r1, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b92:	e051      	b.n	8003c38 <HAL_I2C_Init+0x1dc>
 8003b94:	2304      	movs	r3, #4
 8003b96:	e04f      	b.n	8003c38 <HAL_I2C_Init+0x1dc>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d111      	bne.n	8003bc4 <HAL_I2C_Init+0x168>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1e58      	subs	r0, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	440b      	add	r3, r1
 8003bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e012      	b.n	8003bea <HAL_I2C_Init+0x18e>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e58      	subs	r0, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	0099      	lsls	r1, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Init+0x196>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e022      	b.n	8003c38 <HAL_I2C_Init+0x1dc>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10e      	bne.n	8003c18 <HAL_I2C_Init+0x1bc>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e58      	subs	r0, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6859      	ldr	r1, [r3, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	440b      	add	r3, r1
 8003c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c16:	e00f      	b.n	8003c38 <HAL_I2C_Init+0x1dc>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e58      	subs	r0, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	0099      	lsls	r1, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	6809      	ldr	r1, [r1, #0]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69da      	ldr	r2, [r3, #28]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6911      	ldr	r1, [r2, #16]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68d2      	ldr	r2, [r2, #12]
 8003c72:	4311      	orrs	r1, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	000186a0 	.word	0x000186a0
 8003cd4:	001e847f 	.word	0x001e847f
 8003cd8:	003d08ff 	.word	0x003d08ff
 8003cdc:	431bde83 	.word	0x431bde83
 8003ce0:	10624dd3 	.word	0x10624dd3

08003ce4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	817b      	strh	r3, [r7, #10]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	813b      	strh	r3, [r7, #8]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cfe:	f7ff f841 	bl	8002d84 <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	f040 80d9 	bne.w	8003ec4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2319      	movs	r3, #25
 8003d18:	2201      	movs	r2, #1
 8003d1a:	496d      	ldr	r1, [pc, #436]	@ (8003ed0 <HAL_I2C_Mem_Write+0x1ec>)
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fc8b 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0cc      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_I2C_Mem_Write+0x56>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0c5      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d007      	beq.n	8003d60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2221      	movs	r2, #33	@ 0x21
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2240      	movs	r2, #64	@ 0x40
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a3a      	ldr	r2, [r7, #32]
 8003d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ed4 <HAL_I2C_Mem_Write+0x1f0>)
 8003da0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003da2:	88f8      	ldrh	r0, [r7, #6]
 8003da4:	893a      	ldrh	r2, [r7, #8]
 8003da6:	8979      	ldrh	r1, [r7, #10]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4603      	mov	r3, r0
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fac2 	bl	800433c <I2C_RequestMemoryWrite>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d052      	beq.n	8003e64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e081      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fd50 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06b      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d11b      	bne.n	8003e64 <HAL_I2C_Mem_Write+0x180>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d017      	beq.n	8003e64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1aa      	bne.n	8003dc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fd43 	bl	80048fc <I2C_WaitOnBTFFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d107      	bne.n	8003e94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e016      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	00100002 	.word	0x00100002
 8003ed4:	ffff0000 	.word	0xffff0000

08003ed8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08c      	sub	sp, #48	@ 0x30
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	817b      	strh	r3, [r7, #10]
 8003eea:	460b      	mov	r3, r1
 8003eec:	813b      	strh	r3, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ef2:	f7fe ff47 	bl	8002d84 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	f040 8214 	bne.w	800432e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2319      	movs	r3, #25
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	497b      	ldr	r1, [pc, #492]	@ (80040fc <HAL_I2C_Mem_Read+0x224>)
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fb91 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e207      	b.n	8004330 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_I2C_Mem_Read+0x56>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e200      	b.n	8004330 <HAL_I2C_Mem_Read+0x458>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d007      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2222      	movs	r2, #34	@ 0x22
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2240      	movs	r2, #64	@ 0x40
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a5b      	ldr	r2, [pc, #364]	@ (8004100 <HAL_I2C_Mem_Read+0x228>)
 8003f94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f96:	88f8      	ldrh	r0, [r7, #6]
 8003f98:	893a      	ldrh	r2, [r7, #8]
 8003f9a:	8979      	ldrh	r1, [r7, #10]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fa5e 	bl	8004468 <I2C_RequestMemoryRead>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e1bc      	b.n	8004330 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d113      	bne.n	8003fe6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	623b      	str	r3, [r7, #32]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	623b      	str	r3, [r7, #32]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	623b      	str	r3, [r7, #32]
 8003fd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e190      	b.n	8004308 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d11b      	bne.n	8004026 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e170      	b.n	8004308 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402a:	2b02      	cmp	r3, #2
 800402c:	d11b      	bne.n	8004066 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800403c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800404c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	e150      	b.n	8004308 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800407c:	e144      	b.n	8004308 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004082:	2b03      	cmp	r3, #3
 8004084:	f200 80f1 	bhi.w	800426a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408c:	2b01      	cmp	r3, #1
 800408e:	d123      	bne.n	80040d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004092:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fc79 	bl	800498c <I2C_WaitOnRXNEFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e145      	b.n	8004330 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040d6:	e117      	b.n	8004308 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d14e      	bne.n	800417e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e6:	2200      	movs	r2, #0
 80040e8:	4906      	ldr	r1, [pc, #24]	@ (8004104 <HAL_I2C_Mem_Read+0x22c>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 faa4 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e11a      	b.n	8004330 <HAL_I2C_Mem_Read+0x458>
 80040fa:	bf00      	nop
 80040fc:	00100002 	.word	0x00100002
 8004100:	ffff0000 	.word	0xffff0000
 8004104:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800417c:	e0c4      	b.n	8004308 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004184:	2200      	movs	r2, #0
 8004186:	496c      	ldr	r1, [pc, #432]	@ (8004338 <HAL_I2C_Mem_Read+0x460>)
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fa55 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0cb      	b.n	8004330 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	2200      	movs	r2, #0
 80041e2:	4955      	ldr	r1, [pc, #340]	@ (8004338 <HAL_I2C_Mem_Read+0x460>)
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fa27 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e09d      	b.n	8004330 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004268:	e04e      	b.n	8004308 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fb8c 	bl	800498c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e058      	b.n	8004330 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d124      	bne.n	8004308 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	f47f aeb6 	bne.w	800407e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3728      	adds	r7, #40	@ 0x28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	00010004 	.word	0x00010004

0800433c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	461a      	mov	r2, r3
 800434a:	4603      	mov	r3, r0
 800434c:	817b      	strh	r3, [r7, #10]
 800434e:	460b      	mov	r3, r1
 8004350:	813b      	strh	r3, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	2200      	movs	r2, #0
 800436e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f960 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00d      	beq.n	800439a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800438c:	d103      	bne.n	8004396 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004394:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e05f      	b.n	800445a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800439a:	897b      	ldrh	r3, [r7, #10]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	492d      	ldr	r1, [pc, #180]	@ (8004464 <I2C_RequestMemoryWrite+0x128>)
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f9bb 	bl	800472c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e04c      	b.n	800445a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d8:	6a39      	ldr	r1, [r7, #32]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fa46 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d107      	bne.n	80043fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e02b      	b.n	800445a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004408:	893b      	ldrh	r3, [r7, #8]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	611a      	str	r2, [r3, #16]
 8004412:	e021      	b.n	8004458 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	0a1b      	lsrs	r3, r3, #8
 8004418:	b29b      	uxth	r3, r3
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004424:	6a39      	ldr	r1, [r7, #32]
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fa20 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	2b04      	cmp	r3, #4
 8004438:	d107      	bne.n	800444a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004448:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e005      	b.n	800445a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800444e:	893b      	ldrh	r3, [r7, #8]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	00010002 	.word	0x00010002

08004468 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	460b      	mov	r3, r1
 800447c:	813b      	strh	r3, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004490:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f8c2 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00d      	beq.n	80044d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c8:	d103      	bne.n	80044d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e0aa      	b.n	800462c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044d6:	897b      	ldrh	r3, [r7, #10]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	6a3a      	ldr	r2, [r7, #32]
 80044ea:	4952      	ldr	r1, [pc, #328]	@ (8004634 <I2C_RequestMemoryRead+0x1cc>)
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f91d 	bl	800472c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e097      	b.n	800462c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004514:	6a39      	ldr	r1, [r7, #32]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f9a8 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	2b04      	cmp	r3, #4
 8004528:	d107      	bne.n	800453a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004538:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e076      	b.n	800462c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d105      	bne.n	8004550 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004544:	893b      	ldrh	r3, [r7, #8]
 8004546:	b2da      	uxtb	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	611a      	str	r2, [r3, #16]
 800454e:	e021      	b.n	8004594 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004550:	893b      	ldrh	r3, [r7, #8]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	b29b      	uxth	r3, r3
 8004556:	b2da      	uxtb	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800455e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004560:	6a39      	ldr	r1, [r7, #32]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f982 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	2b04      	cmp	r3, #4
 8004574:	d107      	bne.n	8004586 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004584:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e050      	b.n	800462c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800458a:	893b      	ldrh	r3, [r7, #8]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004596:	6a39      	ldr	r1, [r7, #32]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f967 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00d      	beq.n	80045c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d107      	bne.n	80045bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e035      	b.n	800462c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f82b 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f6:	d103      	bne.n	8004600 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e013      	b.n	800462c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004604:	897b      	ldrh	r3, [r7, #10]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	6a3a      	ldr	r2, [r7, #32]
 8004618:	4906      	ldr	r1, [pc, #24]	@ (8004634 <I2C_RequestMemoryRead+0x1cc>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f886 	bl	800472c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	00010002 	.word	0x00010002

08004638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004648:	e048      	b.n	80046dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d044      	beq.n	80046dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fe fb97 	bl	8002d84 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d139      	bne.n	80046dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	0c1b      	lsrs	r3, r3, #16
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10d      	bne.n	800468e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	43da      	mvns	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	e00c      	b.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	43da      	mvns	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d116      	bne.n	80046dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e023      	b.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d10d      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0xca>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	43da      	mvns	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4013      	ands	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	e00c      	b.n	800471c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	43da      	mvns	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4013      	ands	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf0c      	ite	eq
 8004714:	2301      	moveq	r3, #1
 8004716:	2300      	movne	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	429a      	cmp	r2, r3
 8004720:	d093      	beq.n	800464a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800473a:	e071      	b.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474a:	d123      	bne.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004764:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	f043 0204 	orr.w	r2, r3, #4
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e067      	b.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d041      	beq.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479c:	f7fe faf2 	bl	8002d84 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d302      	bcc.n	80047b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d136      	bne.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d10c      	bne.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	43da      	mvns	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4013      	ands	r3, r2
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bf14      	ite	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	2300      	moveq	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	e00b      	b.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	43da      	mvns	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e021      	b.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10c      	bne.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	43da      	mvns	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e00b      	b.n	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	43da      	mvns	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf14      	ite	ne
 8004856:	2301      	movne	r3, #1
 8004858:	2300      	moveq	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	f47f af6d 	bne.w	800473c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004878:	e034      	b.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f8e3 	bl	8004a46 <I2C_IsAcknowledgeFailed>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e034      	b.n	80048f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d028      	beq.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fe fa77 	bl	8002d84 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11d      	bne.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b2:	2b80      	cmp	r3, #128	@ 0x80
 80048b4:	d016      	beq.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e007      	b.n	80048f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ee:	2b80      	cmp	r3, #128	@ 0x80
 80048f0:	d1c3      	bne.n	800487a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004908:	e034      	b.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f89b 	bl	8004a46 <I2C_IsAcknowledgeFailed>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e034      	b.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d028      	beq.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fe fa2f 	bl	8002d84 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d11d      	bne.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b04      	cmp	r3, #4
 8004944:	d016      	beq.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e007      	b.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d1c3      	bne.n	800490a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004998:	e049      	b.n	8004a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d119      	bne.n	80049dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0210 	mvn.w	r2, #16
 80049b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e030      	b.n	8004a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049dc:	f7fe f9d2 	bl	8002d84 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d302      	bcc.n	80049f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d11d      	bne.n	8004a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b40      	cmp	r3, #64	@ 0x40
 80049fe:	d016      	beq.n	8004a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e007      	b.n	8004a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	d1ae      	bne.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5c:	d11b      	bne.n	8004a96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	f043 0204 	orr.w	r2, r3, #4
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0cc      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b68      	ldr	r3, [pc, #416]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d90c      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b65      	ldr	r3, [pc, #404]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b63      	ldr	r3, [pc, #396]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0b8      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d020      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af8:	4b59      	ldr	r3, [pc, #356]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4a58      	ldr	r2, [pc, #352]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b10:	4b53      	ldr	r3, [pc, #332]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4a52      	ldr	r2, [pc, #328]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b1c:	4b50      	ldr	r3, [pc, #320]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	494d      	ldr	r1, [pc, #308]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d044      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	4b47      	ldr	r3, [pc, #284]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d119      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e07f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b62:	4b3f      	ldr	r3, [pc, #252]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e06f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b72:	4b3b      	ldr	r3, [pc, #236]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e067      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b82:	4b37      	ldr	r3, [pc, #220]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 0203 	bic.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4934      	ldr	r1, [pc, #208]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b94:	f7fe f8f6 	bl	8002d84 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fe f8f2 	bl	8002d84 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e04f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 020c 	and.w	r2, r3, #12
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d1eb      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b25      	ldr	r3, [pc, #148]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d20c      	bcs.n	8004bec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b22      	ldr	r3, [pc, #136]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b20      	ldr	r3, [pc, #128]	@ (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e032      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf8:	4b19      	ldr	r3, [pc, #100]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4916      	ldr	r1, [pc, #88]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c16:	4b12      	ldr	r3, [pc, #72]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	490e      	ldr	r1, [pc, #56]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c2a:	f000 f855 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	490a      	ldr	r1, [pc, #40]	@ (8004c64 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	5ccb      	ldrb	r3, [r1, r3]
 8004c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c42:	4a09      	ldr	r2, [pc, #36]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c46:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe f856 	bl	8002cfc <HAL_InitTick>

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40023c00 	.word	0x40023c00
 8004c60:	40023800 	.word	0x40023800
 8004c64:	0800e898 	.word	0x0800e898
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	20000004 	.word	0x20000004

08004c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c74:	4b03      	ldr	r3, [pc, #12]	@ (8004c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000000 	.word	0x20000000

08004c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c8c:	f7ff fff0 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0a9b      	lsrs	r3, r3, #10
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4903      	ldr	r1, [pc, #12]	@ (8004cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	0800e8a8 	.word	0x0800e8a8

08004cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cb4:	f7ff ffdc 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0b5b      	lsrs	r3, r3, #13
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4903      	ldr	r1, [pc, #12]	@ (8004cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	0800e8a8 	.word	0x0800e8a8

08004cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cdc:	b0a6      	sub	sp, #152	@ 0x98
 8004cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cfe:	4bc8      	ldr	r3, [pc, #800]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b0c      	cmp	r3, #12
 8004d08:	f200 817e 	bhi.w	8005008 <HAL_RCC_GetSysClockFreq+0x330>
 8004d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d49 	.word	0x08004d49
 8004d18:	08005009 	.word	0x08005009
 8004d1c:	08005009 	.word	0x08005009
 8004d20:	08005009 	.word	0x08005009
 8004d24:	08004d51 	.word	0x08004d51
 8004d28:	08005009 	.word	0x08005009
 8004d2c:	08005009 	.word	0x08005009
 8004d30:	08005009 	.word	0x08005009
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08005009 	.word	0x08005009
 8004d3c:	08005009 	.word	0x08005009
 8004d40:	08005009 	.word	0x08005009
 8004d44:	08004ec3 	.word	0x08004ec3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d48:	4bb6      	ldr	r3, [pc, #728]	@ (8005024 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d4e:	e15f      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d50:	4bb5      	ldr	r3, [pc, #724]	@ (8005028 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d56:	e15b      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d58:	4bb1      	ldr	r3, [pc, #708]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d64:	4bae      	ldr	r3, [pc, #696]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d031      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d70:	4bab      	ldr	r3, [pc, #684]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	099b      	lsrs	r3, r3, #6
 8004d76:	2200      	movs	r2, #0
 8004d78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d82:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d84:	2300      	movs	r3, #0
 8004d86:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d88:	4ba7      	ldr	r3, [pc, #668]	@ (8005028 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d8a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004d8e:	462a      	mov	r2, r5
 8004d90:	fb03 f202 	mul.w	r2, r3, r2
 8004d94:	2300      	movs	r3, #0
 8004d96:	4621      	mov	r1, r4
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4aa2      	ldr	r2, [pc, #648]	@ (8005028 <HAL_RCC_GetSysClockFreq+0x350>)
 8004da0:	4621      	mov	r1, r4
 8004da2:	fba1 1202 	umull	r1, r2, r1, r2
 8004da6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004da8:	460a      	mov	r2, r1
 8004daa:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004dac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004dae:	4413      	add	r3, r2
 8004db0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db6:	2200      	movs	r2, #0
 8004db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004dbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004dc0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004dc4:	f7fb ff60 	bl	8000c88 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dd2:	e064      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd4:	4b92      	ldr	r3, [pc, #584]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	099b      	lsrs	r3, r3, #6
 8004dda:	2200      	movs	r2, #0
 8004ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dde:	657a      	str	r2, [r7, #84]	@ 0x54
 8004de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004de8:	2300      	movs	r3, #0
 8004dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004df0:	4622      	mov	r2, r4
 8004df2:	462b      	mov	r3, r5
 8004df4:	f04f 0000 	mov.w	r0, #0
 8004df8:	f04f 0100 	mov.w	r1, #0
 8004dfc:	0159      	lsls	r1, r3, #5
 8004dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e02:	0150      	lsls	r0, r2, #5
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4621      	mov	r1, r4
 8004e0a:	1a51      	subs	r1, r2, r1
 8004e0c:	6139      	str	r1, [r7, #16]
 8004e0e:	4629      	mov	r1, r5
 8004e10:	eb63 0301 	sbc.w	r3, r3, r1
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e22:	4659      	mov	r1, fp
 8004e24:	018b      	lsls	r3, r1, #6
 8004e26:	4651      	mov	r1, sl
 8004e28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e2c:	4651      	mov	r1, sl
 8004e2e:	018a      	lsls	r2, r1, #6
 8004e30:	4651      	mov	r1, sl
 8004e32:	ebb2 0801 	subs.w	r8, r2, r1
 8004e36:	4659      	mov	r1, fp
 8004e38:	eb63 0901 	sbc.w	r9, r3, r1
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e50:	4690      	mov	r8, r2
 8004e52:	4699      	mov	r9, r3
 8004e54:	4623      	mov	r3, r4
 8004e56:	eb18 0303 	adds.w	r3, r8, r3
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	eb49 0303 	adc.w	r3, r9, r3
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e70:	4629      	mov	r1, r5
 8004e72:	028b      	lsls	r3, r1, #10
 8004e74:	4621      	mov	r1, r4
 8004e76:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	028a      	lsls	r2, r1, #10
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e86:	2200      	movs	r2, #0
 8004e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e90:	f7fb fefa 	bl	8000c88 <__aeabi_uldivmod>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4613      	mov	r3, r2
 8004e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e9e:	4b60      	ldr	r3, [pc, #384]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004eb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004ec0:	e0a6      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec2:	4b57      	ldr	r3, [pc, #348]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ece:	4b54      	ldr	r3, [pc, #336]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d02a      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eda:	4b51      	ldr	r3, [pc, #324]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004eec:	2100      	movs	r1, #0
 8004eee:	4b4e      	ldr	r3, [pc, #312]	@ (8005028 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ef0:	fb03 f201 	mul.w	r2, r3, r1
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	fb00 f303 	mul.w	r3, r0, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	4a4a      	ldr	r2, [pc, #296]	@ (8005028 <HAL_RCC_GetSysClockFreq+0x350>)
 8004efe:	fba0 1202 	umull	r1, r2, r0, r2
 8004f02:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f04:	460a      	mov	r2, r1
 8004f06:	673a      	str	r2, [r7, #112]	@ 0x70
 8004f08:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f0a:	4413      	add	r3, r2
 8004f0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f12:	2200      	movs	r2, #0
 8004f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f16:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004f1c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004f20:	f7fb feb2 	bl	8000c88 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4613      	mov	r3, r2
 8004f2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f2e:	e05b      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f30:	4b3b      	ldr	r3, [pc, #236]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	099b      	lsrs	r3, r3, #6
 8004f36:	2200      	movs	r2, #0
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f42:	623b      	str	r3, [r7, #32]
 8004f44:	2300      	movs	r3, #0
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	f04f 0000 	mov.w	r0, #0
 8004f54:	f04f 0100 	mov.w	r1, #0
 8004f58:	0159      	lsls	r1, r3, #5
 8004f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f5e:	0150      	lsls	r0, r2, #5
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4641      	mov	r1, r8
 8004f66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f84:	ebb2 040a 	subs.w	r4, r2, sl
 8004f88:	eb63 050b 	sbc.w	r5, r3, fp
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	00eb      	lsls	r3, r5, #3
 8004f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f9a:	00e2      	lsls	r2, r4, #3
 8004f9c:	4614      	mov	r4, r2
 8004f9e:	461d      	mov	r5, r3
 8004fa0:	4643      	mov	r3, r8
 8004fa2:	18e3      	adds	r3, r4, r3
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	eb45 0303 	adc.w	r3, r5, r3
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fba:	4629      	mov	r1, r5
 8004fbc:	028b      	lsls	r3, r1, #10
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	028a      	lsls	r2, r1, #10
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	61fa      	str	r2, [r7, #28]
 8004fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fda:	f7fb fe55 	bl	8000c88 <__aeabi_uldivmod>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	0f1b      	lsrs	r3, r3, #28
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005006:	e003      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <HAL_RCC_GetSysClockFreq+0x34c>)
 800500a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800500e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005010:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005014:	4618      	mov	r0, r3
 8005016:	3798      	adds	r7, #152	@ 0x98
 8005018:	46bd      	mov	sp, r7
 800501a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800501e:	bf00      	nop
 8005020:	40023800 	.word	0x40023800
 8005024:	00f42400 	.word	0x00f42400
 8005028:	017d7840 	.word	0x017d7840

0800502c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e28d      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8083 	beq.w	8005152 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800504c:	4b94      	ldr	r3, [pc, #592]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 030c 	and.w	r3, r3, #12
 8005054:	2b04      	cmp	r3, #4
 8005056:	d019      	beq.n	800508c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005058:	4b91      	ldr	r3, [pc, #580]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005060:	2b08      	cmp	r3, #8
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005064:	4b8e      	ldr	r3, [pc, #568]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800506c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005070:	d00c      	beq.n	800508c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005072:	4b8b      	ldr	r3, [pc, #556]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800507a:	2b0c      	cmp	r3, #12
 800507c:	d112      	bne.n	80050a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507e:	4b88      	ldr	r3, [pc, #544]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005086:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800508a:	d10b      	bne.n	80050a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800508c:	4b84      	ldr	r3, [pc, #528]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d05b      	beq.n	8005150 <HAL_RCC_OscConfig+0x124>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d157      	bne.n	8005150 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e25a      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ac:	d106      	bne.n	80050bc <HAL_RCC_OscConfig+0x90>
 80050ae:	4b7c      	ldr	r3, [pc, #496]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7b      	ldr	r2, [pc, #492]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e01d      	b.n	80050f8 <HAL_RCC_OscConfig+0xcc>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCC_OscConfig+0xb4>
 80050c6:	4b76      	ldr	r3, [pc, #472]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a75      	ldr	r2, [pc, #468]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b73      	ldr	r3, [pc, #460]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a72      	ldr	r2, [pc, #456]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e00b      	b.n	80050f8 <HAL_RCC_OscConfig+0xcc>
 80050e0:	4b6f      	ldr	r3, [pc, #444]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a6e      	ldr	r2, [pc, #440]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	4b6c      	ldr	r3, [pc, #432]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6b      	ldr	r2, [pc, #428]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80050f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d013      	beq.n	8005128 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fd fe40 	bl	8002d84 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005108:	f7fd fe3c 	bl	8002d84 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	@ 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e21f      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	4b61      	ldr	r3, [pc, #388]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0xdc>
 8005126:	e014      	b.n	8005152 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fd fe2c 	bl	8002d84 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005130:	f7fd fe28 	bl	8002d84 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	@ 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e20b      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005142:	4b57      	ldr	r3, [pc, #348]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x104>
 800514e:	e000      	b.n	8005152 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d06f      	beq.n	800523e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800515e:	4b50      	ldr	r3, [pc, #320]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b00      	cmp	r3, #0
 8005168:	d017      	beq.n	800519a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800516a:	4b4d      	ldr	r3, [pc, #308]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005172:	2b08      	cmp	r3, #8
 8005174:	d105      	bne.n	8005182 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005176:	4b4a      	ldr	r3, [pc, #296]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005182:	4b47      	ldr	r3, [pc, #284]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800518a:	2b0c      	cmp	r3, #12
 800518c:	d11c      	bne.n	80051c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518e:	4b44      	ldr	r3, [pc, #272]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d116      	bne.n	80051c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519a:	4b41      	ldr	r3, [pc, #260]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_RCC_OscConfig+0x186>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e1d3      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b2:	4b3b      	ldr	r3, [pc, #236]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4937      	ldr	r1, [pc, #220]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c6:	e03a      	b.n	800523e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d020      	beq.n	8005212 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051d0:	4b34      	ldr	r3, [pc, #208]	@ (80052a4 <HAL_RCC_OscConfig+0x278>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d6:	f7fd fdd5 	bl	8002d84 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051de:	f7fd fdd1 	bl	8002d84 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e1b4      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f0:	4b2b      	ldr	r3, [pc, #172]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fc:	4b28      	ldr	r3, [pc, #160]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4925      	ldr	r1, [pc, #148]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 800520c:	4313      	orrs	r3, r2
 800520e:	600b      	str	r3, [r1, #0]
 8005210:	e015      	b.n	800523e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005212:	4b24      	ldr	r3, [pc, #144]	@ (80052a4 <HAL_RCC_OscConfig+0x278>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fd fdb4 	bl	8002d84 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005220:	f7fd fdb0 	bl	8002d84 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e193      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005232:	4b1b      	ldr	r3, [pc, #108]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d036      	beq.n	80052b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d016      	beq.n	8005280 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005252:	4b15      	ldr	r3, [pc, #84]	@ (80052a8 <HAL_RCC_OscConfig+0x27c>)
 8005254:	2201      	movs	r2, #1
 8005256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005258:	f7fd fd94 	bl	8002d84 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005260:	f7fd fd90 	bl	8002d84 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e173      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005272:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x234>
 800527e:	e01b      	b.n	80052b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005280:	4b09      	ldr	r3, [pc, #36]	@ (80052a8 <HAL_RCC_OscConfig+0x27c>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fd fd7d 	bl	8002d84 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528c:	e00e      	b.n	80052ac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528e:	f7fd fd79 	bl	8002d84 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d907      	bls.n	80052ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e15c      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	42470000 	.word	0x42470000
 80052a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ac:	4b8a      	ldr	r3, [pc, #552]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80052ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1ea      	bne.n	800528e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8097 	beq.w	80053f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ca:	4b83      	ldr	r3, [pc, #524]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10f      	bne.n	80052f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	4b7f      	ldr	r3, [pc, #508]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	4a7e      	ldr	r2, [pc, #504]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80052e6:	4b7c      	ldr	r3, [pc, #496]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f6:	4b79      	ldr	r3, [pc, #484]	@ (80054dc <HAL_RCC_OscConfig+0x4b0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d118      	bne.n	8005334 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005302:	4b76      	ldr	r3, [pc, #472]	@ (80054dc <HAL_RCC_OscConfig+0x4b0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a75      	ldr	r2, [pc, #468]	@ (80054dc <HAL_RCC_OscConfig+0x4b0>)
 8005308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800530c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800530e:	f7fd fd39 	bl	8002d84 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005316:	f7fd fd35 	bl	8002d84 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e118      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005328:	4b6c      	ldr	r3, [pc, #432]	@ (80054dc <HAL_RCC_OscConfig+0x4b0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d106      	bne.n	800534a <HAL_RCC_OscConfig+0x31e>
 800533c:	4b66      	ldr	r3, [pc, #408]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005340:	4a65      	ldr	r2, [pc, #404]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6713      	str	r3, [r2, #112]	@ 0x70
 8005348:	e01c      	b.n	8005384 <HAL_RCC_OscConfig+0x358>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b05      	cmp	r3, #5
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0x340>
 8005352:	4b61      	ldr	r3, [pc, #388]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005356:	4a60      	ldr	r2, [pc, #384]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 8005358:	f043 0304 	orr.w	r3, r3, #4
 800535c:	6713      	str	r3, [r2, #112]	@ 0x70
 800535e:	4b5e      	ldr	r3, [pc, #376]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	4a5d      	ldr	r2, [pc, #372]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	6713      	str	r3, [r2, #112]	@ 0x70
 800536a:	e00b      	b.n	8005384 <HAL_RCC_OscConfig+0x358>
 800536c:	4b5a      	ldr	r3, [pc, #360]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	4a59      	ldr	r2, [pc, #356]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	6713      	str	r3, [r2, #112]	@ 0x70
 8005378:	4b57      	ldr	r3, [pc, #348]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537c:	4a56      	ldr	r2, [pc, #344]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 800537e:	f023 0304 	bic.w	r3, r3, #4
 8005382:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d015      	beq.n	80053b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538c:	f7fd fcfa 	bl	8002d84 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005392:	e00a      	b.n	80053aa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005394:	f7fd fcf6 	bl	8002d84 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e0d7      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053aa:	4b4b      	ldr	r3, [pc, #300]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0ee      	beq.n	8005394 <HAL_RCC_OscConfig+0x368>
 80053b6:	e014      	b.n	80053e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fd fce4 	bl	8002d84 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c0:	f7fd fce0 	bl	8002d84 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e0c1      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d6:	4b40      	ldr	r3, [pc, #256]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1ee      	bne.n	80053c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d105      	bne.n	80053f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e8:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	4a3a      	ldr	r2, [pc, #232]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80053ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 80ad 	beq.w	8005558 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053fe:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b08      	cmp	r3, #8
 8005408:	d060      	beq.n	80054cc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d145      	bne.n	800549e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005412:	4b33      	ldr	r3, [pc, #204]	@ (80054e0 <HAL_RCC_OscConfig+0x4b4>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd fcb4 	bl	8002d84 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005420:	f7fd fcb0 	bl	8002d84 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e093      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005432:	4b29      	ldr	r3, [pc, #164]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	019b      	lsls	r3, r3, #6
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	3b01      	subs	r3, #1
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	071b      	lsls	r3, r3, #28
 800546a:	491b      	ldr	r1, [pc, #108]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005470:	4b1b      	ldr	r3, [pc, #108]	@ (80054e0 <HAL_RCC_OscConfig+0x4b4>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005476:	f7fd fc85 	bl	8002d84 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547e:	f7fd fc81 	bl	8002d84 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e064      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005490:	4b11      	ldr	r3, [pc, #68]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x452>
 800549c:	e05c      	b.n	8005558 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549e:	4b10      	ldr	r3, [pc, #64]	@ (80054e0 <HAL_RCC_OscConfig+0x4b4>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fd fc6e 	bl	8002d84 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fd fc6a 	bl	8002d84 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e04d      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054be:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <HAL_RCC_OscConfig+0x4ac>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x480>
 80054ca:	e045      	b.n	8005558 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d107      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e040      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40007000 	.word	0x40007000
 80054e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005564 <HAL_RCC_OscConfig+0x538>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d030      	beq.n	8005554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d129      	bne.n	8005554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550a:	429a      	cmp	r2, r3
 800550c:	d122      	bne.n	8005554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005514:	4013      	ands	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800551a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800551c:	4293      	cmp	r3, r2
 800551e:	d119      	bne.n	8005554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	3b01      	subs	r3, #1
 800552e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d10f      	bne.n	8005554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d107      	bne.n	8005554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800

08005568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e041      	b.n	80055fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc fd16 	bl	8001fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f000 fc60 	bl	8005e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e041      	b.n	800569c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d106      	bne.n	8005632 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7fc fd41 	bl	80020b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3304      	adds	r3, #4
 8005642:	4619      	mov	r1, r3
 8005644:	4610      	mov	r0, r2
 8005646:	f000 fc11 	bl	8005e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d109      	bne.n	80056c8 <HAL_TIM_PWM_Start+0x24>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b01      	cmp	r3, #1
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	e022      	b.n	800570e <HAL_TIM_PWM_Start+0x6a>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d109      	bne.n	80056e2 <HAL_TIM_PWM_Start+0x3e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e015      	b.n	800570e <HAL_TIM_PWM_Start+0x6a>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d109      	bne.n	80056fc <HAL_TIM_PWM_Start+0x58>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	e008      	b.n	800570e <HAL_TIM_PWM_Start+0x6a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e07c      	b.n	8005810 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <HAL_TIM_PWM_Start+0x82>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005724:	e013      	b.n	800574e <HAL_TIM_PWM_Start+0xaa>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b04      	cmp	r3, #4
 800572a:	d104      	bne.n	8005736 <HAL_TIM_PWM_Start+0x92>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005734:	e00b      	b.n	800574e <HAL_TIM_PWM_Start+0xaa>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d104      	bne.n	8005746 <HAL_TIM_PWM_Start+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005744:	e003      	b.n	800574e <HAL_TIM_PWM_Start+0xaa>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2202      	movs	r2, #2
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2201      	movs	r2, #1
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fe7e 	bl	8006458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2d      	ldr	r2, [pc, #180]	@ (8005818 <HAL_TIM_PWM_Start+0x174>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <HAL_TIM_PWM_Start+0xcc>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2c      	ldr	r2, [pc, #176]	@ (800581c <HAL_TIM_PWM_Start+0x178>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d101      	bne.n	8005774 <HAL_TIM_PWM_Start+0xd0>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <HAL_TIM_PWM_Start+0xd2>
 8005774:	2300      	movs	r3, #0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005788:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a22      	ldr	r2, [pc, #136]	@ (8005818 <HAL_TIM_PWM_Start+0x174>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_TIM_PWM_Start+0x136>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579c:	d01d      	beq.n	80057da <HAL_TIM_PWM_Start+0x136>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005820 <HAL_TIM_PWM_Start+0x17c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_TIM_PWM_Start+0x136>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005824 <HAL_TIM_PWM_Start+0x180>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_TIM_PWM_Start+0x136>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <HAL_TIM_PWM_Start+0x184>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_TIM_PWM_Start+0x136>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a16      	ldr	r2, [pc, #88]	@ (800581c <HAL_TIM_PWM_Start+0x178>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIM_PWM_Start+0x136>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a18      	ldr	r2, [pc, #96]	@ (800582c <HAL_TIM_PWM_Start+0x188>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIM_PWM_Start+0x136>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a16      	ldr	r2, [pc, #88]	@ (8005830 <HAL_TIM_PWM_Start+0x18c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d111      	bne.n	80057fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b06      	cmp	r3, #6
 80057ea:	d010      	beq.n	800580e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fc:	e007      	b.n	800580e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40010000 	.word	0x40010000
 800581c:	40010400 	.word	0x40010400
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40014000 	.word	0x40014000
 8005830:	40001800 	.word	0x40001800

08005834 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fe06 	bl	8006458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2e      	ldr	r2, [pc, #184]	@ (800590c <HAL_TIM_PWM_Stop+0xd8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_TIM_PWM_Stop+0x2c>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a2d      	ldr	r2, [pc, #180]	@ (8005910 <HAL_TIM_PWM_Stop+0xdc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <HAL_TIM_PWM_Stop+0x30>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_TIM_PWM_Stop+0x32>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d017      	beq.n	800589a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005874:	4013      	ands	r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <HAL_TIM_PWM_Stop+0x66>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	f240 4344 	movw	r3, #1092	@ 0x444
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <HAL_TIM_PWM_Stop+0x66>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005898:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <HAL_TIM_PWM_Stop+0x96>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <HAL_TIM_PWM_Stop+0x96>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Stop+0xa6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d8:	e013      	b.n	8005902 <HAL_TIM_PWM_Stop+0xce>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Stop+0xb6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e8:	e00b      	b.n	8005902 <HAL_TIM_PWM_Stop+0xce>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Stop+0xc6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058f8:	e003      	b.n	8005902 <HAL_TIM_PWM_Stop+0xce>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40010000 	.word	0x40010000
 8005910:	40010400 	.word	0x40010400

08005914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d020      	beq.n	8005978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0202 	mvn.w	r2, #2
 8005948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa65 	bl	8005e2e <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa57 	bl	8005e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fa68 	bl	8005e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d020      	beq.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01b      	beq.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0204 	mvn.w	r2, #4
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa3f 	bl	8005e2e <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa31 	bl	8005e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa42 	bl	8005e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01b      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0208 	mvn.w	r2, #8
 80059e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2204      	movs	r2, #4
 80059e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa19 	bl	8005e2e <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa0b 	bl	8005e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fa1c 	bl	8005e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d020      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0210 	mvn.w	r2, #16
 8005a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2208      	movs	r2, #8
 8005a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9f3 	bl	8005e2e <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9e5 	bl	8005e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f9f6 	bl	8005e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0201 	mvn.w	r2, #1
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f9c3 	bl	8005e06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fd86 	bl	80065b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9c7 	bl	8005e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0220 	mvn.w	r2, #32
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fd58 	bl	800659c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e0ae      	b.n	8005c70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b0c      	cmp	r3, #12
 8005b1e:	f200 809f 	bhi.w	8005c60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b22:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b5d 	.word	0x08005b5d
 8005b2c:	08005c61 	.word	0x08005c61
 8005b30:	08005c61 	.word	0x08005c61
 8005b34:	08005c61 	.word	0x08005c61
 8005b38:	08005b9d 	.word	0x08005b9d
 8005b3c:	08005c61 	.word	0x08005c61
 8005b40:	08005c61 	.word	0x08005c61
 8005b44:	08005c61 	.word	0x08005c61
 8005b48:	08005bdf 	.word	0x08005bdf
 8005b4c:	08005c61 	.word	0x08005c61
 8005b50:	08005c61 	.word	0x08005c61
 8005b54:	08005c61 	.word	0x08005c61
 8005b58:	08005c1f 	.word	0x08005c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fa2e 	bl	8005fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0208 	orr.w	r2, r2, #8
 8005b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0204 	bic.w	r2, r2, #4
 8005b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6999      	ldr	r1, [r3, #24]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	619a      	str	r2, [r3, #24]
      break;
 8005b9a:	e064      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fa7e 	bl	80060a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]
      break;
 8005bdc:	e043      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fad3 	bl	8006190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0208 	orr.w	r2, r2, #8
 8005bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0204 	bic.w	r2, r2, #4
 8005c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69d9      	ldr	r1, [r3, #28]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	61da      	str	r2, [r3, #28]
      break;
 8005c1c:	e023      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fb27 	bl	8006278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69d9      	ldr	r1, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	021a      	lsls	r2, r3, #8
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	61da      	str	r2, [r3, #28]
      break;
 8005c5e:	e002      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
      break;
 8005c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e0b4      	b.n	8005dfe <HAL_TIM_ConfigClockSource+0x186>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ccc:	d03e      	beq.n	8005d4c <HAL_TIM_ConfigClockSource+0xd4>
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cd2:	f200 8087 	bhi.w	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cda:	f000 8086 	beq.w	8005dea <HAL_TIM_ConfigClockSource+0x172>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce2:	d87f      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b70      	cmp	r3, #112	@ 0x70
 8005ce6:	d01a      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0xa6>
 8005ce8:	2b70      	cmp	r3, #112	@ 0x70
 8005cea:	d87b      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b60      	cmp	r3, #96	@ 0x60
 8005cee:	d050      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x11a>
 8005cf0:	2b60      	cmp	r3, #96	@ 0x60
 8005cf2:	d877      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b50      	cmp	r3, #80	@ 0x50
 8005cf6:	d03c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0xfa>
 8005cf8:	2b50      	cmp	r3, #80	@ 0x50
 8005cfa:	d873      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b40      	cmp	r3, #64	@ 0x40
 8005cfe:	d058      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d00:	2b40      	cmp	r3, #64	@ 0x40
 8005d02:	d86f      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b30      	cmp	r3, #48	@ 0x30
 8005d06:	d064      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d08:	2b30      	cmp	r3, #48	@ 0x30
 8005d0a:	d86b      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d060      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d867      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05c      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d05a      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d1c:	e062      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d2e:	f000 fb73 	bl	8006418 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	609a      	str	r2, [r3, #8]
      break;
 8005d4a:	e04f      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d5c:	f000 fb5c 	bl	8006418 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d6e:	609a      	str	r2, [r3, #8]
      break;
 8005d70:	e03c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f000 fad0 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2150      	movs	r1, #80	@ 0x50
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fb29 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005d90:	e02c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f000 faef 	bl	8006382 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2160      	movs	r1, #96	@ 0x60
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fb19 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005db0:	e01c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f000 fab0 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2140      	movs	r1, #64	@ 0x40
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fb09 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005dd0:	e00c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f000 fb00 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005de2:	e003      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      break;
 8005de8:	e000      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a46      	ldr	r2, [pc, #280]	@ (8005f98 <TIM_Base_SetConfig+0x12c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e8a:	d00f      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a43      	ldr	r2, [pc, #268]	@ (8005f9c <TIM_Base_SetConfig+0x130>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00b      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a42      	ldr	r2, [pc, #264]	@ (8005fa0 <TIM_Base_SetConfig+0x134>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d007      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a41      	ldr	r2, [pc, #260]	@ (8005fa4 <TIM_Base_SetConfig+0x138>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_Base_SetConfig+0x40>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a40      	ldr	r2, [pc, #256]	@ (8005fa8 <TIM_Base_SetConfig+0x13c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d108      	bne.n	8005ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a35      	ldr	r2, [pc, #212]	@ (8005f98 <TIM_Base_SetConfig+0x12c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d02b      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ecc:	d027      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a32      	ldr	r2, [pc, #200]	@ (8005f9c <TIM_Base_SetConfig+0x130>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d023      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a31      	ldr	r2, [pc, #196]	@ (8005fa0 <TIM_Base_SetConfig+0x134>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01f      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a30      	ldr	r2, [pc, #192]	@ (8005fa4 <TIM_Base_SetConfig+0x138>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01b      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa8 <TIM_Base_SetConfig+0x13c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d017      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8005fac <TIM_Base_SetConfig+0x140>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb0 <TIM_Base_SetConfig+0x144>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00f      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb4 <TIM_Base_SetConfig+0x148>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00b      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2b      	ldr	r2, [pc, #172]	@ (8005fb8 <TIM_Base_SetConfig+0x14c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2a      	ldr	r2, [pc, #168]	@ (8005fbc <TIM_Base_SetConfig+0x150>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a29      	ldr	r2, [pc, #164]	@ (8005fc0 <TIM_Base_SetConfig+0x154>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d108      	bne.n	8005f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a10      	ldr	r2, [pc, #64]	@ (8005f98 <TIM_Base_SetConfig+0x12c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_Base_SetConfig+0xf8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a12      	ldr	r2, [pc, #72]	@ (8005fa8 <TIM_Base_SetConfig+0x13c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d103      	bne.n	8005f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d105      	bne.n	8005f8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]
  }
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40010400 	.word	0x40010400
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40014400 	.word	0x40014400
 8005fb4:	40014800 	.word	0x40014800
 8005fb8:	40001800 	.word	0x40001800
 8005fbc:	40001c00 	.word	0x40001c00
 8005fc0:	40002000 	.word	0x40002000

08005fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f023 0201 	bic.w	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 0302 	bic.w	r3, r3, #2
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a20      	ldr	r2, [pc, #128]	@ (800609c <TIM_OC1_SetConfig+0xd8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_OC1_SetConfig+0x64>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1f      	ldr	r2, [pc, #124]	@ (80060a0 <TIM_OC1_SetConfig+0xdc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d10c      	bne.n	8006042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0308 	bic.w	r3, r3, #8
 800602e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a15      	ldr	r2, [pc, #84]	@ (800609c <TIM_OC1_SetConfig+0xd8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_OC1_SetConfig+0x8e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a14      	ldr	r2, [pc, #80]	@ (80060a0 <TIM_OC1_SetConfig+0xdc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d111      	bne.n	8006076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	621a      	str	r2, [r3, #32]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40010000 	.word	0x40010000
 80060a0:	40010400 	.word	0x40010400

080060a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f023 0210 	bic.w	r2, r3, #16
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f023 0320 	bic.w	r3, r3, #32
 80060ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a22      	ldr	r2, [pc, #136]	@ (8006188 <TIM_OC2_SetConfig+0xe4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC2_SetConfig+0x68>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a21      	ldr	r2, [pc, #132]	@ (800618c <TIM_OC2_SetConfig+0xe8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10d      	bne.n	8006128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006126:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a17      	ldr	r2, [pc, #92]	@ (8006188 <TIM_OC2_SetConfig+0xe4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_OC2_SetConfig+0x94>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a16      	ldr	r2, [pc, #88]	@ (800618c <TIM_OC2_SetConfig+0xe8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d113      	bne.n	8006160 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800613e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	40010400 	.word	0x40010400

08006190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a21      	ldr	r2, [pc, #132]	@ (8006270 <TIM_OC3_SetConfig+0xe0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <TIM_OC3_SetConfig+0x66>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a20      	ldr	r2, [pc, #128]	@ (8006274 <TIM_OC3_SetConfig+0xe4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10d      	bne.n	8006212 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a16      	ldr	r2, [pc, #88]	@ (8006270 <TIM_OC3_SetConfig+0xe0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_OC3_SetConfig+0x92>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a15      	ldr	r2, [pc, #84]	@ (8006274 <TIM_OC3_SetConfig+0xe4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d113      	bne.n	800624a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	40010000 	.word	0x40010000
 8006274:	40010400 	.word	0x40010400

08006278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	031b      	lsls	r3, r3, #12
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a12      	ldr	r2, [pc, #72]	@ (800631c <TIM_OC4_SetConfig+0xa4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_OC4_SetConfig+0x68>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a11      	ldr	r2, [pc, #68]	@ (8006320 <TIM_OC4_SetConfig+0xa8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d109      	bne.n	80062f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	019b      	lsls	r3, r3, #6
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40010000 	.word	0x40010000
 8006320:	40010400 	.word	0x40010400

08006324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f023 0201 	bic.w	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800634e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f023 030a 	bic.w	r3, r3, #10
 8006360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006382:	b480      	push	{r7}
 8006384:	b087      	sub	sp, #28
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f023 0210 	bic.w	r2, r3, #16
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	031b      	lsls	r3, r3, #12
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	f043 0307 	orr.w	r3, r3, #7
 8006404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	609a      	str	r2, [r3, #8]
}
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	021a      	lsls	r2, r3, #8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	431a      	orrs	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4313      	orrs	r3, r2
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2201      	movs	r2, #1
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a1a      	ldr	r2, [r3, #32]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	43db      	mvns	r3, r3
 800647a:	401a      	ands	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a1a      	ldr	r2, [r3, #32]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	fa01 f303 	lsl.w	r3, r1, r3
 8006490:	431a      	orrs	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e05a      	b.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a21      	ldr	r2, [pc, #132]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d022      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006508:	d01d      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1d      	ldr	r2, [pc, #116]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d018      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1b      	ldr	r2, [pc, #108]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1a      	ldr	r2, [pc, #104]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a18      	ldr	r2, [pc, #96]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a17      	ldr	r2, [pc, #92]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a15      	ldr	r2, [pc, #84]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d10c      	bne.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800654c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	4313      	orrs	r3, r2
 8006556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40010000 	.word	0x40010000
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40000c00 	.word	0x40000c00
 8006590:	40010400 	.word	0x40010400
 8006594:	40014000 	.word	0x40014000
 8006598:	40001800 	.word	0x40001800

0800659c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e042      	b.n	800665c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fb fde6 	bl	80021bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2224      	movs	r2, #36	@ 0x24
 80065f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fdf5 	bl	80071f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800661c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695a      	ldr	r2, [r3, #20]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800662c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800663c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	@ 0x28
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b20      	cmp	r3, #32
 8006682:	d175      	bne.n	8006770 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <HAL_UART_Transmit+0x2c>
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e06e      	b.n	8006772 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2221      	movs	r2, #33	@ 0x21
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066a2:	f7fc fb6f 	bl	8002d84 <HAL_GetTick>
 80066a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	88fa      	ldrh	r2, [r7, #6]
 80066b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066bc:	d108      	bne.n	80066d0 <HAL_UART_Transmit+0x6c>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	e003      	b.n	80066d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066d8:	e02e      	b.n	8006738 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	@ 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 fb91 	bl	8006e0c <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e03a      	b.n	8006772 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10b      	bne.n	800671a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	3302      	adds	r3, #2
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	e007      	b.n	800672a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	781a      	ldrb	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	3301      	adds	r3, #1
 8006728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1cb      	bne.n	80066da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2200      	movs	r2, #0
 800674a:	2140      	movs	r1, #64	@ 0x40
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fb5d 	bl	8006e0c <UART_WaitOnFlagUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e006      	b.n	8006772 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	e000      	b.n	8006772 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006770:	2302      	movs	r3, #2
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3720      	adds	r7, #32
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b08a      	sub	sp, #40	@ 0x28
 800677e:	af02      	add	r7, sp, #8
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b20      	cmp	r3, #32
 8006798:	f040 8081 	bne.w	800689e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_UART_Receive+0x2e>
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e079      	b.n	80068a0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2222      	movs	r2, #34	@ 0x22
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067c0:	f7fc fae0 	bl	8002d84 <HAL_GetTick>
 80067c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	88fa      	ldrh	r2, [r7, #6]
 80067ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	88fa      	ldrh	r2, [r7, #6]
 80067d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067da:	d108      	bne.n	80067ee <HAL_UART_Receive+0x74>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d104      	bne.n	80067ee <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	e003      	b.n	80067f6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80067f6:	e047      	b.n	8006888 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2200      	movs	r2, #0
 8006800:	2120      	movs	r1, #32
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fb02 	bl	8006e0c <UART_WaitOnFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e042      	b.n	80068a0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10c      	bne.n	800683a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682c:	b29a      	uxth	r2, r3
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	3302      	adds	r3, #2
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	e01f      	b.n	800687a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006842:	d007      	beq.n	8006854 <HAL_UART_Receive+0xda>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <HAL_UART_Receive+0xe8>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	b2da      	uxtb	r2, r3
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e008      	b.n	8006874 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800686e:	b2da      	uxtb	r2, r3
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	3301      	adds	r3, #1
 8006878:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1b2      	bne.n	80067f8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	e000      	b.n	80068a0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800689e:	2302      	movs	r3, #2
  }
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b0ba      	sub	sp, #232	@ 0xe8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10f      	bne.n	800690e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <HAL_UART_IRQHandler+0x66>
 80068fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fbb8 	bl	800707c <UART_Receive_IT>
      return;
 800690c:	e25b      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800690e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 80de 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x22c>
 8006918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006928:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80d1 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_UART_IRQHandler+0xae>
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694e:	f043 0201 	orr.w	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <HAL_UART_IRQHandler+0xd2>
 8006962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006972:	f043 0202 	orr.w	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <HAL_UART_IRQHandler+0xf6>
 8006986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006996:	f043 0204 	orr.w	r2, r3, #4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800699e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d011      	beq.n	80069ce <HAL_UART_IRQHandler+0x126>
 80069aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c6:	f043 0208 	orr.w	r2, r3, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 81f2 	beq.w	8006dbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_UART_IRQHandler+0x14e>
 80069e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fb43 	bl	800707c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a00:	2b40      	cmp	r3, #64	@ 0x40
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <HAL_UART_IRQHandler+0x17a>
 8006a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d04f      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa4b 	bl	8006ebe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a32:	2b40      	cmp	r3, #64	@ 0x40
 8006a34:	d141      	bne.n	8006aba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3314      	adds	r3, #20
 8006a3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1d9      	bne.n	8006a36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d013      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c88 <HAL_UART_IRQHandler+0x3e0>)
 8006a90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fc fbd4 	bl	8003244 <HAL_DMA_Abort_IT>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d016      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006aac:	4610      	mov	r0, r2
 8006aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	e00e      	b.n	8006ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f994 	bl	8006de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	e00a      	b.n	8006ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f990 	bl	8006de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac0:	e006      	b.n	8006ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f98c 	bl	8006de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006ace:	e175      	b.n	8006dbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	bf00      	nop
    return;
 8006ad2:	e173      	b.n	8006dbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 814f 	bne.w	8006d7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8148 	beq.w	8006d7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8141 	beq.w	8006d7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006afa:	2300      	movs	r3, #0
 8006afc:	60bb      	str	r3, [r7, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1a:	2b40      	cmp	r3, #64	@ 0x40
 8006b1c:	f040 80b6 	bne.w	8006c8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8145 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	f080 813e 	bcs.w	8006dc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b56:	f000 8088 	beq.w	8006c6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	330c      	adds	r3, #12
 8006b60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	330c      	adds	r3, #12
 8006b82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1d9      	bne.n	8006b5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3314      	adds	r3, #20
 8006bac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bb8:	f023 0301 	bic.w	r3, r3, #1
 8006bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3314      	adds	r3, #20
 8006bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006bce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e1      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3314      	adds	r3, #20
 8006be8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3314      	adds	r3, #20
 8006c02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e3      	bne.n	8006be2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c3a:	f023 0310 	bic.w	r3, r3, #16
 8006c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e3      	bne.n	8006c28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fc fa7d 	bl	8003164 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f8b7 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c86:	e09b      	b.n	8006dc0 <HAL_UART_IRQHandler+0x518>
 8006c88:	08006f85 	.word	0x08006f85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 808e 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8089 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006cd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e3      	bne.n	8006cb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3314      	adds	r3, #20
 8006cf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	f023 0301 	bic.w	r3, r3, #1
 8006d00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3314      	adds	r3, #20
 8006d0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e3      	bne.n	8006cea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0310 	bic.w	r3, r3, #16
 8006d46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d54:	61fa      	str	r2, [r7, #28]
 8006d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	69b9      	ldr	r1, [r7, #24]
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	617b      	str	r3, [r7, #20]
   return(result);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e3      	bne.n	8006d30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f83d 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d7a:	e023      	b.n	8006dc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <HAL_UART_IRQHandler+0x4f4>
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f909 	bl	8006fac <UART_Transmit_IT>
    return;
 8006d9a:	e014      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00e      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
 8006da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f949 	bl	800704c <UART_EndTransmit_IT>
    return;
 8006dba:	e004      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006dbc:	bf00      	nop
 8006dbe:	e002      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006dc4:	bf00      	nop
  }
}
 8006dc6:	37e8      	adds	r7, #232	@ 0xe8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e1c:	e03b      	b.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e24:	d037      	beq.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e26:	f7fb ffad 	bl	8002d84 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	6a3a      	ldr	r2, [r7, #32]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d302      	bcc.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e03a      	b.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d023      	beq.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b80      	cmp	r3, #128	@ 0x80
 8006e52:	d020      	beq.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b40      	cmp	r3, #64	@ 0x40
 8006e58:	d01d      	beq.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d116      	bne.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f81d 	bl	8006ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2208      	movs	r2, #8
 8006e88:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e00f      	b.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	bf0c      	ite	eq
 8006ea6:	2301      	moveq	r3, #1
 8006ea8:	2300      	movne	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d0b4      	beq.n	8006e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b095      	sub	sp, #84	@ 0x54
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	330c      	adds	r3, #12
 8006ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ee6:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e5      	bne.n	8006ec6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3314      	adds	r3, #20
 8006f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	f023 0301 	bic.w	r3, r3, #1
 8006f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3314      	adds	r3, #20
 8006f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e5      	bne.n	8006efa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d119      	bne.n	8006f6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	330c      	adds	r3, #12
 8006f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f023 0310 	bic.w	r3, r3, #16
 8006f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	330c      	adds	r3, #12
 8006f54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f56:	61ba      	str	r2, [r7, #24]
 8006f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6979      	ldr	r1, [r7, #20]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	613b      	str	r3, [r7, #16]
   return(result);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e5      	bne.n	8006f36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f78:	bf00      	nop
 8006f7a:	3754      	adds	r7, #84	@ 0x54
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff ff1e 	bl	8006de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa4:	bf00      	nop
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b21      	cmp	r3, #33	@ 0x21
 8006fbe:	d13e      	bne.n	800703e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc8:	d114      	bne.n	8006ff4 <UART_Transmit_IT+0x48>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d110      	bne.n	8006ff4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fe6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	621a      	str	r2, [r3, #32]
 8006ff2:	e008      	b.n	8007006 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	1c59      	adds	r1, r3, #1
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6211      	str	r1, [r2, #32]
 8006ffe:	781a      	ldrb	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29b      	uxth	r3, r3
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	4619      	mov	r1, r3
 8007014:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10f      	bne.n	800703a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007028:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007038:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	e000      	b.n	8007040 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800703e:	2302      	movs	r3, #2
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007062:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff fead 	bl	8006dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08c      	sub	sp, #48	@ 0x30
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b22      	cmp	r3, #34	@ 0x22
 800708e:	f040 80ae 	bne.w	80071ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800709a:	d117      	bne.n	80070cc <UART_Receive_IT+0x50>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d113      	bne.n	80070cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	1c9a      	adds	r2, r3, #2
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80070ca:	e026      	b.n	800711a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070de:	d007      	beq.n	80070f0 <UART_Receive_IT+0x74>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <UART_Receive_IT+0x82>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	e008      	b.n	8007110 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800710a:	b2da      	uxtb	r2, r3
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29b      	uxth	r3, r3
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4619      	mov	r1, r3
 8007128:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800712a:	2b00      	cmp	r3, #0
 800712c:	d15d      	bne.n	80071ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0220 	bic.w	r2, r2, #32
 800713c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800714c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695a      	ldr	r2, [r3, #20]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0201 	bic.w	r2, r2, #1
 800715c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007170:	2b01      	cmp	r3, #1
 8007172:	d135      	bne.n	80071e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	330c      	adds	r3, #12
 8007180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	613b      	str	r3, [r7, #16]
   return(result);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f023 0310 	bic.w	r3, r3, #16
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719a:	623a      	str	r2, [r7, #32]
 800719c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	69f9      	ldr	r1, [r7, #28]
 80071a0:	6a3a      	ldr	r2, [r7, #32]
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e5      	bne.n	800717a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d10a      	bne.n	80071d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff fe0b 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
 80071de:	e002      	b.n	80071e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7fa fa49 	bl	8001678 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e002      	b.n	80071f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e000      	b.n	80071f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071ee:	2302      	movs	r3, #2
  }
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3730      	adds	r7, #48	@ 0x30
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071fc:	b0c0      	sub	sp, #256	@ 0x100
 80071fe:	af00      	add	r7, sp, #0
 8007200:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007214:	68d9      	ldr	r1, [r3, #12]
 8007216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	ea40 0301 	orr.w	r3, r0, r1
 8007220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	431a      	orrs	r2, r3
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	431a      	orrs	r2, r3
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007250:	f021 010c 	bic.w	r1, r1, #12
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800725e:	430b      	orrs	r3, r1
 8007260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	6999      	ldr	r1, [r3, #24]
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	ea40 0301 	orr.w	r3, r0, r1
 800727e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b8f      	ldr	r3, [pc, #572]	@ (80074c4 <UART_SetConfig+0x2cc>)
 8007288:	429a      	cmp	r2, r3
 800728a:	d005      	beq.n	8007298 <UART_SetConfig+0xa0>
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b8d      	ldr	r3, [pc, #564]	@ (80074c8 <UART_SetConfig+0x2d0>)
 8007294:	429a      	cmp	r2, r3
 8007296:	d104      	bne.n	80072a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007298:	f7fd fd0a 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 800729c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072a0:	e003      	b.n	80072aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072a2:	f7fd fcf1 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 80072a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b4:	f040 810c 	bne.w	80074d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072ca:	4622      	mov	r2, r4
 80072cc:	462b      	mov	r3, r5
 80072ce:	1891      	adds	r1, r2, r2
 80072d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072d2:	415b      	adcs	r3, r3
 80072d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072da:	4621      	mov	r1, r4
 80072dc:	eb12 0801 	adds.w	r8, r2, r1
 80072e0:	4629      	mov	r1, r5
 80072e2:	eb43 0901 	adc.w	r9, r3, r1
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072fa:	4690      	mov	r8, r2
 80072fc:	4699      	mov	r9, r3
 80072fe:	4623      	mov	r3, r4
 8007300:	eb18 0303 	adds.w	r3, r8, r3
 8007304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007308:	462b      	mov	r3, r5
 800730a:	eb49 0303 	adc.w	r3, r9, r3
 800730e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800731e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007326:	460b      	mov	r3, r1
 8007328:	18db      	adds	r3, r3, r3
 800732a:	653b      	str	r3, [r7, #80]	@ 0x50
 800732c:	4613      	mov	r3, r2
 800732e:	eb42 0303 	adc.w	r3, r2, r3
 8007332:	657b      	str	r3, [r7, #84]	@ 0x54
 8007334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800733c:	f7f9 fca4 	bl	8000c88 <__aeabi_uldivmod>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4b61      	ldr	r3, [pc, #388]	@ (80074cc <UART_SetConfig+0x2d4>)
 8007346:	fba3 2302 	umull	r2, r3, r3, r2
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	011c      	lsls	r4, r3, #4
 800734e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007352:	2200      	movs	r2, #0
 8007354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007358:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800735c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007360:	4642      	mov	r2, r8
 8007362:	464b      	mov	r3, r9
 8007364:	1891      	adds	r1, r2, r2
 8007366:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007368:	415b      	adcs	r3, r3
 800736a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800736c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007370:	4641      	mov	r1, r8
 8007372:	eb12 0a01 	adds.w	sl, r2, r1
 8007376:	4649      	mov	r1, r9
 8007378:	eb43 0b01 	adc.w	fp, r3, r1
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007388:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800738c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007390:	4692      	mov	sl, r2
 8007392:	469b      	mov	fp, r3
 8007394:	4643      	mov	r3, r8
 8007396:	eb1a 0303 	adds.w	r3, sl, r3
 800739a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800739e:	464b      	mov	r3, r9
 80073a0:	eb4b 0303 	adc.w	r3, fp, r3
 80073a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073bc:	460b      	mov	r3, r1
 80073be:	18db      	adds	r3, r3, r3
 80073c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80073c2:	4613      	mov	r3, r2
 80073c4:	eb42 0303 	adc.w	r3, r2, r3
 80073c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073d2:	f7f9 fc59 	bl	8000c88 <__aeabi_uldivmod>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4611      	mov	r1, r2
 80073dc:	4b3b      	ldr	r3, [pc, #236]	@ (80074cc <UART_SetConfig+0x2d4>)
 80073de:	fba3 2301 	umull	r2, r3, r3, r1
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	2264      	movs	r2, #100	@ 0x64
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	1acb      	subs	r3, r1, r3
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073f2:	4b36      	ldr	r3, [pc, #216]	@ (80074cc <UART_SetConfig+0x2d4>)
 80073f4:	fba3 2302 	umull	r2, r3, r3, r2
 80073f8:	095b      	lsrs	r3, r3, #5
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007400:	441c      	add	r4, r3
 8007402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007406:	2200      	movs	r2, #0
 8007408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800740c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007410:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007414:	4642      	mov	r2, r8
 8007416:	464b      	mov	r3, r9
 8007418:	1891      	adds	r1, r2, r2
 800741a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800741c:	415b      	adcs	r3, r3
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007420:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007424:	4641      	mov	r1, r8
 8007426:	1851      	adds	r1, r2, r1
 8007428:	6339      	str	r1, [r7, #48]	@ 0x30
 800742a:	4649      	mov	r1, r9
 800742c:	414b      	adcs	r3, r1
 800742e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	f04f 0300 	mov.w	r3, #0
 8007438:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800743c:	4659      	mov	r1, fp
 800743e:	00cb      	lsls	r3, r1, #3
 8007440:	4651      	mov	r1, sl
 8007442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007446:	4651      	mov	r1, sl
 8007448:	00ca      	lsls	r2, r1, #3
 800744a:	4610      	mov	r0, r2
 800744c:	4619      	mov	r1, r3
 800744e:	4603      	mov	r3, r0
 8007450:	4642      	mov	r2, r8
 8007452:	189b      	adds	r3, r3, r2
 8007454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007458:	464b      	mov	r3, r9
 800745a:	460a      	mov	r2, r1
 800745c:	eb42 0303 	adc.w	r3, r2, r3
 8007460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007470:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007478:	460b      	mov	r3, r1
 800747a:	18db      	adds	r3, r3, r3
 800747c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800747e:	4613      	mov	r3, r2
 8007480:	eb42 0303 	adc.w	r3, r2, r3
 8007484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800748a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800748e:	f7f9 fbfb 	bl	8000c88 <__aeabi_uldivmod>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4b0d      	ldr	r3, [pc, #52]	@ (80074cc <UART_SetConfig+0x2d4>)
 8007498:	fba3 1302 	umull	r1, r3, r3, r2
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	2164      	movs	r1, #100	@ 0x64
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	3332      	adds	r3, #50	@ 0x32
 80074aa:	4a08      	ldr	r2, [pc, #32]	@ (80074cc <UART_SetConfig+0x2d4>)
 80074ac:	fba2 2303 	umull	r2, r3, r2, r3
 80074b0:	095b      	lsrs	r3, r3, #5
 80074b2:	f003 0207 	and.w	r2, r3, #7
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4422      	add	r2, r4
 80074be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074c0:	e106      	b.n	80076d0 <UART_SetConfig+0x4d8>
 80074c2:	bf00      	nop
 80074c4:	40011000 	.word	0x40011000
 80074c8:	40011400 	.word	0x40011400
 80074cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074e2:	4642      	mov	r2, r8
 80074e4:	464b      	mov	r3, r9
 80074e6:	1891      	adds	r1, r2, r2
 80074e8:	6239      	str	r1, [r7, #32]
 80074ea:	415b      	adcs	r3, r3
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074f2:	4641      	mov	r1, r8
 80074f4:	1854      	adds	r4, r2, r1
 80074f6:	4649      	mov	r1, r9
 80074f8:	eb43 0501 	adc.w	r5, r3, r1
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	00eb      	lsls	r3, r5, #3
 8007506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800750a:	00e2      	lsls	r2, r4, #3
 800750c:	4614      	mov	r4, r2
 800750e:	461d      	mov	r5, r3
 8007510:	4643      	mov	r3, r8
 8007512:	18e3      	adds	r3, r4, r3
 8007514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007518:	464b      	mov	r3, r9
 800751a:	eb45 0303 	adc.w	r3, r5, r3
 800751e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800752e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800753e:	4629      	mov	r1, r5
 8007540:	008b      	lsls	r3, r1, #2
 8007542:	4621      	mov	r1, r4
 8007544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007548:	4621      	mov	r1, r4
 800754a:	008a      	lsls	r2, r1, #2
 800754c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007550:	f7f9 fb9a 	bl	8000c88 <__aeabi_uldivmod>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4b60      	ldr	r3, [pc, #384]	@ (80076dc <UART_SetConfig+0x4e4>)
 800755a:	fba3 2302 	umull	r2, r3, r3, r2
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	011c      	lsls	r4, r3, #4
 8007562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007566:	2200      	movs	r2, #0
 8007568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800756c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007574:	4642      	mov	r2, r8
 8007576:	464b      	mov	r3, r9
 8007578:	1891      	adds	r1, r2, r2
 800757a:	61b9      	str	r1, [r7, #24]
 800757c:	415b      	adcs	r3, r3
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007584:	4641      	mov	r1, r8
 8007586:	1851      	adds	r1, r2, r1
 8007588:	6139      	str	r1, [r7, #16]
 800758a:	4649      	mov	r1, r9
 800758c:	414b      	adcs	r3, r1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800759c:	4659      	mov	r1, fp
 800759e:	00cb      	lsls	r3, r1, #3
 80075a0:	4651      	mov	r1, sl
 80075a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075a6:	4651      	mov	r1, sl
 80075a8:	00ca      	lsls	r2, r1, #3
 80075aa:	4610      	mov	r0, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	4603      	mov	r3, r0
 80075b0:	4642      	mov	r2, r8
 80075b2:	189b      	adds	r3, r3, r2
 80075b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075b8:	464b      	mov	r3, r9
 80075ba:	460a      	mov	r2, r1
 80075bc:	eb42 0303 	adc.w	r3, r2, r3
 80075c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075dc:	4649      	mov	r1, r9
 80075de:	008b      	lsls	r3, r1, #2
 80075e0:	4641      	mov	r1, r8
 80075e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075e6:	4641      	mov	r1, r8
 80075e8:	008a      	lsls	r2, r1, #2
 80075ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075ee:	f7f9 fb4b 	bl	8000c88 <__aeabi_uldivmod>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4611      	mov	r1, r2
 80075f8:	4b38      	ldr	r3, [pc, #224]	@ (80076dc <UART_SetConfig+0x4e4>)
 80075fa:	fba3 2301 	umull	r2, r3, r3, r1
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	2264      	movs	r2, #100	@ 0x64
 8007602:	fb02 f303 	mul.w	r3, r2, r3
 8007606:	1acb      	subs	r3, r1, r3
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	3332      	adds	r3, #50	@ 0x32
 800760c:	4a33      	ldr	r2, [pc, #204]	@ (80076dc <UART_SetConfig+0x4e4>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007618:	441c      	add	r4, r3
 800761a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800761e:	2200      	movs	r2, #0
 8007620:	673b      	str	r3, [r7, #112]	@ 0x70
 8007622:	677a      	str	r2, [r7, #116]	@ 0x74
 8007624:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	1891      	adds	r1, r2, r2
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	415b      	adcs	r3, r3
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007638:	4641      	mov	r1, r8
 800763a:	1851      	adds	r1, r2, r1
 800763c:	6039      	str	r1, [r7, #0]
 800763e:	4649      	mov	r1, r9
 8007640:	414b      	adcs	r3, r1
 8007642:	607b      	str	r3, [r7, #4]
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007650:	4659      	mov	r1, fp
 8007652:	00cb      	lsls	r3, r1, #3
 8007654:	4651      	mov	r1, sl
 8007656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765a:	4651      	mov	r1, sl
 800765c:	00ca      	lsls	r2, r1, #3
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	4603      	mov	r3, r0
 8007664:	4642      	mov	r2, r8
 8007666:	189b      	adds	r3, r3, r2
 8007668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800766a:	464b      	mov	r3, r9
 800766c:	460a      	mov	r2, r1
 800766e:	eb42 0303 	adc.w	r3, r2, r3
 8007672:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	663b      	str	r3, [r7, #96]	@ 0x60
 800767e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800768c:	4649      	mov	r1, r9
 800768e:	008b      	lsls	r3, r1, #2
 8007690:	4641      	mov	r1, r8
 8007692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007696:	4641      	mov	r1, r8
 8007698:	008a      	lsls	r2, r1, #2
 800769a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800769e:	f7f9 faf3 	bl	8000c88 <__aeabi_uldivmod>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4b0d      	ldr	r3, [pc, #52]	@ (80076dc <UART_SetConfig+0x4e4>)
 80076a8:	fba3 1302 	umull	r1, r3, r3, r2
 80076ac:	095b      	lsrs	r3, r3, #5
 80076ae:	2164      	movs	r1, #100	@ 0x64
 80076b0:	fb01 f303 	mul.w	r3, r1, r3
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	3332      	adds	r3, #50	@ 0x32
 80076ba:	4a08      	ldr	r2, [pc, #32]	@ (80076dc <UART_SetConfig+0x4e4>)
 80076bc:	fba2 2303 	umull	r2, r3, r2, r3
 80076c0:	095b      	lsrs	r3, r3, #5
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4422      	add	r2, r4
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	bf00      	nop
 80076d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076d6:	46bd      	mov	sp, r7
 80076d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076dc:	51eb851f 	.word	0x51eb851f

080076e0 <__NVIC_SetPriority>:
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	db0a      	blt.n	800770a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	490c      	ldr	r1, [pc, #48]	@ (800772c <__NVIC_SetPriority+0x4c>)
 80076fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fe:	0112      	lsls	r2, r2, #4
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	440b      	add	r3, r1
 8007704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007708:	e00a      	b.n	8007720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	b2da      	uxtb	r2, r3
 800770e:	4908      	ldr	r1, [pc, #32]	@ (8007730 <__NVIC_SetPriority+0x50>)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	3b04      	subs	r3, #4
 8007718:	0112      	lsls	r2, r2, #4
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	440b      	add	r3, r1
 800771e:	761a      	strb	r2, [r3, #24]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	e000e100 	.word	0xe000e100
 8007730:	e000ed00 	.word	0xe000ed00

08007734 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007738:	2100      	movs	r1, #0
 800773a:	f06f 0004 	mvn.w	r0, #4
 800773e:	f7ff ffcf 	bl	80076e0 <__NVIC_SetPriority>
#endif
}
 8007742:	bf00      	nop
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800774e:	f3ef 8305 	mrs	r3, IPSR
 8007752:	603b      	str	r3, [r7, #0]
  return(result);
 8007754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800775a:	f06f 0305 	mvn.w	r3, #5
 800775e:	607b      	str	r3, [r7, #4]
 8007760:	e00c      	b.n	800777c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007762:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <osKernelInitialize+0x44>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d105      	bne.n	8007776 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800776a:	4b08      	ldr	r3, [pc, #32]	@ (800778c <osKernelInitialize+0x44>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007770:	2300      	movs	r3, #0
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	e002      	b.n	800777c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007776:	f04f 33ff 	mov.w	r3, #4294967295
 800777a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800777c:	687b      	ldr	r3, [r7, #4]
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20000624 	.word	0x20000624

08007790 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007796:	f3ef 8305 	mrs	r3, IPSR
 800779a:	603b      	str	r3, [r7, #0]
  return(result);
 800779c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80077a2:	f06f 0305 	mvn.w	r3, #5
 80077a6:	607b      	str	r3, [r7, #4]
 80077a8:	e010      	b.n	80077cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80077aa:	4b0b      	ldr	r3, [pc, #44]	@ (80077d8 <osKernelStart+0x48>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d109      	bne.n	80077c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80077b2:	f7ff ffbf 	bl	8007734 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80077b6:	4b08      	ldr	r3, [pc, #32]	@ (80077d8 <osKernelStart+0x48>)
 80077b8:	2202      	movs	r2, #2
 80077ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80077bc:	f001 fa68 	bl	8008c90 <vTaskStartScheduler>
      stat = osOK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	607b      	str	r3, [r7, #4]
 80077c4:	e002      	b.n	80077cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80077c6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077cc:	687b      	ldr	r3, [r7, #4]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20000624 	.word	0x20000624

080077dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08e      	sub	sp, #56	@ 0x38
 80077e0:	af04      	add	r7, sp, #16
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ec:	f3ef 8305 	mrs	r3, IPSR
 80077f0:	617b      	str	r3, [r7, #20]
  return(result);
 80077f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d17e      	bne.n	80078f6 <osThreadNew+0x11a>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d07b      	beq.n	80078f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80077fe:	2380      	movs	r3, #128	@ 0x80
 8007800:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007802:	2318      	movs	r3, #24
 8007804:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800780a:	f04f 33ff 	mov.w	r3, #4294967295
 800780e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d045      	beq.n	80078a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <osThreadNew+0x48>
        name = attr->name;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <osThreadNew+0x6e>
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	2b38      	cmp	r3, #56	@ 0x38
 800783c:	d805      	bhi.n	800784a <osThreadNew+0x6e>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <osThreadNew+0x72>
        return (NULL);
 800784a:	2300      	movs	r3, #0
 800784c:	e054      	b.n	80078f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	089b      	lsrs	r3, r3, #2
 800785c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00e      	beq.n	8007884 <osThreadNew+0xa8>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	2b5b      	cmp	r3, #91	@ 0x5b
 800786c:	d90a      	bls.n	8007884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007872:	2b00      	cmp	r3, #0
 8007874:	d006      	beq.n	8007884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <osThreadNew+0xa8>
        mem = 1;
 800787e:	2301      	movs	r3, #1
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	e010      	b.n	80078a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10c      	bne.n	80078a6 <osThreadNew+0xca>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d108      	bne.n	80078a6 <osThreadNew+0xca>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <osThreadNew+0xca>
          mem = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	e001      	b.n	80078a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d110      	bne.n	80078ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078b4:	9202      	str	r2, [sp, #8]
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	6a3a      	ldr	r2, [r7, #32]
 80078c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f001 f808 	bl	80088d8 <xTaskCreateStatic>
 80078c8:	4603      	mov	r3, r0
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	e013      	b.n	80078f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d110      	bne.n	80078f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	f107 0310 	add.w	r3, r7, #16
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f001 f856 	bl	8008998 <xTaskCreate>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d001      	beq.n	80078f6 <osThreadNew+0x11a>
            hTask = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80078f6:	693b      	ldr	r3, [r7, #16]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3728      	adds	r7, #40	@ 0x28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007908:	f3ef 8305 	mrs	r3, IPSR
 800790c:	60bb      	str	r3, [r7, #8]
  return(result);
 800790e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <osDelay+0x1c>
    stat = osErrorISR;
 8007914:	f06f 0305 	mvn.w	r3, #5
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	e007      	b.n	800792c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 f97c 	bl	8008c24 <vTaskDelay>
    }
  }

  return (stat);
 800792c:	68fb      	ldr	r3, [r7, #12]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007936:	b580      	push	{r7, lr}
 8007938:	b08a      	sub	sp, #40	@ 0x28
 800793a:	af02      	add	r7, sp, #8
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007946:	f3ef 8305 	mrs	r3, IPSR
 800794a:	613b      	str	r3, [r7, #16]
  return(result);
 800794c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800794e:	2b00      	cmp	r3, #0
 8007950:	d15f      	bne.n	8007a12 <osMessageQueueNew+0xdc>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d05c      	beq.n	8007a12 <osMessageQueueNew+0xdc>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d059      	beq.n	8007a12 <osMessageQueueNew+0xdc>
    mem = -1;
 800795e:	f04f 33ff 	mov.w	r3, #4294967295
 8007962:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d029      	beq.n	80079be <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d012      	beq.n	8007998 <osMessageQueueNew+0x62>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	2b4f      	cmp	r3, #79	@ 0x4f
 8007978:	d90e      	bls.n	8007998 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	429a      	cmp	r2, r3
 8007990:	d302      	bcc.n	8007998 <osMessageQueueNew+0x62>
        mem = 1;
 8007992:	2301      	movs	r3, #1
 8007994:	61bb      	str	r3, [r7, #24]
 8007996:	e014      	b.n	80079c2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d110      	bne.n	80079c2 <osMessageQueueNew+0x8c>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10c      	bne.n	80079c2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d108      	bne.n	80079c2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <osMessageQueueNew+0x8c>
          mem = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	e001      	b.n	80079c2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d10b      	bne.n	80079e0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	2100      	movs	r1, #0
 80079d2:	9100      	str	r1, [sp, #0]
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fa30 	bl	8007e3c <xQueueGenericCreateStatic>
 80079dc:	61f8      	str	r0, [r7, #28]
 80079de:	e008      	b.n	80079f2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80079e6:	2200      	movs	r2, #0
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 faa3 	bl	8007f36 <xQueueGenericCreate>
 80079f0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00c      	beq.n	8007a12 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <osMessageQueueNew+0xd0>
        name = attr->name;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	e001      	b.n	8007a0a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007a0a:	6979      	ldr	r1, [r7, #20]
 8007a0c:	69f8      	ldr	r0, [r7, #28]
 8007a0e:	f000 ff05 	bl	800881c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007a12:	69fb      	ldr	r3, [r7, #28]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3720      	adds	r7, #32
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a34:	f3ef 8305 	mrs	r3, IPSR
 8007a38:	617b      	str	r3, [r7, #20]
  return(result);
 8007a3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d028      	beq.n	8007a92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <osMessageQueuePut+0x36>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <osMessageQueuePut+0x36>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007a52:	f06f 0303 	mvn.w	r3, #3
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	e038      	b.n	8007acc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007a5e:	f107 0210 	add.w	r2, r7, #16
 8007a62:	2300      	movs	r3, #0
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	69b8      	ldr	r0, [r7, #24]
 8007a68:	f000 fbc6 	bl	80081f8 <xQueueGenericSendFromISR>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d003      	beq.n	8007a7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007a72:	f06f 0302 	mvn.w	r3, #2
 8007a76:	61fb      	str	r3, [r7, #28]
 8007a78:	e028      	b.n	8007acc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d025      	beq.n	8007acc <osMessageQueuePut+0xb0>
 8007a80:	4b15      	ldr	r3, [pc, #84]	@ (8007ad8 <osMessageQueuePut+0xbc>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	e01c      	b.n	8007acc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <osMessageQueuePut+0x82>
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007a9e:	f06f 0303 	mvn.w	r3, #3
 8007aa2:	61fb      	str	r3, [r7, #28]
 8007aa4:	e012      	b.n	8007acc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	69b8      	ldr	r0, [r7, #24]
 8007aae:	f000 faa1 	bl	8007ff4 <xQueueGenericSend>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d009      	beq.n	8007acc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007abe:	f06f 0301 	mvn.w	r3, #1
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	e002      	b.n	8007acc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007ac6:	f06f 0302 	mvn.w	r3, #2
 8007aca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007acc:	69fb      	ldr	r3, [r7, #28]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007af2:	f3ef 8305 	mrs	r3, IPSR
 8007af6:	617b      	str	r3, [r7, #20]
  return(result);
 8007af8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d028      	beq.n	8007b50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <osMessageQueueGet+0x34>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <osMessageQueueGet+0x34>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007b10:	f06f 0303 	mvn.w	r3, #3
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	e037      	b.n	8007b88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007b1c:	f107 0310 	add.w	r3, r7, #16
 8007b20:	461a      	mov	r2, r3
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	69b8      	ldr	r0, [r7, #24]
 8007b26:	f000 fce7 	bl	80084f8 <xQueueReceiveFromISR>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d003      	beq.n	8007b38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007b30:	f06f 0302 	mvn.w	r3, #2
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	e027      	b.n	8007b88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d024      	beq.n	8007b88 <osMessageQueueGet+0xac>
 8007b3e:	4b15      	ldr	r3, [pc, #84]	@ (8007b94 <osMessageQueueGet+0xb8>)
 8007b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	e01b      	b.n	8007b88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <osMessageQueueGet+0x80>
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007b5c:	f06f 0303 	mvn.w	r3, #3
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	e011      	b.n	8007b88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	69b8      	ldr	r0, [r7, #24]
 8007b6a:	f000 fbe3 	bl	8008334 <xQueueReceive>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d009      	beq.n	8007b88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007b7a:	f06f 0301 	mvn.w	r3, #1
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	e002      	b.n	8007b88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007b82:	f06f 0302 	mvn.w	r3, #2
 8007b86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007b88:	69fb      	ldr	r3, [r7, #28]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	e000ed04 	.word	0xe000ed04

08007b98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a07      	ldr	r2, [pc, #28]	@ (8007bc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ba8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	4a06      	ldr	r2, [pc, #24]	@ (8007bc8 <vApplicationGetIdleTaskMemory+0x30>)
 8007bae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2280      	movs	r2, #128	@ 0x80
 8007bb4:	601a      	str	r2, [r3, #0]
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000628 	.word	0x20000628
 8007bc8:	20000684 	.word	0x20000684

08007bcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4a07      	ldr	r2, [pc, #28]	@ (8007bf8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007bdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	4a06      	ldr	r2, [pc, #24]	@ (8007bfc <vApplicationGetTimerTaskMemory+0x30>)
 8007be2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bea:	601a      	str	r2, [r3, #0]
}
 8007bec:	bf00      	nop
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	20000884 	.word	0x20000884
 8007bfc:	200008e0 	.word	0x200008e0

08007c00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f103 0208 	add.w	r2, r3, #8
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295
 8007c18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f103 0208 	add.w	r2, r3, #8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f103 0208 	add.w	r2, r3, #8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
}
 8007c96:	bf00      	nop
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb8:	d103      	bne.n	8007cc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	e00c      	b.n	8007cdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e002      	b.n	8007cd0 <vListInsert+0x2e>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d2f6      	bcs.n	8007cca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	601a      	str	r2, [r3, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	6892      	ldr	r2, [r2, #8]
 8007d2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6852      	ldr	r2, [r2, #4]
 8007d34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d103      	bne.n	8007d48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	1e5a      	subs	r2, r3, #1
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10b      	bne.n	8007d94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d8e:	bf00      	nop
 8007d90:	bf00      	nop
 8007d92:	e7fd      	b.n	8007d90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d94:	f002 fa18 	bl	800a1c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da0:	68f9      	ldr	r1, [r7, #12]
 8007da2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007da4:	fb01 f303 	mul.w	r3, r1, r3
 8007da8:	441a      	add	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007dca:	fb01 f303 	mul.w	r3, r1, r3
 8007dce:	441a      	add	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	22ff      	movs	r2, #255	@ 0xff
 8007dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	22ff      	movs	r2, #255	@ 0xff
 8007de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d114      	bne.n	8007e14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01a      	beq.n	8007e28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3310      	adds	r3, #16
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 f9d8 	bl	80091ac <xTaskRemoveFromEventList>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d012      	beq.n	8007e28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e02:	4b0d      	ldr	r3, [pc, #52]	@ (8007e38 <xQueueGenericReset+0xd0>)
 8007e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	e009      	b.n	8007e28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3310      	adds	r3, #16
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff fef1 	bl	8007c00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3324      	adds	r3, #36	@ 0x24
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff feec 	bl	8007c00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e28:	f002 fa00 	bl	800a22c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e2c:	2301      	movs	r3, #1
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08e      	sub	sp, #56	@ 0x38
 8007e40:	af02      	add	r7, sp, #8
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	e7fd      	b.n	8007e64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <xQueueGenericCreateStatic+0x56>
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <xQueueGenericCreateStatic+0x5a>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e000      	b.n	8007e98 <xQueueGenericCreateStatic+0x5c>
 8007e96:	2300      	movs	r3, #0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10b      	bne.n	8007eb4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	623b      	str	r3, [r7, #32]
}
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	e7fd      	b.n	8007eb0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d102      	bne.n	8007ec0 <xQueueGenericCreateStatic+0x84>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <xQueueGenericCreateStatic+0x88>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <xQueueGenericCreateStatic+0x8a>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	61fb      	str	r3, [r7, #28]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ee2:	2350      	movs	r3, #80	@ 0x50
 8007ee4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b50      	cmp	r3, #80	@ 0x50
 8007eea:	d00b      	beq.n	8007f04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	61bb      	str	r3, [r7, #24]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00d      	beq.n	8007f2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	4613      	mov	r3, r2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 f840 	bl	8007fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3730      	adds	r7, #48	@ 0x30
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b08a      	sub	sp, #40	@ 0x28
 8007f3a:	af02      	add	r7, sp, #8
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	4613      	mov	r3, r2
 8007f42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10b      	bne.n	8007f62 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	613b      	str	r3, [r7, #16]
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	e7fd      	b.n	8007f5e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	fb02 f303 	mul.w	r3, r2, r3
 8007f6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	3350      	adds	r3, #80	@ 0x50
 8007f70:	4618      	mov	r0, r3
 8007f72:	f002 fa4b 	bl	800a40c <pvPortMalloc>
 8007f76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d011      	beq.n	8007fa2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	3350      	adds	r3, #80	@ 0x50
 8007f86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f90:	79fa      	ldrb	r2, [r7, #7]
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	4613      	mov	r3, r2
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f805 	bl	8007fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3720      	adds	r7, #32
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d103      	bne.n	8007fc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	e002      	b.n	8007fce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fda:	2101      	movs	r1, #1
 8007fdc:	69b8      	ldr	r0, [r7, #24]
 8007fde:	f7ff fec3 	bl	8007d68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fea:	bf00      	nop
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08e      	sub	sp, #56	@ 0x38
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008002:	2300      	movs	r3, #0
 8008004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800800a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10b      	bne.n	8008028 <xQueueGenericSend+0x34>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008022:	bf00      	nop
 8008024:	bf00      	nop
 8008026:	e7fd      	b.n	8008024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d103      	bne.n	8008036 <xQueueGenericSend+0x42>
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <xQueueGenericSend+0x46>
 8008036:	2301      	movs	r3, #1
 8008038:	e000      	b.n	800803c <xQueueGenericSend+0x48>
 800803a:	2300      	movs	r3, #0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10b      	bne.n	8008058 <xQueueGenericSend+0x64>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d103      	bne.n	8008066 <xQueueGenericSend+0x72>
 800805e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008062:	2b01      	cmp	r3, #1
 8008064:	d101      	bne.n	800806a <xQueueGenericSend+0x76>
 8008066:	2301      	movs	r3, #1
 8008068:	e000      	b.n	800806c <xQueueGenericSend+0x78>
 800806a:	2300      	movs	r3, #0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10b      	bne.n	8008088 <xQueueGenericSend+0x94>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	623b      	str	r3, [r7, #32]
}
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	e7fd      	b.n	8008084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008088:	f001 fa50 	bl	800952c <xTaskGetSchedulerState>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d102      	bne.n	8008098 <xQueueGenericSend+0xa4>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <xQueueGenericSend+0xa8>
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <xQueueGenericSend+0xaa>
 800809c:	2300      	movs	r3, #0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <xQueueGenericSend+0xc6>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	61fb      	str	r3, [r7, #28]
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
 80080b8:	e7fd      	b.n	80080b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ba:	f002 f885 	bl	800a1c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d302      	bcc.n	80080d0 <xQueueGenericSend+0xdc>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d129      	bne.n	8008124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080d6:	f000 fa91 	bl	80085fc <prvCopyDataToQueue>
 80080da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d010      	beq.n	8008106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	3324      	adds	r3, #36	@ 0x24
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 f85f 	bl	80091ac <xTaskRemoveFromEventList>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d013      	beq.n	800811c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080f4:	4b3f      	ldr	r3, [pc, #252]	@ (80081f4 <xQueueGenericSend+0x200>)
 80080f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	e00a      	b.n	800811c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800810c:	4b39      	ldr	r3, [pc, #228]	@ (80081f4 <xQueueGenericSend+0x200>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800811c:	f002 f886 	bl	800a22c <vPortExitCritical>
				return pdPASS;
 8008120:	2301      	movs	r3, #1
 8008122:	e063      	b.n	80081ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800812a:	f002 f87f 	bl	800a22c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800812e:	2300      	movs	r3, #0
 8008130:	e05c      	b.n	80081ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008138:	f107 0314 	add.w	r3, r7, #20
 800813c:	4618      	mov	r0, r3
 800813e:	f001 f899 	bl	8009274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008142:	2301      	movs	r3, #1
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008146:	f002 f871 	bl	800a22c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800814a:	f000 fe09 	bl	8008d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800814e:	f002 f83b 	bl	800a1c8 <vPortEnterCritical>
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008158:	b25b      	sxtb	r3, r3
 800815a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815e:	d103      	bne.n	8008168 <xQueueGenericSend+0x174>
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800816e:	b25b      	sxtb	r3, r3
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d103      	bne.n	800817e <xQueueGenericSend+0x18a>
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800817e:	f002 f855 	bl	800a22c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008182:	1d3a      	adds	r2, r7, #4
 8008184:	f107 0314 	add.w	r3, r7, #20
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f001 f888 	bl	80092a0 <xTaskCheckForTimeOut>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d124      	bne.n	80081e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008198:	f000 fb28 	bl	80087ec <prvIsQueueFull>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d018      	beq.n	80081d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a4:	3310      	adds	r3, #16
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 ffac 	bl	8009108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081b2:	f000 fab3 	bl	800871c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081b6:	f000 fde1 	bl	8008d7c <xTaskResumeAll>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f47f af7c 	bne.w	80080ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80081c2:	4b0c      	ldr	r3, [pc, #48]	@ (80081f4 <xQueueGenericSend+0x200>)
 80081c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	e772      	b.n	80080ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081d6:	f000 faa1 	bl	800871c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081da:	f000 fdcf 	bl	8008d7c <xTaskResumeAll>
 80081de:	e76c      	b.n	80080ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081e2:	f000 fa9b 	bl	800871c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081e6:	f000 fdc9 	bl	8008d7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3738      	adds	r7, #56	@ 0x38
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	e000ed04 	.word	0xe000ed04

080081f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b090      	sub	sp, #64	@ 0x40
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800820a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10b      	bne.n	8008228 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d103      	bne.n	8008236 <xQueueGenericSendFromISR+0x3e>
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <xQueueGenericSendFromISR+0x42>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <xQueueGenericSendFromISR+0x44>
 800823a:	2300      	movs	r3, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10b      	bne.n	8008258 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d103      	bne.n	8008266 <xQueueGenericSendFromISR+0x6e>
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <xQueueGenericSendFromISR+0x72>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <xQueueGenericSendFromISR+0x74>
 800826a:	2300      	movs	r3, #0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10b      	bne.n	8008288 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	623b      	str	r3, [r7, #32]
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	e7fd      	b.n	8008284 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008288:	f002 f87e 	bl	800a388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800828c:	f3ef 8211 	mrs	r2, BASEPRI
 8008290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	61fa      	str	r2, [r7, #28]
 80082a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d302      	bcc.n	80082ba <xQueueGenericSendFromISR+0xc2>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d12f      	bne.n	800831a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80082d0:	f000 f994 	bl	80085fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082dc:	d112      	bne.n	8008304 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d016      	beq.n	8008314 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e8:	3324      	adds	r3, #36	@ 0x24
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 ff5e 	bl	80091ac <xTaskRemoveFromEventList>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00e      	beq.n	8008314 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e007      	b.n	8008314 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008308:	3301      	adds	r3, #1
 800830a:	b2db      	uxtb	r3, r3
 800830c:	b25a      	sxtb	r2, r3
 800830e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008314:	2301      	movs	r3, #1
 8008316:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008318:	e001      	b.n	800831e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800831a:	2300      	movs	r3, #0
 800831c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800831e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008320:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008328:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800832a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800832c:	4618      	mov	r0, r3
 800832e:	3740      	adds	r7, #64	@ 0x40
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08c      	sub	sp, #48	@ 0x30
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008340:	2300      	movs	r3, #0
 8008342:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10b      	bne.n	8008366 <xQueueReceive+0x32>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	623b      	str	r3, [r7, #32]
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	e7fd      	b.n	8008362 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d103      	bne.n	8008374 <xQueueReceive+0x40>
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <xQueueReceive+0x44>
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <xQueueReceive+0x46>
 8008378:	2300      	movs	r3, #0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <xQueueReceive+0x62>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	61fb      	str	r3, [r7, #28]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008396:	f001 f8c9 	bl	800952c <xTaskGetSchedulerState>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <xQueueReceive+0x72>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <xQueueReceive+0x76>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <xQueueReceive+0x78>
 80083aa:	2300      	movs	r3, #0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10b      	bne.n	80083c8 <xQueueReceive+0x94>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	61bb      	str	r3, [r7, #24]
}
 80083c2:	bf00      	nop
 80083c4:	bf00      	nop
 80083c6:	e7fd      	b.n	80083c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083c8:	f001 fefe 	bl	800a1c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01f      	beq.n	8008418 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083dc:	f000 f978 	bl	80086d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e2:	1e5a      	subs	r2, r3, #1
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00f      	beq.n	8008410 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	3310      	adds	r3, #16
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fed9 	bl	80091ac <xTaskRemoveFromEventList>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d007      	beq.n	8008410 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008400:	4b3c      	ldr	r3, [pc, #240]	@ (80084f4 <xQueueReceive+0x1c0>)
 8008402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008410:	f001 ff0c 	bl	800a22c <vPortExitCritical>
				return pdPASS;
 8008414:	2301      	movs	r3, #1
 8008416:	e069      	b.n	80084ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d103      	bne.n	8008426 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800841e:	f001 ff05 	bl	800a22c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008422:	2300      	movs	r3, #0
 8008424:	e062      	b.n	80084ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d106      	bne.n	800843a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800842c:	f107 0310 	add.w	r3, r7, #16
 8008430:	4618      	mov	r0, r3
 8008432:	f000 ff1f 	bl	8009274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008436:	2301      	movs	r3, #1
 8008438:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800843a:	f001 fef7 	bl	800a22c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800843e:	f000 fc8f 	bl	8008d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008442:	f001 fec1 	bl	800a1c8 <vPortEnterCritical>
 8008446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800844c:	b25b      	sxtb	r3, r3
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008452:	d103      	bne.n	800845c <xQueueReceive+0x128>
 8008454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800845c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008462:	b25b      	sxtb	r3, r3
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008468:	d103      	bne.n	8008472 <xQueueReceive+0x13e>
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008472:	f001 fedb 	bl	800a22c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008476:	1d3a      	adds	r2, r7, #4
 8008478:	f107 0310 	add.w	r3, r7, #16
 800847c:	4611      	mov	r1, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f000 ff0e 	bl	80092a0 <xTaskCheckForTimeOut>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d123      	bne.n	80084d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800848a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800848c:	f000 f998 	bl	80087c0 <prvIsQueueEmpty>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d017      	beq.n	80084c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008498:	3324      	adds	r3, #36	@ 0x24
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fe32 	bl	8009108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a6:	f000 f939 	bl	800871c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084aa:	f000 fc67 	bl	8008d7c <xTaskResumeAll>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d189      	bne.n	80083c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80084b4:	4b0f      	ldr	r3, [pc, #60]	@ (80084f4 <xQueueReceive+0x1c0>)
 80084b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	e780      	b.n	80083c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084c8:	f000 f928 	bl	800871c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084cc:	f000 fc56 	bl	8008d7c <xTaskResumeAll>
 80084d0:	e77a      	b.n	80083c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084d4:	f000 f922 	bl	800871c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084d8:	f000 fc50 	bl	8008d7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084de:	f000 f96f 	bl	80087c0 <prvIsQueueEmpty>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f43f af6f 	beq.w	80083c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3730      	adds	r7, #48	@ 0x30
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08e      	sub	sp, #56	@ 0x38
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10b      	bne.n	8008526 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	623b      	str	r3, [r7, #32]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d103      	bne.n	8008534 <xQueueReceiveFromISR+0x3c>
 800852c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <xQueueReceiveFromISR+0x40>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <xQueueReceiveFromISR+0x42>
 8008538:	2300      	movs	r3, #0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10b      	bne.n	8008556 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	61fb      	str	r3, [r7, #28]
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	e7fd      	b.n	8008552 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008556:	f001 ff17 	bl	800a388 <vPortValidateInterruptPriority>
	__asm volatile
 800855a:	f3ef 8211 	mrs	r2, BASEPRI
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	61ba      	str	r2, [r7, #24]
 8008570:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008572:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008574:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800857c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d02f      	beq.n	80085e2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008590:	f000 f89e 	bl	80086d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008596:	1e5a      	subs	r2, r3, #1
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800859c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d112      	bne.n	80085cc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d016      	beq.n	80085dc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	3310      	adds	r3, #16
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fdfa 	bl	80091ac <xTaskRemoveFromEventList>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00e      	beq.n	80085dc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	e007      	b.n	80085dc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80085cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085d0:	3301      	adds	r3, #1
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	b25a      	sxtb	r2, r3
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80085dc:	2301      	movs	r3, #1
 80085de:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e0:	e001      	b.n	80085e6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f383 8811 	msr	BASEPRI, r3
}
 80085f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3738      	adds	r7, #56	@ 0x38
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008610:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10d      	bne.n	8008636 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d14d      	bne.n	80086be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	4618      	mov	r0, r3
 8008628:	f000 ff9e 	bl	8009568 <xTaskPriorityDisinherit>
 800862c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	609a      	str	r2, [r3, #8]
 8008634:	e043      	b.n	80086be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d119      	bne.n	8008670 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6858      	ldr	r0, [r3, #4]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008644:	461a      	mov	r2, r3
 8008646:	68b9      	ldr	r1, [r7, #8]
 8008648:	f003 f85b 	bl	800b702 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008654:	441a      	add	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	429a      	cmp	r2, r3
 8008664:	d32b      	bcc.n	80086be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	605a      	str	r2, [r3, #4]
 800866e:	e026      	b.n	80086be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68d8      	ldr	r0, [r3, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008678:	461a      	mov	r2, r3
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	f003 f841 	bl	800b702 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008688:	425b      	negs	r3, r3
 800868a:	441a      	add	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d207      	bcs.n	80086ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a4:	425b      	negs	r3, r3
 80086a6:	441a      	add	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d105      	bne.n	80086be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086c6:	697b      	ldr	r3, [r7, #20]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d018      	beq.n	8008714 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ea:	441a      	add	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d303      	bcc.n	8008704 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68d9      	ldr	r1, [r3, #12]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870c:	461a      	mov	r2, r3
 800870e:	6838      	ldr	r0, [r7, #0]
 8008710:	f002 fff7 	bl	800b702 <memcpy>
	}
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008724:	f001 fd50 	bl	800a1c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800872e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008730:	e011      	b.n	8008756 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d012      	beq.n	8008760 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3324      	adds	r3, #36	@ 0x24
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fd34 	bl	80091ac <xTaskRemoveFromEventList>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800874a:	f000 fe0d 	bl	8009368 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	3b01      	subs	r3, #1
 8008752:	b2db      	uxtb	r3, r3
 8008754:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800875a:	2b00      	cmp	r3, #0
 800875c:	dce9      	bgt.n	8008732 <prvUnlockQueue+0x16>
 800875e:	e000      	b.n	8008762 <prvUnlockQueue+0x46>
					break;
 8008760:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	22ff      	movs	r2, #255	@ 0xff
 8008766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800876a:	f001 fd5f 	bl	800a22c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800876e:	f001 fd2b 	bl	800a1c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008778:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800877a:	e011      	b.n	80087a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d012      	beq.n	80087aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3310      	adds	r3, #16
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fd0f 	bl	80091ac <xTaskRemoveFromEventList>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008794:	f000 fde8 	bl	8009368 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	3b01      	subs	r3, #1
 800879c:	b2db      	uxtb	r3, r3
 800879e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dce9      	bgt.n	800877c <prvUnlockQueue+0x60>
 80087a8:	e000      	b.n	80087ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	22ff      	movs	r2, #255	@ 0xff
 80087b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087b4:	f001 fd3a 	bl	800a22c <vPortExitCritical>
}
 80087b8:	bf00      	nop
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087c8:	f001 fcfe 	bl	800a1c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d102      	bne.n	80087da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087d4:	2301      	movs	r3, #1
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	e001      	b.n	80087de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087da:	2300      	movs	r3, #0
 80087dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087de:	f001 fd25 	bl	800a22c <vPortExitCritical>

	return xReturn;
 80087e2:	68fb      	ldr	r3, [r7, #12]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087f4:	f001 fce8 	bl	800a1c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008800:	429a      	cmp	r2, r3
 8008802:	d102      	bne.n	800880a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008804:	2301      	movs	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	e001      	b.n	800880e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800880a:	2300      	movs	r3, #0
 800880c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800880e:	f001 fd0d 	bl	800a22c <vPortExitCritical>

	return xReturn;
 8008812:	68fb      	ldr	r3, [r7, #12]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008826:	2300      	movs	r3, #0
 8008828:	60fb      	str	r3, [r7, #12]
 800882a:	e014      	b.n	8008856 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800882c:	4a0f      	ldr	r2, [pc, #60]	@ (800886c <vQueueAddToRegistry+0x50>)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10b      	bne.n	8008850 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008838:	490c      	ldr	r1, [pc, #48]	@ (800886c <vQueueAddToRegistry+0x50>)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008842:	4a0a      	ldr	r2, [pc, #40]	@ (800886c <vQueueAddToRegistry+0x50>)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	4413      	add	r3, r2
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800884e:	e006      	b.n	800885e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b07      	cmp	r3, #7
 800885a:	d9e7      	bls.n	800882c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	20000ce0 	.word	0x20000ce0

08008870 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008880:	f001 fca2 	bl	800a1c8 <vPortEnterCritical>
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800888a:	b25b      	sxtb	r3, r3
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d103      	bne.n	800889a <vQueueWaitForMessageRestricted+0x2a>
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088a0:	b25b      	sxtb	r3, r3
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a6:	d103      	bne.n	80088b0 <vQueueWaitForMessageRestricted+0x40>
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088b0:	f001 fcbc 	bl	800a22c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	3324      	adds	r3, #36	@ 0x24
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 fc45 	bl	8009154 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088ca:	6978      	ldr	r0, [r7, #20]
 80088cc:	f7ff ff26 	bl	800871c <prvUnlockQueue>
	}
 80088d0:	bf00      	nop
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08e      	sub	sp, #56	@ 0x38
 80088dc:	af04      	add	r7, sp, #16
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10b      	bne.n	8008904 <xTaskCreateStatic+0x2c>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	623b      	str	r3, [r7, #32]
}
 80088fe:	bf00      	nop
 8008900:	bf00      	nop
 8008902:	e7fd      	b.n	8008900 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10b      	bne.n	8008922 <xTaskCreateStatic+0x4a>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	61fb      	str	r3, [r7, #28]
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	e7fd      	b.n	800891e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008922:	235c      	movs	r3, #92	@ 0x5c
 8008924:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b5c      	cmp	r3, #92	@ 0x5c
 800892a:	d00b      	beq.n	8008944 <xTaskCreateStatic+0x6c>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	61bb      	str	r3, [r7, #24]
}
 800893e:	bf00      	nop
 8008940:	bf00      	nop
 8008942:	e7fd      	b.n	8008940 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008944:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01e      	beq.n	800898a <xTaskCreateStatic+0xb2>
 800894c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01b      	beq.n	800898a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800895a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	2202      	movs	r2, #2
 8008960:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008964:	2300      	movs	r3, #0
 8008966:	9303      	str	r3, [sp, #12]
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	9302      	str	r3, [sp, #8]
 800896c:	f107 0314 	add.w	r3, r7, #20
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	68b9      	ldr	r1, [r7, #8]
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 f850 	bl	8008a22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008982:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008984:	f000 f8de 	bl	8008b44 <prvAddNewTaskToReadyList>
 8008988:	e001      	b.n	800898e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800898e:	697b      	ldr	r3, [r7, #20]
	}
 8008990:	4618      	mov	r0, r3
 8008992:	3728      	adds	r7, #40	@ 0x28
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08c      	sub	sp, #48	@ 0x30
 800899c:	af04      	add	r7, sp, #16
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	4613      	mov	r3, r2
 80089a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 fd2d 	bl	800a40c <pvPortMalloc>
 80089b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00e      	beq.n	80089d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089ba:	205c      	movs	r0, #92	@ 0x5c
 80089bc:	f001 fd26 	bl	800a40c <pvPortMalloc>
 80089c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80089ce:	e005      	b.n	80089dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089d0:	6978      	ldr	r0, [r7, #20]
 80089d2:	f001 fde9 	bl	800a5a8 <vPortFree>
 80089d6:	e001      	b.n	80089dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089d8:	2300      	movs	r3, #0
 80089da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d017      	beq.n	8008a12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089ea:	88fa      	ldrh	r2, [r7, #6]
 80089ec:	2300      	movs	r3, #0
 80089ee:	9303      	str	r3, [sp, #12]
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f80e 	bl	8008a22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a06:	69f8      	ldr	r0, [r7, #28]
 8008a08:	f000 f89c 	bl	8008b44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	61bb      	str	r3, [r7, #24]
 8008a10:	e002      	b.n	8008a18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a12:	f04f 33ff 	mov.w	r3, #4294967295
 8008a16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a18:	69bb      	ldr	r3, [r7, #24]
	}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3720      	adds	r7, #32
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b088      	sub	sp, #32
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	21a5      	movs	r1, #165	@ 0xa5
 8008a3c:	f002 fdbe 	bl	800b5bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	f023 0307 	bic.w	r3, r3, #7
 8008a58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	f003 0307 	and.w	r3, r3, #7
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00b      	beq.n	8008a7c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	617b      	str	r3, [r7, #20]
}
 8008a76:	bf00      	nop
 8008a78:	bf00      	nop
 8008a7a:	e7fd      	b.n	8008a78 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d01f      	beq.n	8008ac2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a82:	2300      	movs	r3, #0
 8008a84:	61fb      	str	r3, [r7, #28]
 8008a86:	e012      	b.n	8008aae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	7819      	ldrb	r1, [r3, #0]
 8008a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	4413      	add	r3, r2
 8008a96:	3334      	adds	r3, #52	@ 0x34
 8008a98:	460a      	mov	r2, r1
 8008a9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d006      	beq.n	8008ab6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	61fb      	str	r3, [r7, #28]
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	2b0f      	cmp	r3, #15
 8008ab2:	d9e9      	bls.n	8008a88 <prvInitialiseNewTask+0x66>
 8008ab4:	e000      	b.n	8008ab8 <prvInitialiseNewTask+0x96>
			{
				break;
 8008ab6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ac0:	e003      	b.n	8008aca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008acc:	2b37      	cmp	r3, #55	@ 0x37
 8008ace:	d901      	bls.n	8008ad4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ad0:	2337      	movs	r3, #55	@ 0x37
 8008ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ade:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f8a8 	bl	8007c40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	3318      	adds	r3, #24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff f8a3 	bl	8007c40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008afe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b0e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b12:	2200      	movs	r2, #0
 8008b14:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	68f9      	ldr	r1, [r7, #12]
 8008b22:	69b8      	ldr	r0, [r7, #24]
 8008b24:	f001 fa1e 	bl	8009f64 <pxPortInitialiseStack>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b3a:	bf00      	nop
 8008b3c:	3720      	adds	r7, #32
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b4c:	f001 fb3c 	bl	800a1c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b50:	4b2d      	ldr	r3, [pc, #180]	@ (8008c08 <prvAddNewTaskToReadyList+0xc4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	4a2c      	ldr	r2, [pc, #176]	@ (8008c08 <prvAddNewTaskToReadyList+0xc4>)
 8008b58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8008c0c <prvAddNewTaskToReadyList+0xc8>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d109      	bne.n	8008b76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b62:	4a2a      	ldr	r2, [pc, #168]	@ (8008c0c <prvAddNewTaskToReadyList+0xc8>)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b68:	4b27      	ldr	r3, [pc, #156]	@ (8008c08 <prvAddNewTaskToReadyList+0xc4>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d110      	bne.n	8008b92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b70:	f000 fc1e 	bl	80093b0 <prvInitialiseTaskLists>
 8008b74:	e00d      	b.n	8008b92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b76:	4b26      	ldr	r3, [pc, #152]	@ (8008c10 <prvAddNewTaskToReadyList+0xcc>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d109      	bne.n	8008b92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b7e:	4b23      	ldr	r3, [pc, #140]	@ (8008c0c <prvAddNewTaskToReadyList+0xc8>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d802      	bhi.n	8008b92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8008c0c <prvAddNewTaskToReadyList+0xc8>)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b92:	4b20      	ldr	r3, [pc, #128]	@ (8008c14 <prvAddNewTaskToReadyList+0xd0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3301      	adds	r3, #1
 8008b98:	4a1e      	ldr	r2, [pc, #120]	@ (8008c14 <prvAddNewTaskToReadyList+0xd0>)
 8008b9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c14 <prvAddNewTaskToReadyList+0xd0>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c18 <prvAddNewTaskToReadyList+0xd4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d903      	bls.n	8008bb8 <prvAddNewTaskToReadyList+0x74>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	4a18      	ldr	r2, [pc, #96]	@ (8008c18 <prvAddNewTaskToReadyList+0xd4>)
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4a15      	ldr	r2, [pc, #84]	@ (8008c1c <prvAddNewTaskToReadyList+0xd8>)
 8008bc6:	441a      	add	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	f7ff f843 	bl	8007c5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bd4:	f001 fb2a 	bl	800a22c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c10 <prvAddNewTaskToReadyList+0xcc>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00e      	beq.n	8008bfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008be0:	4b0a      	ldr	r3, [pc, #40]	@ (8008c0c <prvAddNewTaskToReadyList+0xc8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d207      	bcs.n	8008bfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bee:	4b0c      	ldr	r3, [pc, #48]	@ (8008c20 <prvAddNewTaskToReadyList+0xdc>)
 8008bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	200011f4 	.word	0x200011f4
 8008c0c:	20000d20 	.word	0x20000d20
 8008c10:	20001200 	.word	0x20001200
 8008c14:	20001210 	.word	0x20001210
 8008c18:	200011fc 	.word	0x200011fc
 8008c1c:	20000d24 	.word	0x20000d24
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d018      	beq.n	8008c68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c36:	4b14      	ldr	r3, [pc, #80]	@ (8008c88 <vTaskDelay+0x64>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <vTaskDelay+0x32>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	60bb      	str	r3, [r7, #8]
}
 8008c50:	bf00      	nop
 8008c52:	bf00      	nop
 8008c54:	e7fd      	b.n	8008c52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c56:	f000 f883 	bl	8008d60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fdd3 	bl	8009808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c62:	f000 f88b 	bl	8008d7c <xTaskResumeAll>
 8008c66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d107      	bne.n	8008c7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c6e:	4b07      	ldr	r3, [pc, #28]	@ (8008c8c <vTaskDelay+0x68>)
 8008c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	2000121c 	.word	0x2000121c
 8008c8c:	e000ed04 	.word	0xe000ed04

08008c90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	@ 0x28
 8008c94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c9e:	463a      	mov	r2, r7
 8008ca0:	1d39      	adds	r1, r7, #4
 8008ca2:	f107 0308 	add.w	r3, r7, #8
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe ff76 	bl	8007b98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	9202      	str	r2, [sp, #8]
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	460a      	mov	r2, r1
 8008cbe:	4922      	ldr	r1, [pc, #136]	@ (8008d48 <vTaskStartScheduler+0xb8>)
 8008cc0:	4822      	ldr	r0, [pc, #136]	@ (8008d4c <vTaskStartScheduler+0xbc>)
 8008cc2:	f7ff fe09 	bl	80088d8 <xTaskCreateStatic>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	4a21      	ldr	r2, [pc, #132]	@ (8008d50 <vTaskStartScheduler+0xc0>)
 8008cca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ccc:	4b20      	ldr	r3, [pc, #128]	@ (8008d50 <vTaskStartScheduler+0xc0>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	617b      	str	r3, [r7, #20]
 8008cd8:	e001      	b.n	8008cde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d102      	bne.n	8008cea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ce4:	f000 fde4 	bl	80098b0 <xTimerCreateTimerTask>
 8008ce8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d116      	bne.n	8008d1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	613b      	str	r3, [r7, #16]
}
 8008d02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d04:	4b13      	ldr	r3, [pc, #76]	@ (8008d54 <vTaskStartScheduler+0xc4>)
 8008d06:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d0c:	4b12      	ldr	r3, [pc, #72]	@ (8008d58 <vTaskStartScheduler+0xc8>)
 8008d0e:	2201      	movs	r2, #1
 8008d10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d12:	4b12      	ldr	r3, [pc, #72]	@ (8008d5c <vTaskStartScheduler+0xcc>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d18:	f001 f9b2 	bl	800a080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d1c:	e00f      	b.n	8008d3e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d24:	d10b      	bne.n	8008d3e <vTaskStartScheduler+0xae>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60fb      	str	r3, [r7, #12]
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	e7fd      	b.n	8008d3a <vTaskStartScheduler+0xaa>
}
 8008d3e:	bf00      	nop
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	0800e87c 	.word	0x0800e87c
 8008d4c:	08009381 	.word	0x08009381
 8008d50:	20001218 	.word	0x20001218
 8008d54:	20001214 	.word	0x20001214
 8008d58:	20001200 	.word	0x20001200
 8008d5c:	200011f8 	.word	0x200011f8

08008d60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d64:	4b04      	ldr	r3, [pc, #16]	@ (8008d78 <vTaskSuspendAll+0x18>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	4a03      	ldr	r2, [pc, #12]	@ (8008d78 <vTaskSuspendAll+0x18>)
 8008d6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d6e:	bf00      	nop
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	2000121c 	.word	0x2000121c

08008d7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d8a:	4b42      	ldr	r3, [pc, #264]	@ (8008e94 <xTaskResumeAll+0x118>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <xTaskResumeAll+0x2e>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	603b      	str	r3, [r7, #0]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008daa:	f001 fa0d 	bl	800a1c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dae:	4b39      	ldr	r3, [pc, #228]	@ (8008e94 <xTaskResumeAll+0x118>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	4a37      	ldr	r2, [pc, #220]	@ (8008e94 <xTaskResumeAll+0x118>)
 8008db6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008db8:	4b36      	ldr	r3, [pc, #216]	@ (8008e94 <xTaskResumeAll+0x118>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d162      	bne.n	8008e86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008dc0:	4b35      	ldr	r3, [pc, #212]	@ (8008e98 <xTaskResumeAll+0x11c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d05e      	beq.n	8008e86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dc8:	e02f      	b.n	8008e2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dca:	4b34      	ldr	r3, [pc, #208]	@ (8008e9c <xTaskResumeAll+0x120>)
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3318      	adds	r3, #24
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe ff9c 	bl	8007d14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3304      	adds	r3, #4
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe ff97 	bl	8007d14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dea:	4b2d      	ldr	r3, [pc, #180]	@ (8008ea0 <xTaskResumeAll+0x124>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d903      	bls.n	8008dfa <xTaskResumeAll+0x7e>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df6:	4a2a      	ldr	r2, [pc, #168]	@ (8008ea0 <xTaskResumeAll+0x124>)
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4a27      	ldr	r2, [pc, #156]	@ (8008ea4 <xTaskResumeAll+0x128>)
 8008e08:	441a      	add	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4610      	mov	r0, r2
 8008e12:	f7fe ff22 	bl	8007c5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e1a:	4b23      	ldr	r3, [pc, #140]	@ (8008ea8 <xTaskResumeAll+0x12c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d302      	bcc.n	8008e2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e24:	4b21      	ldr	r3, [pc, #132]	@ (8008eac <xTaskResumeAll+0x130>)
 8008e26:	2201      	movs	r2, #1
 8008e28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8008e9c <xTaskResumeAll+0x120>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1cb      	bne.n	8008dca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e38:	f000 fb58 	bl	80094ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb0 <xTaskResumeAll+0x134>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d010      	beq.n	8008e6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e48:	f000 f846 	bl	8008ed8 <xTaskIncrementTick>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e52:	4b16      	ldr	r3, [pc, #88]	@ (8008eac <xTaskResumeAll+0x130>)
 8008e54:	2201      	movs	r2, #1
 8008e56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1f1      	bne.n	8008e48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e64:	4b12      	ldr	r3, [pc, #72]	@ (8008eb0 <xTaskResumeAll+0x134>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e6a:	4b10      	ldr	r3, [pc, #64]	@ (8008eac <xTaskResumeAll+0x130>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d009      	beq.n	8008e86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e72:	2301      	movs	r3, #1
 8008e74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e76:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb4 <xTaskResumeAll+0x138>)
 8008e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e86:	f001 f9d1 	bl	800a22c <vPortExitCritical>

	return xAlreadyYielded;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	2000121c 	.word	0x2000121c
 8008e98:	200011f4 	.word	0x200011f4
 8008e9c:	200011b4 	.word	0x200011b4
 8008ea0:	200011fc 	.word	0x200011fc
 8008ea4:	20000d24 	.word	0x20000d24
 8008ea8:	20000d20 	.word	0x20000d20
 8008eac:	20001208 	.word	0x20001208
 8008eb0:	20001204 	.word	0x20001204
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ebe:	4b05      	ldr	r3, [pc, #20]	@ (8008ed4 <xTaskGetTickCount+0x1c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ec4:	687b      	ldr	r3, [r7, #4]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	200011f8 	.word	0x200011f8

08008ed8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8009020 <xTaskIncrementTick+0x148>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f040 8090 	bne.w	800900c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008eec:	4b4d      	ldr	r3, [pc, #308]	@ (8009024 <xTaskIncrementTick+0x14c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ef4:	4a4b      	ldr	r2, [pc, #300]	@ (8009024 <xTaskIncrementTick+0x14c>)
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d121      	bne.n	8008f44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f00:	4b49      	ldr	r3, [pc, #292]	@ (8009028 <xTaskIncrementTick+0x150>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00b      	beq.n	8008f22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	603b      	str	r3, [r7, #0]
}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	e7fd      	b.n	8008f1e <xTaskIncrementTick+0x46>
 8008f22:	4b41      	ldr	r3, [pc, #260]	@ (8009028 <xTaskIncrementTick+0x150>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	4b40      	ldr	r3, [pc, #256]	@ (800902c <xTaskIncrementTick+0x154>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a3e      	ldr	r2, [pc, #248]	@ (8009028 <xTaskIncrementTick+0x150>)
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	4a3e      	ldr	r2, [pc, #248]	@ (800902c <xTaskIncrementTick+0x154>)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	4b3e      	ldr	r3, [pc, #248]	@ (8009030 <xTaskIncrementTick+0x158>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	4a3c      	ldr	r2, [pc, #240]	@ (8009030 <xTaskIncrementTick+0x158>)
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	f000 fad4 	bl	80094ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f44:	4b3b      	ldr	r3, [pc, #236]	@ (8009034 <xTaskIncrementTick+0x15c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d349      	bcc.n	8008fe2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f4e:	4b36      	ldr	r3, [pc, #216]	@ (8009028 <xTaskIncrementTick+0x150>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d104      	bne.n	8008f62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f58:	4b36      	ldr	r3, [pc, #216]	@ (8009034 <xTaskIncrementTick+0x15c>)
 8008f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5e:	601a      	str	r2, [r3, #0]
					break;
 8008f60:	e03f      	b.n	8008fe2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f62:	4b31      	ldr	r3, [pc, #196]	@ (8009028 <xTaskIncrementTick+0x150>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d203      	bcs.n	8008f82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8009034 <xTaskIncrementTick+0x15c>)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f80:	e02f      	b.n	8008fe2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	3304      	adds	r3, #4
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fec4 	bl	8007d14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	3318      	adds	r3, #24
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fe febb 	bl	8007d14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa2:	4b25      	ldr	r3, [pc, #148]	@ (8009038 <xTaskIncrementTick+0x160>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d903      	bls.n	8008fb2 <xTaskIncrementTick+0xda>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fae:	4a22      	ldr	r2, [pc, #136]	@ (8009038 <xTaskIncrementTick+0x160>)
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800903c <xTaskIncrementTick+0x164>)
 8008fc0:	441a      	add	r2, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4610      	mov	r0, r2
 8008fca:	f7fe fe46 	bl	8007c5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8009040 <xTaskIncrementTick+0x168>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3b8      	bcc.n	8008f4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fe0:	e7b5      	b.n	8008f4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fe2:	4b17      	ldr	r3, [pc, #92]	@ (8009040 <xTaskIncrementTick+0x168>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe8:	4914      	ldr	r1, [pc, #80]	@ (800903c <xTaskIncrementTick+0x164>)
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	440b      	add	r3, r1
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d901      	bls.n	8008ffe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ffe:	4b11      	ldr	r3, [pc, #68]	@ (8009044 <xTaskIncrementTick+0x16c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d007      	beq.n	8009016 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009006:	2301      	movs	r3, #1
 8009008:	617b      	str	r3, [r7, #20]
 800900a:	e004      	b.n	8009016 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800900c:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <xTaskIncrementTick+0x170>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3301      	adds	r3, #1
 8009012:	4a0d      	ldr	r2, [pc, #52]	@ (8009048 <xTaskIncrementTick+0x170>)
 8009014:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009016:	697b      	ldr	r3, [r7, #20]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	2000121c 	.word	0x2000121c
 8009024:	200011f8 	.word	0x200011f8
 8009028:	200011ac 	.word	0x200011ac
 800902c:	200011b0 	.word	0x200011b0
 8009030:	2000120c 	.word	0x2000120c
 8009034:	20001214 	.word	0x20001214
 8009038:	200011fc 	.word	0x200011fc
 800903c:	20000d24 	.word	0x20000d24
 8009040:	20000d20 	.word	0x20000d20
 8009044:	20001208 	.word	0x20001208
 8009048:	20001204 	.word	0x20001204

0800904c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009052:	4b28      	ldr	r3, [pc, #160]	@ (80090f4 <vTaskSwitchContext+0xa8>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800905a:	4b27      	ldr	r3, [pc, #156]	@ (80090f8 <vTaskSwitchContext+0xac>)
 800905c:	2201      	movs	r2, #1
 800905e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009060:	e042      	b.n	80090e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009062:	4b25      	ldr	r3, [pc, #148]	@ (80090f8 <vTaskSwitchContext+0xac>)
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009068:	4b24      	ldr	r3, [pc, #144]	@ (80090fc <vTaskSwitchContext+0xb0>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	e011      	b.n	8009094 <vTaskSwitchContext+0x48>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10b      	bne.n	800908e <vTaskSwitchContext+0x42>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	607b      	str	r3, [r7, #4]
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	e7fd      	b.n	800908a <vTaskSwitchContext+0x3e>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3b01      	subs	r3, #1
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	491a      	ldr	r1, [pc, #104]	@ (8009100 <vTaskSwitchContext+0xb4>)
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0e3      	beq.n	8009070 <vTaskSwitchContext+0x24>
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4a13      	ldr	r2, [pc, #76]	@ (8009100 <vTaskSwitchContext+0xb4>)
 80090b4:	4413      	add	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	3308      	adds	r3, #8
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d104      	bne.n	80090d8 <vTaskSwitchContext+0x8c>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	605a      	str	r2, [r3, #4]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	4a09      	ldr	r2, [pc, #36]	@ (8009104 <vTaskSwitchContext+0xb8>)
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	4a06      	ldr	r2, [pc, #24]	@ (80090fc <vTaskSwitchContext+0xb0>)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6013      	str	r3, [r2, #0]
}
 80090e8:	bf00      	nop
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	2000121c 	.word	0x2000121c
 80090f8:	20001208 	.word	0x20001208
 80090fc:	200011fc 	.word	0x200011fc
 8009100:	20000d24 	.word	0x20000d24
 8009104:	20000d20 	.word	0x20000d20

08009108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10b      	bne.n	8009130 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	60fb      	str	r3, [r7, #12]
}
 800912a:	bf00      	nop
 800912c:	bf00      	nop
 800912e:	e7fd      	b.n	800912c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009130:	4b07      	ldr	r3, [pc, #28]	@ (8009150 <vTaskPlaceOnEventList+0x48>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3318      	adds	r3, #24
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7fe fdb2 	bl	8007ca2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800913e:	2101      	movs	r1, #1
 8009140:	6838      	ldr	r0, [r7, #0]
 8009142:	f000 fb61 	bl	8009808 <prvAddCurrentTaskToDelayedList>
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000d20 	.word	0x20000d20

08009154 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10b      	bne.n	800917e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	617b      	str	r3, [r7, #20]
}
 8009178:	bf00      	nop
 800917a:	bf00      	nop
 800917c:	e7fd      	b.n	800917a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800917e:	4b0a      	ldr	r3, [pc, #40]	@ (80091a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3318      	adds	r3, #24
 8009184:	4619      	mov	r1, r3
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7fe fd67 	bl	8007c5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009192:	f04f 33ff 	mov.w	r3, #4294967295
 8009196:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	68b8      	ldr	r0, [r7, #8]
 800919c:	f000 fb34 	bl	8009808 <prvAddCurrentTaskToDelayedList>
	}
 80091a0:	bf00      	nop
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20000d20 	.word	0x20000d20

080091ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10b      	bne.n	80091da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60fb      	str	r3, [r7, #12]
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	e7fd      	b.n	80091d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	3318      	adds	r3, #24
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fe fd98 	bl	8007d14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e4:	4b1d      	ldr	r3, [pc, #116]	@ (800925c <xTaskRemoveFromEventList+0xb0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d11d      	bne.n	8009228 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fd8f 	bl	8007d14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fa:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <xTaskRemoveFromEventList+0xb4>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d903      	bls.n	800920a <xTaskRemoveFromEventList+0x5e>
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009206:	4a16      	ldr	r2, [pc, #88]	@ (8009260 <xTaskRemoveFromEventList+0xb4>)
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4a13      	ldr	r2, [pc, #76]	@ (8009264 <xTaskRemoveFromEventList+0xb8>)
 8009218:	441a      	add	r2, r3
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	3304      	adds	r3, #4
 800921e:	4619      	mov	r1, r3
 8009220:	4610      	mov	r0, r2
 8009222:	f7fe fd1a 	bl	8007c5a <vListInsertEnd>
 8009226:	e005      	b.n	8009234 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	3318      	adds	r3, #24
 800922c:	4619      	mov	r1, r3
 800922e:	480e      	ldr	r0, [pc, #56]	@ (8009268 <xTaskRemoveFromEventList+0xbc>)
 8009230:	f7fe fd13 	bl	8007c5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009238:	4b0c      	ldr	r3, [pc, #48]	@ (800926c <xTaskRemoveFromEventList+0xc0>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923e:	429a      	cmp	r2, r3
 8009240:	d905      	bls.n	800924e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009242:	2301      	movs	r3, #1
 8009244:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009246:	4b0a      	ldr	r3, [pc, #40]	@ (8009270 <xTaskRemoveFromEventList+0xc4>)
 8009248:	2201      	movs	r2, #1
 800924a:	601a      	str	r2, [r3, #0]
 800924c:	e001      	b.n	8009252 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800924e:	2300      	movs	r3, #0
 8009250:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009252:	697b      	ldr	r3, [r7, #20]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	2000121c 	.word	0x2000121c
 8009260:	200011fc 	.word	0x200011fc
 8009264:	20000d24 	.word	0x20000d24
 8009268:	200011b4 	.word	0x200011b4
 800926c:	20000d20 	.word	0x20000d20
 8009270:	20001208 	.word	0x20001208

08009274 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800927c:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <vTaskInternalSetTimeOutState+0x24>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009284:	4b05      	ldr	r3, [pc, #20]	@ (800929c <vTaskInternalSetTimeOutState+0x28>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	605a      	str	r2, [r3, #4]
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	2000120c 	.word	0x2000120c
 800929c:	200011f8 	.word	0x200011f8

080092a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10b      	bne.n	80092c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	613b      	str	r3, [r7, #16]
}
 80092c2:	bf00      	nop
 80092c4:	bf00      	nop
 80092c6:	e7fd      	b.n	80092c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10b      	bne.n	80092e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	60fb      	str	r3, [r7, #12]
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80092e6:	f000 ff6f 	bl	800a1c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009360 <xTaskCheckForTimeOut+0xc0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009302:	d102      	bne.n	800930a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009304:	2300      	movs	r3, #0
 8009306:	61fb      	str	r3, [r7, #28]
 8009308:	e023      	b.n	8009352 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	4b15      	ldr	r3, [pc, #84]	@ (8009364 <xTaskCheckForTimeOut+0xc4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d007      	beq.n	8009326 <xTaskCheckForTimeOut+0x86>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	429a      	cmp	r2, r3
 800931e:	d302      	bcc.n	8009326 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	61fb      	str	r3, [r7, #28]
 8009324:	e015      	b.n	8009352 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	429a      	cmp	r2, r3
 800932e:	d20b      	bcs.n	8009348 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff ff99 	bl	8009274 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009342:	2300      	movs	r3, #0
 8009344:	61fb      	str	r3, [r7, #28]
 8009346:	e004      	b.n	8009352 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800934e:	2301      	movs	r3, #1
 8009350:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009352:	f000 ff6b 	bl	800a22c <vPortExitCritical>

	return xReturn;
 8009356:	69fb      	ldr	r3, [r7, #28]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3720      	adds	r7, #32
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	200011f8 	.word	0x200011f8
 8009364:	2000120c 	.word	0x2000120c

08009368 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800936c:	4b03      	ldr	r3, [pc, #12]	@ (800937c <vTaskMissedYield+0x14>)
 800936e:	2201      	movs	r2, #1
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	bf00      	nop
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	20001208 	.word	0x20001208

08009380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009388:	f000 f852 	bl	8009430 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800938c:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <prvIdleTask+0x28>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d9f9      	bls.n	8009388 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009394:	4b05      	ldr	r3, [pc, #20]	@ (80093ac <prvIdleTask+0x2c>)
 8009396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093a4:	e7f0      	b.n	8009388 <prvIdleTask+0x8>
 80093a6:	bf00      	nop
 80093a8:	20000d24 	.word	0x20000d24
 80093ac:	e000ed04 	.word	0xe000ed04

080093b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093b6:	2300      	movs	r3, #0
 80093b8:	607b      	str	r3, [r7, #4]
 80093ba:	e00c      	b.n	80093d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4a12      	ldr	r2, [pc, #72]	@ (8009410 <prvInitialiseTaskLists+0x60>)
 80093c8:	4413      	add	r3, r2
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fc18 	bl	8007c00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3301      	adds	r3, #1
 80093d4:	607b      	str	r3, [r7, #4]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b37      	cmp	r3, #55	@ 0x37
 80093da:	d9ef      	bls.n	80093bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093dc:	480d      	ldr	r0, [pc, #52]	@ (8009414 <prvInitialiseTaskLists+0x64>)
 80093de:	f7fe fc0f 	bl	8007c00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093e2:	480d      	ldr	r0, [pc, #52]	@ (8009418 <prvInitialiseTaskLists+0x68>)
 80093e4:	f7fe fc0c 	bl	8007c00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093e8:	480c      	ldr	r0, [pc, #48]	@ (800941c <prvInitialiseTaskLists+0x6c>)
 80093ea:	f7fe fc09 	bl	8007c00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093ee:	480c      	ldr	r0, [pc, #48]	@ (8009420 <prvInitialiseTaskLists+0x70>)
 80093f0:	f7fe fc06 	bl	8007c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093f4:	480b      	ldr	r0, [pc, #44]	@ (8009424 <prvInitialiseTaskLists+0x74>)
 80093f6:	f7fe fc03 	bl	8007c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009428 <prvInitialiseTaskLists+0x78>)
 80093fc:	4a05      	ldr	r2, [pc, #20]	@ (8009414 <prvInitialiseTaskLists+0x64>)
 80093fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009400:	4b0a      	ldr	r3, [pc, #40]	@ (800942c <prvInitialiseTaskLists+0x7c>)
 8009402:	4a05      	ldr	r2, [pc, #20]	@ (8009418 <prvInitialiseTaskLists+0x68>)
 8009404:	601a      	str	r2, [r3, #0]
}
 8009406:	bf00      	nop
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20000d24 	.word	0x20000d24
 8009414:	20001184 	.word	0x20001184
 8009418:	20001198 	.word	0x20001198
 800941c:	200011b4 	.word	0x200011b4
 8009420:	200011c8 	.word	0x200011c8
 8009424:	200011e0 	.word	0x200011e0
 8009428:	200011ac 	.word	0x200011ac
 800942c:	200011b0 	.word	0x200011b0

08009430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009436:	e019      	b.n	800946c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009438:	f000 fec6 	bl	800a1c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943c:	4b10      	ldr	r3, [pc, #64]	@ (8009480 <prvCheckTasksWaitingTermination+0x50>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3304      	adds	r3, #4
 8009448:	4618      	mov	r0, r3
 800944a:	f7fe fc63 	bl	8007d14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800944e:	4b0d      	ldr	r3, [pc, #52]	@ (8009484 <prvCheckTasksWaitingTermination+0x54>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3b01      	subs	r3, #1
 8009454:	4a0b      	ldr	r2, [pc, #44]	@ (8009484 <prvCheckTasksWaitingTermination+0x54>)
 8009456:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009458:	4b0b      	ldr	r3, [pc, #44]	@ (8009488 <prvCheckTasksWaitingTermination+0x58>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3b01      	subs	r3, #1
 800945e:	4a0a      	ldr	r2, [pc, #40]	@ (8009488 <prvCheckTasksWaitingTermination+0x58>)
 8009460:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009462:	f000 fee3 	bl	800a22c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f810 	bl	800948c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800946c:	4b06      	ldr	r3, [pc, #24]	@ (8009488 <prvCheckTasksWaitingTermination+0x58>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e1      	bne.n	8009438 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009474:	bf00      	nop
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200011c8 	.word	0x200011c8
 8009484:	200011f4 	.word	0x200011f4
 8009488:	200011dc 	.word	0x200011dc

0800948c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800949a:	2b00      	cmp	r3, #0
 800949c:	d108      	bne.n	80094b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a2:	4618      	mov	r0, r3
 80094a4:	f001 f880 	bl	800a5a8 <vPortFree>
				vPortFree( pxTCB );
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 f87d 	bl	800a5a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094ae:	e019      	b.n	80094e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d103      	bne.n	80094c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 f874 	bl	800a5a8 <vPortFree>
	}
 80094c0:	e010      	b.n	80094e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d00b      	beq.n	80094e4 <prvDeleteTCB+0x58>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	60fb      	str	r3, [r7, #12]
}
 80094de:	bf00      	nop
 80094e0:	bf00      	nop
 80094e2:	e7fd      	b.n	80094e0 <prvDeleteTCB+0x54>
	}
 80094e4:	bf00      	nop
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009524 <prvResetNextTaskUnblockTime+0x38>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d104      	bne.n	8009506 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009528 <prvResetNextTaskUnblockTime+0x3c>)
 80094fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009502:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009504:	e008      	b.n	8009518 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009506:	4b07      	ldr	r3, [pc, #28]	@ (8009524 <prvResetNextTaskUnblockTime+0x38>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	4a04      	ldr	r2, [pc, #16]	@ (8009528 <prvResetNextTaskUnblockTime+0x3c>)
 8009516:	6013      	str	r3, [r2, #0]
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	200011ac 	.word	0x200011ac
 8009528:	20001214 	.word	0x20001214

0800952c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009532:	4b0b      	ldr	r3, [pc, #44]	@ (8009560 <xTaskGetSchedulerState+0x34>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d102      	bne.n	8009540 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800953a:	2301      	movs	r3, #1
 800953c:	607b      	str	r3, [r7, #4]
 800953e:	e008      	b.n	8009552 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009540:	4b08      	ldr	r3, [pc, #32]	@ (8009564 <xTaskGetSchedulerState+0x38>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009548:	2302      	movs	r3, #2
 800954a:	607b      	str	r3, [r7, #4]
 800954c:	e001      	b.n	8009552 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800954e:	2300      	movs	r3, #0
 8009550:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009552:	687b      	ldr	r3, [r7, #4]
	}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	20001200 	.word	0x20001200
 8009564:	2000121c 	.word	0x2000121c

08009568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009574:	2300      	movs	r3, #0
 8009576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d058      	beq.n	8009630 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800957e:	4b2f      	ldr	r3, [pc, #188]	@ (800963c <xTaskPriorityDisinherit+0xd4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	429a      	cmp	r2, r3
 8009586:	d00b      	beq.n	80095a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	60fb      	str	r3, [r7, #12]
}
 800959a:	bf00      	nop
 800959c:	bf00      	nop
 800959e:	e7fd      	b.n	800959c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10b      	bne.n	80095c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80095a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	60bb      	str	r3, [r7, #8]
}
 80095ba:	bf00      	nop
 80095bc:	bf00      	nop
 80095be:	e7fd      	b.n	80095bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c4:	1e5a      	subs	r2, r3, #1
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d02c      	beq.n	8009630 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d128      	bne.n	8009630 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3304      	adds	r3, #4
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fb96 	bl	8007d14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009600:	4b0f      	ldr	r3, [pc, #60]	@ (8009640 <xTaskPriorityDisinherit+0xd8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d903      	bls.n	8009610 <xTaskPriorityDisinherit+0xa8>
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960c:	4a0c      	ldr	r2, [pc, #48]	@ (8009640 <xTaskPriorityDisinherit+0xd8>)
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009614:	4613      	mov	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4a09      	ldr	r2, [pc, #36]	@ (8009644 <xTaskPriorityDisinherit+0xdc>)
 800961e:	441a      	add	r2, r3
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	3304      	adds	r3, #4
 8009624:	4619      	mov	r1, r3
 8009626:	4610      	mov	r0, r2
 8009628:	f7fe fb17 	bl	8007c5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800962c:	2301      	movs	r3, #1
 800962e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009630:	697b      	ldr	r3, [r7, #20]
	}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000d20 	.word	0x20000d20
 8009640:	200011fc 	.word	0x200011fc
 8009644:	20000d24 	.word	0x20000d24

08009648 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08e      	sub	sp, #56	@ 0x38
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	4613      	mov	r3, r2
 8009656:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009658:	2301      	movs	r3, #1
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	e7fd      	b.n	8009676 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800967a:	f000 fe85 	bl	800a388 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8009682:	f3ef 8211 	mrs	r2, BASEPRI
 8009686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	623a      	str	r2, [r7, #32]
 8009698:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800969a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800969c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d003      	beq.n	80096ac <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80096ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80096b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80096b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b8:	2202      	movs	r2, #2
 80096ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d829      	bhi.n	8009718 <xTaskGenericNotifyFromISR+0xd0>
 80096c4:	a201      	add	r2, pc, #4	@ (adr r2, 80096cc <xTaskGenericNotifyFromISR+0x84>)
 80096c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ca:	bf00      	nop
 80096cc:	0800973b 	.word	0x0800973b
 80096d0:	080096e1 	.word	0x080096e1
 80096d4:	080096ef 	.word	0x080096ef
 80096d8:	080096fb 	.word	0x080096fb
 80096dc:	08009703 	.word	0x08009703
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80096e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	431a      	orrs	r2, r3
 80096e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ea:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80096ec:	e028      	b.n	8009740 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f2:	1c5a      	adds	r2, r3, #1
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80096f8:	e022      	b.n	8009740 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8009700:	e01e      	b.n	8009740 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009702:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009706:	2b02      	cmp	r3, #2
 8009708:	d003      	beq.n	8009712 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800970a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009710:	e016      	b.n	8009740 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8009712:	2300      	movs	r3, #0
 8009714:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009716:	e013      	b.n	8009740 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009720:	d00d      	beq.n	800973e <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	61bb      	str	r3, [r7, #24]
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <xTaskGenericNotifyFromISR+0xee>
					break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <xTaskGenericNotifyFromISR+0xf8>
					break;
 800973e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009740:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009744:	2b01      	cmp	r3, #1
 8009746:	d147      	bne.n	80097d8 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	617b      	str	r3, [r7, #20]
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	e7fd      	b.n	8009764 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009768:	4b21      	ldr	r3, [pc, #132]	@ (80097f0 <xTaskGenericNotifyFromISR+0x1a8>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d11d      	bne.n	80097ac <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	3304      	adds	r3, #4
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe facd 	bl	8007d14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977e:	4b1d      	ldr	r3, [pc, #116]	@ (80097f4 <xTaskGenericNotifyFromISR+0x1ac>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d903      	bls.n	800978e <xTaskGenericNotifyFromISR+0x146>
 8009786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978a:	4a1a      	ldr	r2, [pc, #104]	@ (80097f4 <xTaskGenericNotifyFromISR+0x1ac>)
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4a17      	ldr	r2, [pc, #92]	@ (80097f8 <xTaskGenericNotifyFromISR+0x1b0>)
 800979c:	441a      	add	r2, r3
 800979e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a0:	3304      	adds	r3, #4
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7fe fa58 	bl	8007c5a <vListInsertEnd>
 80097aa:	e005      	b.n	80097b8 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	3318      	adds	r3, #24
 80097b0:	4619      	mov	r1, r3
 80097b2:	4812      	ldr	r0, [pc, #72]	@ (80097fc <xTaskGenericNotifyFromISR+0x1b4>)
 80097b4:	f7fe fa51 	bl	8007c5a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097bc:	4b10      	ldr	r3, [pc, #64]	@ (8009800 <xTaskGenericNotifyFromISR+0x1b8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d908      	bls.n	80097d8 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80097c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80097cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ce:	2201      	movs	r2, #1
 80097d0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80097d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009804 <xTaskGenericNotifyFromISR+0x1bc>)
 80097d4:	2201      	movs	r2, #1
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097da:	613b      	str	r3, [r7, #16]
	__asm volatile
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f383 8811 	msr	BASEPRI, r3
}
 80097e2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80097e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3738      	adds	r7, #56	@ 0x38
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	2000121c 	.word	0x2000121c
 80097f4:	200011fc 	.word	0x200011fc
 80097f8:	20000d24 	.word	0x20000d24
 80097fc:	200011b4 	.word	0x200011b4
 8009800:	20000d20 	.word	0x20000d20
 8009804:	20001208 	.word	0x20001208

08009808 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009812:	4b21      	ldr	r3, [pc, #132]	@ (8009898 <prvAddCurrentTaskToDelayedList+0x90>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009818:	4b20      	ldr	r3, [pc, #128]	@ (800989c <prvAddCurrentTaskToDelayedList+0x94>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3304      	adds	r3, #4
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe fa78 	bl	8007d14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982a:	d10a      	bne.n	8009842 <prvAddCurrentTaskToDelayedList+0x3a>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d007      	beq.n	8009842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009832:	4b1a      	ldr	r3, [pc, #104]	@ (800989c <prvAddCurrentTaskToDelayedList+0x94>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3304      	adds	r3, #4
 8009838:	4619      	mov	r1, r3
 800983a:	4819      	ldr	r0, [pc, #100]	@ (80098a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800983c:	f7fe fa0d 	bl	8007c5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009840:	e026      	b.n	8009890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4413      	add	r3, r2
 8009848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800984a:	4b14      	ldr	r3, [pc, #80]	@ (800989c <prvAddCurrentTaskToDelayedList+0x94>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	429a      	cmp	r2, r3
 8009858:	d209      	bcs.n	800986e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800985a:	4b12      	ldr	r3, [pc, #72]	@ (80098a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b0f      	ldr	r3, [pc, #60]	@ (800989c <prvAddCurrentTaskToDelayedList+0x94>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3304      	adds	r3, #4
 8009864:	4619      	mov	r1, r3
 8009866:	4610      	mov	r0, r2
 8009868:	f7fe fa1b 	bl	8007ca2 <vListInsert>
}
 800986c:	e010      	b.n	8009890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800986e:	4b0e      	ldr	r3, [pc, #56]	@ (80098a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <prvAddCurrentTaskToDelayedList+0x94>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3304      	adds	r3, #4
 8009878:	4619      	mov	r1, r3
 800987a:	4610      	mov	r0, r2
 800987c:	f7fe fa11 	bl	8007ca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009880:	4b0a      	ldr	r3, [pc, #40]	@ (80098ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	429a      	cmp	r2, r3
 8009888:	d202      	bcs.n	8009890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800988a:	4a08      	ldr	r2, [pc, #32]	@ (80098ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	6013      	str	r3, [r2, #0]
}
 8009890:	bf00      	nop
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	200011f8 	.word	0x200011f8
 800989c:	20000d20 	.word	0x20000d20
 80098a0:	200011e0 	.word	0x200011e0
 80098a4:	200011b0 	.word	0x200011b0
 80098a8:	200011ac 	.word	0x200011ac
 80098ac:	20001214 	.word	0x20001214

080098b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08a      	sub	sp, #40	@ 0x28
 80098b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098ba:	f000 fb13 	bl	8009ee4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098be:	4b1d      	ldr	r3, [pc, #116]	@ (8009934 <xTimerCreateTimerTask+0x84>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d021      	beq.n	800990a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098ce:	1d3a      	adds	r2, r7, #4
 80098d0:	f107 0108 	add.w	r1, r7, #8
 80098d4:	f107 030c 	add.w	r3, r7, #12
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fe f977 	bl	8007bcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	9202      	str	r2, [sp, #8]
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	2302      	movs	r3, #2
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	2300      	movs	r3, #0
 80098ee:	460a      	mov	r2, r1
 80098f0:	4911      	ldr	r1, [pc, #68]	@ (8009938 <xTimerCreateTimerTask+0x88>)
 80098f2:	4812      	ldr	r0, [pc, #72]	@ (800993c <xTimerCreateTimerTask+0x8c>)
 80098f4:	f7fe fff0 	bl	80088d8 <xTaskCreateStatic>
 80098f8:	4603      	mov	r3, r0
 80098fa:	4a11      	ldr	r2, [pc, #68]	@ (8009940 <xTimerCreateTimerTask+0x90>)
 80098fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098fe:	4b10      	ldr	r3, [pc, #64]	@ (8009940 <xTimerCreateTimerTask+0x90>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009906:	2301      	movs	r3, #1
 8009908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10b      	bne.n	8009928 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	613b      	str	r3, [r7, #16]
}
 8009922:	bf00      	nop
 8009924:	bf00      	nop
 8009926:	e7fd      	b.n	8009924 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009928:	697b      	ldr	r3, [r7, #20]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20001250 	.word	0x20001250
 8009938:	0800e884 	.word	0x0800e884
 800993c:	08009a7d 	.word	0x08009a7d
 8009940:	20001254 	.word	0x20001254

08009944 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08a      	sub	sp, #40	@ 0x28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009952:	2300      	movs	r3, #0
 8009954:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10b      	bne.n	8009974 <xTimerGenericCommand+0x30>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	623b      	str	r3, [r7, #32]
}
 800996e:	bf00      	nop
 8009970:	bf00      	nop
 8009972:	e7fd      	b.n	8009970 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009974:	4b19      	ldr	r3, [pc, #100]	@ (80099dc <xTimerGenericCommand+0x98>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d02a      	beq.n	80099d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	2b05      	cmp	r3, #5
 800998c:	dc18      	bgt.n	80099c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800998e:	f7ff fdcd 	bl	800952c <xTaskGetSchedulerState>
 8009992:	4603      	mov	r3, r0
 8009994:	2b02      	cmp	r3, #2
 8009996:	d109      	bne.n	80099ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009998:	4b10      	ldr	r3, [pc, #64]	@ (80099dc <xTimerGenericCommand+0x98>)
 800999a:	6818      	ldr	r0, [r3, #0]
 800999c:	f107 0110 	add.w	r1, r7, #16
 80099a0:	2300      	movs	r3, #0
 80099a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099a4:	f7fe fb26 	bl	8007ff4 <xQueueGenericSend>
 80099a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80099aa:	e012      	b.n	80099d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099ac:	4b0b      	ldr	r3, [pc, #44]	@ (80099dc <xTimerGenericCommand+0x98>)
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	f107 0110 	add.w	r1, r7, #16
 80099b4:	2300      	movs	r3, #0
 80099b6:	2200      	movs	r2, #0
 80099b8:	f7fe fb1c 	bl	8007ff4 <xQueueGenericSend>
 80099bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80099be:	e008      	b.n	80099d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80099c0:	4b06      	ldr	r3, [pc, #24]	@ (80099dc <xTimerGenericCommand+0x98>)
 80099c2:	6818      	ldr	r0, [r3, #0]
 80099c4:	f107 0110 	add.w	r1, r7, #16
 80099c8:	2300      	movs	r3, #0
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	f7fe fc14 	bl	80081f8 <xQueueGenericSendFromISR>
 80099d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3728      	adds	r7, #40	@ 0x28
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20001250 	.word	0x20001250

080099e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ea:	4b23      	ldr	r3, [pc, #140]	@ (8009a78 <prvProcessExpiredTimer+0x98>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	3304      	adds	r3, #4
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe f98b 	bl	8007d14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d023      	beq.n	8009a54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	699a      	ldr	r2, [r3, #24]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	18d1      	adds	r1, r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	6978      	ldr	r0, [r7, #20]
 8009a1a:	f000 f8d5 	bl	8009bc8 <prvInsertTimerInActiveList>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d020      	beq.n	8009a66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a24:	2300      	movs	r3, #0
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6978      	ldr	r0, [r7, #20]
 8009a30:	f7ff ff88 	bl	8009944 <xTimerGenericCommand>
 8009a34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d114      	bne.n	8009a66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	60fb      	str	r3, [r7, #12]
}
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	e7fd      	b.n	8009a50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a5a:	f023 0301 	bic.w	r3, r3, #1
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	6978      	ldr	r0, [r7, #20]
 8009a6c:	4798      	blx	r3
}
 8009a6e:	bf00      	nop
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20001248 	.word	0x20001248

08009a7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 f859 	bl	8009b40 <prvGetNextExpireTime>
 8009a8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	4619      	mov	r1, r3
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f805 	bl	8009aa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a9a:	f000 f8d7 	bl	8009c4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a9e:	bf00      	nop
 8009aa0:	e7f0      	b.n	8009a84 <prvTimerTask+0x8>
	...

08009aa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009aae:	f7ff f957 	bl	8008d60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ab2:	f107 0308 	add.w	r3, r7, #8
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f866 	bl	8009b88 <prvSampleTimeNow>
 8009abc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d130      	bne.n	8009b26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10a      	bne.n	8009ae0 <prvProcessTimerOrBlockTask+0x3c>
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d806      	bhi.n	8009ae0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ad2:	f7ff f953 	bl	8008d7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ad6:	68f9      	ldr	r1, [r7, #12]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff ff81 	bl	80099e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ade:	e024      	b.n	8009b2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d008      	beq.n	8009af8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ae6:	4b13      	ldr	r3, [pc, #76]	@ (8009b34 <prvProcessTimerOrBlockTask+0x90>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <prvProcessTimerOrBlockTask+0x50>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e000      	b.n	8009af6 <prvProcessTimerOrBlockTask+0x52>
 8009af4:	2300      	movs	r3, #0
 8009af6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009af8:	4b0f      	ldr	r3, [pc, #60]	@ (8009b38 <prvProcessTimerOrBlockTask+0x94>)
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	4619      	mov	r1, r3
 8009b06:	f7fe feb3 	bl	8008870 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b0a:	f7ff f937 	bl	8008d7c <xTaskResumeAll>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10a      	bne.n	8009b2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b14:	4b09      	ldr	r3, [pc, #36]	@ (8009b3c <prvProcessTimerOrBlockTask+0x98>)
 8009b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	f3bf 8f6f 	isb	sy
}
 8009b24:	e001      	b.n	8009b2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b26:	f7ff f929 	bl	8008d7c <xTaskResumeAll>
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	2000124c 	.word	0x2000124c
 8009b38:	20001250 	.word	0x20001250
 8009b3c:	e000ed04 	.word	0xe000ed04

08009b40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b48:	4b0e      	ldr	r3, [pc, #56]	@ (8009b84 <prvGetNextExpireTime+0x44>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <prvGetNextExpireTime+0x16>
 8009b52:	2201      	movs	r2, #1
 8009b54:	e000      	b.n	8009b58 <prvGetNextExpireTime+0x18>
 8009b56:	2200      	movs	r2, #0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d105      	bne.n	8009b70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b64:	4b07      	ldr	r3, [pc, #28]	@ (8009b84 <prvGetNextExpireTime+0x44>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	e001      	b.n	8009b74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b74:	68fb      	ldr	r3, [r7, #12]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20001248 	.word	0x20001248

08009b88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b90:	f7ff f992 	bl	8008eb8 <xTaskGetTickCount>
 8009b94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b96:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc4 <prvSampleTimeNow+0x3c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d205      	bcs.n	8009bac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ba0:	f000 f93a 	bl	8009e18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	e002      	b.n	8009bb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009bb2:	4a04      	ldr	r2, [pc, #16]	@ (8009bc4 <prvSampleTimeNow+0x3c>)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20001258 	.word	0x20001258

08009bc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d812      	bhi.n	8009c14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	1ad2      	subs	r2, r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d302      	bcc.n	8009c02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	e01b      	b.n	8009c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c02:	4b10      	ldr	r3, [pc, #64]	@ (8009c44 <prvInsertTimerInActiveList+0x7c>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	f7fe f848 	bl	8007ca2 <vListInsert>
 8009c12:	e012      	b.n	8009c3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d206      	bcs.n	8009c2a <prvInsertTimerInActiveList+0x62>
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d302      	bcc.n	8009c2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	e007      	b.n	8009c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c2a:	4b07      	ldr	r3, [pc, #28]	@ (8009c48 <prvInsertTimerInActiveList+0x80>)
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3304      	adds	r3, #4
 8009c32:	4619      	mov	r1, r3
 8009c34:	4610      	mov	r0, r2
 8009c36:	f7fe f834 	bl	8007ca2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c3a:	697b      	ldr	r3, [r7, #20]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	2000124c 	.word	0x2000124c
 8009c48:	20001248 	.word	0x20001248

08009c4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08e      	sub	sp, #56	@ 0x38
 8009c50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c52:	e0ce      	b.n	8009df2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	da19      	bge.n	8009c8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c5a:	1d3b      	adds	r3, r7, #4
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10b      	bne.n	8009c7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	61fb      	str	r3, [r7, #28]
}
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	e7fd      	b.n	8009c7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c84:	6850      	ldr	r0, [r2, #4]
 8009c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c88:	6892      	ldr	r2, [r2, #8]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f2c0 80ae 	blt.w	8009df2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d004      	beq.n	8009cac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe f834 	bl	8007d14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cac:	463b      	mov	r3, r7
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff ff6a 	bl	8009b88 <prvSampleTimeNow>
 8009cb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b09      	cmp	r3, #9
 8009cba:	f200 8097 	bhi.w	8009dec <prvProcessReceivedCommands+0x1a0>
 8009cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc4 <prvProcessReceivedCommands+0x78>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009ced 	.word	0x08009ced
 8009cc8:	08009ced 	.word	0x08009ced
 8009ccc:	08009ced 	.word	0x08009ced
 8009cd0:	08009d63 	.word	0x08009d63
 8009cd4:	08009d77 	.word	0x08009d77
 8009cd8:	08009dc3 	.word	0x08009dc3
 8009cdc:	08009ced 	.word	0x08009ced
 8009ce0:	08009ced 	.word	0x08009ced
 8009ce4:	08009d63 	.word	0x08009d63
 8009ce8:	08009d77 	.word	0x08009d77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	18d1      	adds	r1, r2, r3
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d0c:	f7ff ff5c 	bl	8009bc8 <prvInsertTimerInActiveList>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d06c      	beq.n	8009df0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d061      	beq.n	8009df0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	441a      	add	r2, r3
 8009d34:	2300      	movs	r3, #0
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d3e:	f7ff fe01 	bl	8009944 <xTimerGenericCommand>
 8009d42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d152      	bne.n	8009df0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	61bb      	str	r3, [r7, #24]
}
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
 8009d60:	e7fd      	b.n	8009d5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d68:	f023 0301 	bic.w	r3, r3, #1
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d74:	e03d      	b.n	8009df2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d7c:	f043 0301 	orr.w	r3, r3, #1
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10b      	bne.n	8009dae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	617b      	str	r3, [r7, #20]
}
 8009da8:	bf00      	nop
 8009daa:	bf00      	nop
 8009dac:	e7fd      	b.n	8009daa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db0:	699a      	ldr	r2, [r3, #24]
 8009db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db4:	18d1      	adds	r1, r2, r3
 8009db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dbc:	f7ff ff04 	bl	8009bc8 <prvInsertTimerInActiveList>
					break;
 8009dc0:	e017      	b.n	8009df2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dc8:	f003 0302 	and.w	r3, r3, #2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d103      	bne.n	8009dd8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009dd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dd2:	f000 fbe9 	bl	800a5a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009dd6:	e00c      	b.n	8009df2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dde:	f023 0301 	bic.w	r3, r3, #1
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009dea:	e002      	b.n	8009df2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009dec:	bf00      	nop
 8009dee:	e000      	b.n	8009df2 <prvProcessReceivedCommands+0x1a6>
					break;
 8009df0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009df2:	4b08      	ldr	r3, [pc, #32]	@ (8009e14 <prvProcessReceivedCommands+0x1c8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	1d39      	adds	r1, r7, #4
 8009df8:	2200      	movs	r2, #0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fe fa9a 	bl	8008334 <xQueueReceive>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f47f af26 	bne.w	8009c54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	3730      	adds	r7, #48	@ 0x30
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20001250 	.word	0x20001250

08009e18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b088      	sub	sp, #32
 8009e1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e1e:	e049      	b.n	8009eb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e20:	4b2e      	ldr	r3, [pc, #184]	@ (8009edc <prvSwitchTimerLists+0xc4>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8009edc <prvSwitchTimerLists+0xc4>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3304      	adds	r3, #4
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fd ff6b 	bl	8007d14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d02f      	beq.n	8009eb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d90e      	bls.n	8009e84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e72:	4b1a      	ldr	r3, [pc, #104]	@ (8009edc <prvSwitchTimerLists+0xc4>)
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3304      	adds	r3, #4
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	f7fd ff10 	bl	8007ca2 <vListInsert>
 8009e82:	e017      	b.n	8009eb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e84:	2300      	movs	r3, #0
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7ff fd58 	bl	8009944 <xTimerGenericCommand>
 8009e94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10b      	bne.n	8009eb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	603b      	str	r3, [r7, #0]
}
 8009eae:	bf00      	nop
 8009eb0:	bf00      	nop
 8009eb2:	e7fd      	b.n	8009eb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009eb4:	4b09      	ldr	r3, [pc, #36]	@ (8009edc <prvSwitchTimerLists+0xc4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1b0      	bne.n	8009e20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ebe:	4b07      	ldr	r3, [pc, #28]	@ (8009edc <prvSwitchTimerLists+0xc4>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ec4:	4b06      	ldr	r3, [pc, #24]	@ (8009ee0 <prvSwitchTimerLists+0xc8>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a04      	ldr	r2, [pc, #16]	@ (8009edc <prvSwitchTimerLists+0xc4>)
 8009eca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ecc:	4a04      	ldr	r2, [pc, #16]	@ (8009ee0 <prvSwitchTimerLists+0xc8>)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	6013      	str	r3, [r2, #0]
}
 8009ed2:	bf00      	nop
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20001248 	.word	0x20001248
 8009ee0:	2000124c 	.word	0x2000124c

08009ee4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009eea:	f000 f96d 	bl	800a1c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009eee:	4b15      	ldr	r3, [pc, #84]	@ (8009f44 <prvCheckForValidListAndQueue+0x60>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d120      	bne.n	8009f38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ef6:	4814      	ldr	r0, [pc, #80]	@ (8009f48 <prvCheckForValidListAndQueue+0x64>)
 8009ef8:	f7fd fe82 	bl	8007c00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009efc:	4813      	ldr	r0, [pc, #76]	@ (8009f4c <prvCheckForValidListAndQueue+0x68>)
 8009efe:	f7fd fe7f 	bl	8007c00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f02:	4b13      	ldr	r3, [pc, #76]	@ (8009f50 <prvCheckForValidListAndQueue+0x6c>)
 8009f04:	4a10      	ldr	r2, [pc, #64]	@ (8009f48 <prvCheckForValidListAndQueue+0x64>)
 8009f06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f08:	4b12      	ldr	r3, [pc, #72]	@ (8009f54 <prvCheckForValidListAndQueue+0x70>)
 8009f0a:	4a10      	ldr	r2, [pc, #64]	@ (8009f4c <prvCheckForValidListAndQueue+0x68>)
 8009f0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	4b11      	ldr	r3, [pc, #68]	@ (8009f58 <prvCheckForValidListAndQueue+0x74>)
 8009f14:	4a11      	ldr	r2, [pc, #68]	@ (8009f5c <prvCheckForValidListAndQueue+0x78>)
 8009f16:	2110      	movs	r1, #16
 8009f18:	200a      	movs	r0, #10
 8009f1a:	f7fd ff8f 	bl	8007e3c <xQueueGenericCreateStatic>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	4a08      	ldr	r2, [pc, #32]	@ (8009f44 <prvCheckForValidListAndQueue+0x60>)
 8009f22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f24:	4b07      	ldr	r3, [pc, #28]	@ (8009f44 <prvCheckForValidListAndQueue+0x60>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d005      	beq.n	8009f38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f2c:	4b05      	ldr	r3, [pc, #20]	@ (8009f44 <prvCheckForValidListAndQueue+0x60>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	490b      	ldr	r1, [pc, #44]	@ (8009f60 <prvCheckForValidListAndQueue+0x7c>)
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fc72 	bl	800881c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f38:	f000 f978 	bl	800a22c <vPortExitCritical>
}
 8009f3c:	bf00      	nop
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	20001250 	.word	0x20001250
 8009f48:	20001220 	.word	0x20001220
 8009f4c:	20001234 	.word	0x20001234
 8009f50:	20001248 	.word	0x20001248
 8009f54:	2000124c 	.word	0x2000124c
 8009f58:	200012fc 	.word	0x200012fc
 8009f5c:	2000125c 	.word	0x2000125c
 8009f60:	0800e88c 	.word	0x0800e88c

08009f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3b04      	subs	r3, #4
 8009f74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	3b04      	subs	r3, #4
 8009f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f023 0201 	bic.w	r2, r3, #1
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3b04      	subs	r3, #4
 8009f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f94:	4a0c      	ldr	r2, [pc, #48]	@ (8009fc8 <pxPortInitialiseStack+0x64>)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3b14      	subs	r3, #20
 8009f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3b04      	subs	r3, #4
 8009faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f06f 0202 	mvn.w	r2, #2
 8009fb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3b20      	subs	r3, #32
 8009fb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fba:	68fb      	ldr	r3, [r7, #12]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	08009fcd 	.word	0x08009fcd

08009fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fd6:	4b13      	ldr	r3, [pc, #76]	@ (800a024 <prvTaskExitError+0x58>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fde:	d00b      	beq.n	8009ff8 <prvTaskExitError+0x2c>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	60fb      	str	r3, [r7, #12]
}
 8009ff2:	bf00      	nop
 8009ff4:	bf00      	nop
 8009ff6:	e7fd      	b.n	8009ff4 <prvTaskExitError+0x28>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	60bb      	str	r3, [r7, #8]
}
 800a00a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a00c:	bf00      	nop
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0fc      	beq.n	800a00e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	2000000c 	.word	0x2000000c
	...

0800a030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a030:	4b07      	ldr	r3, [pc, #28]	@ (800a050 <pxCurrentTCBConst2>)
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	6808      	ldr	r0, [r1, #0]
 800a036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03a:	f380 8809 	msr	PSP, r0
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f04f 0000 	mov.w	r0, #0
 800a046:	f380 8811 	msr	BASEPRI, r0
 800a04a:	4770      	bx	lr
 800a04c:	f3af 8000 	nop.w

0800a050 <pxCurrentTCBConst2>:
 800a050:	20000d20 	.word	0x20000d20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop

0800a058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a058:	4808      	ldr	r0, [pc, #32]	@ (800a07c <prvPortStartFirstTask+0x24>)
 800a05a:	6800      	ldr	r0, [r0, #0]
 800a05c:	6800      	ldr	r0, [r0, #0]
 800a05e:	f380 8808 	msr	MSP, r0
 800a062:	f04f 0000 	mov.w	r0, #0
 800a066:	f380 8814 	msr	CONTROL, r0
 800a06a:	b662      	cpsie	i
 800a06c:	b661      	cpsie	f
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	df00      	svc	0
 800a078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a07a:	bf00      	nop
 800a07c:	e000ed08 	.word	0xe000ed08

0800a080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a086:	4b47      	ldr	r3, [pc, #284]	@ (800a1a4 <xPortStartScheduler+0x124>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a47      	ldr	r2, [pc, #284]	@ (800a1a8 <xPortStartScheduler+0x128>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d10b      	bne.n	800a0a8 <xPortStartScheduler+0x28>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	613b      	str	r3, [r7, #16]
}
 800a0a2:	bf00      	nop
 800a0a4:	bf00      	nop
 800a0a6:	e7fd      	b.n	800a0a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a1a4 <xPortStartScheduler+0x124>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a3f      	ldr	r2, [pc, #252]	@ (800a1ac <xPortStartScheduler+0x12c>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d10b      	bne.n	800a0ca <xPortStartScheduler+0x4a>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	60fb      	str	r3, [r7, #12]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0ca:	4b39      	ldr	r3, [pc, #228]	@ (800a1b0 <xPortStartScheduler+0x130>)
 800a0cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	22ff      	movs	r2, #255	@ 0xff
 800a0da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	4b31      	ldr	r3, [pc, #196]	@ (800a1b4 <xPortStartScheduler+0x134>)
 800a0f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0f2:	4b31      	ldr	r3, [pc, #196]	@ (800a1b8 <xPortStartScheduler+0x138>)
 800a0f4:	2207      	movs	r2, #7
 800a0f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0f8:	e009      	b.n	800a10e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a0fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a1b8 <xPortStartScheduler+0x138>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	4a2d      	ldr	r2, [pc, #180]	@ (800a1b8 <xPortStartScheduler+0x138>)
 800a102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a104:	78fb      	ldrb	r3, [r7, #3]
 800a106:	b2db      	uxtb	r3, r3
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a116:	2b80      	cmp	r3, #128	@ 0x80
 800a118:	d0ef      	beq.n	800a0fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a11a:	4b27      	ldr	r3, [pc, #156]	@ (800a1b8 <xPortStartScheduler+0x138>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f1c3 0307 	rsb	r3, r3, #7
 800a122:	2b04      	cmp	r3, #4
 800a124:	d00b      	beq.n	800a13e <xPortStartScheduler+0xbe>
	__asm volatile
 800a126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	60bb      	str	r3, [r7, #8]
}
 800a138:	bf00      	nop
 800a13a:	bf00      	nop
 800a13c:	e7fd      	b.n	800a13a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a13e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1b8 <xPortStartScheduler+0x138>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	021b      	lsls	r3, r3, #8
 800a144:	4a1c      	ldr	r2, [pc, #112]	@ (800a1b8 <xPortStartScheduler+0x138>)
 800a146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a148:	4b1b      	ldr	r3, [pc, #108]	@ (800a1b8 <xPortStartScheduler+0x138>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a150:	4a19      	ldr	r2, [pc, #100]	@ (800a1b8 <xPortStartScheduler+0x138>)
 800a152:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	b2da      	uxtb	r2, r3
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a15c:	4b17      	ldr	r3, [pc, #92]	@ (800a1bc <xPortStartScheduler+0x13c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a16      	ldr	r2, [pc, #88]	@ (800a1bc <xPortStartScheduler+0x13c>)
 800a162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a168:	4b14      	ldr	r3, [pc, #80]	@ (800a1bc <xPortStartScheduler+0x13c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a13      	ldr	r2, [pc, #76]	@ (800a1bc <xPortStartScheduler+0x13c>)
 800a16e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a172:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a174:	f000 f8da 	bl	800a32c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a178:	4b11      	ldr	r3, [pc, #68]	@ (800a1c0 <xPortStartScheduler+0x140>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a17e:	f000 f8f9 	bl	800a374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a182:	4b10      	ldr	r3, [pc, #64]	@ (800a1c4 <xPortStartScheduler+0x144>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a0f      	ldr	r2, [pc, #60]	@ (800a1c4 <xPortStartScheduler+0x144>)
 800a188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a18c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a18e:	f7ff ff63 	bl	800a058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a192:	f7fe ff5b 	bl	800904c <vTaskSwitchContext>
	prvTaskExitError();
 800a196:	f7ff ff19 	bl	8009fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	e000ed00 	.word	0xe000ed00
 800a1a8:	410fc271 	.word	0x410fc271
 800a1ac:	410fc270 	.word	0x410fc270
 800a1b0:	e000e400 	.word	0xe000e400
 800a1b4:	2000134c 	.word	0x2000134c
 800a1b8:	20001350 	.word	0x20001350
 800a1bc:	e000ed20 	.word	0xe000ed20
 800a1c0:	2000000c 	.word	0x2000000c
 800a1c4:	e000ef34 	.word	0xe000ef34

0800a1c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	607b      	str	r3, [r7, #4]
}
 800a1e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1e2:	4b10      	ldr	r3, [pc, #64]	@ (800a224 <vPortEnterCritical+0x5c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a224 <vPortEnterCritical+0x5c>)
 800a1ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a224 <vPortEnterCritical+0x5c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d110      	bne.n	800a216 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a228 <vPortEnterCritical+0x60>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00b      	beq.n	800a216 <vPortEnterCritical+0x4e>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	603b      	str	r3, [r7, #0]
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	e7fd      	b.n	800a212 <vPortEnterCritical+0x4a>
	}
}
 800a216:	bf00      	nop
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	2000000c 	.word	0x2000000c
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a232:	4b12      	ldr	r3, [pc, #72]	@ (800a27c <vPortExitCritical+0x50>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10b      	bne.n	800a252 <vPortExitCritical+0x26>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	607b      	str	r3, [r7, #4]
}
 800a24c:	bf00      	nop
 800a24e:	bf00      	nop
 800a250:	e7fd      	b.n	800a24e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a252:	4b0a      	ldr	r3, [pc, #40]	@ (800a27c <vPortExitCritical+0x50>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3b01      	subs	r3, #1
 800a258:	4a08      	ldr	r2, [pc, #32]	@ (800a27c <vPortExitCritical+0x50>)
 800a25a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a25c:	4b07      	ldr	r3, [pc, #28]	@ (800a27c <vPortExitCritical+0x50>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d105      	bne.n	800a270 <vPortExitCritical+0x44>
 800a264:	2300      	movs	r3, #0
 800a266:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	f383 8811 	msr	BASEPRI, r3
}
 800a26e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	2000000c 	.word	0x2000000c

0800a280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a280:	f3ef 8009 	mrs	r0, PSP
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	4b15      	ldr	r3, [pc, #84]	@ (800a2e0 <pxCurrentTCBConst>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	f01e 0f10 	tst.w	lr, #16
 800a290:	bf08      	it	eq
 800a292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29a:	6010      	str	r0, [r2, #0]
 800a29c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a2a4:	f380 8811 	msr	BASEPRI, r0
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f7fe fecc 	bl	800904c <vTaskSwitchContext>
 800a2b4:	f04f 0000 	mov.w	r0, #0
 800a2b8:	f380 8811 	msr	BASEPRI, r0
 800a2bc:	bc09      	pop	{r0, r3}
 800a2be:	6819      	ldr	r1, [r3, #0]
 800a2c0:	6808      	ldr	r0, [r1, #0]
 800a2c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c6:	f01e 0f10 	tst.w	lr, #16
 800a2ca:	bf08      	it	eq
 800a2cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2d0:	f380 8809 	msr	PSP, r0
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	f3af 8000 	nop.w

0800a2e0 <pxCurrentTCBConst>:
 800a2e0:	20000d20 	.word	0x20000d20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop

0800a2e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	607b      	str	r3, [r7, #4]
}
 800a300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a302:	f7fe fde9 	bl	8008ed8 <xTaskIncrementTick>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d003      	beq.n	800a314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a30c:	4b06      	ldr	r3, [pc, #24]	@ (800a328 <xPortSysTickHandler+0x40>)
 800a30e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	2300      	movs	r3, #0
 800a316:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	f383 8811 	msr	BASEPRI, r3
}
 800a31e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a330:	4b0b      	ldr	r3, [pc, #44]	@ (800a360 <vPortSetupTimerInterrupt+0x34>)
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a336:	4b0b      	ldr	r3, [pc, #44]	@ (800a364 <vPortSetupTimerInterrupt+0x38>)
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a33c:	4b0a      	ldr	r3, [pc, #40]	@ (800a368 <vPortSetupTimerInterrupt+0x3c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a0a      	ldr	r2, [pc, #40]	@ (800a36c <vPortSetupTimerInterrupt+0x40>)
 800a342:	fba2 2303 	umull	r2, r3, r2, r3
 800a346:	099b      	lsrs	r3, r3, #6
 800a348:	4a09      	ldr	r2, [pc, #36]	@ (800a370 <vPortSetupTimerInterrupt+0x44>)
 800a34a:	3b01      	subs	r3, #1
 800a34c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a34e:	4b04      	ldr	r3, [pc, #16]	@ (800a360 <vPortSetupTimerInterrupt+0x34>)
 800a350:	2207      	movs	r2, #7
 800a352:	601a      	str	r2, [r3, #0]
}
 800a354:	bf00      	nop
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	e000e010 	.word	0xe000e010
 800a364:	e000e018 	.word	0xe000e018
 800a368:	20000000 	.word	0x20000000
 800a36c:	10624dd3 	.word	0x10624dd3
 800a370:	e000e014 	.word	0xe000e014

0800a374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a384 <vPortEnableVFP+0x10>
 800a378:	6801      	ldr	r1, [r0, #0]
 800a37a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a37e:	6001      	str	r1, [r0, #0]
 800a380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a382:	bf00      	nop
 800a384:	e000ed88 	.word	0xe000ed88

0800a388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a38e:	f3ef 8305 	mrs	r3, IPSR
 800a392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2b0f      	cmp	r3, #15
 800a398:	d915      	bls.n	800a3c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a39a:	4a18      	ldr	r2, [pc, #96]	@ (800a3fc <vPortValidateInterruptPriority+0x74>)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4413      	add	r3, r2
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3a4:	4b16      	ldr	r3, [pc, #88]	@ (800a400 <vPortValidateInterruptPriority+0x78>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	7afa      	ldrb	r2, [r7, #11]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d20b      	bcs.n	800a3c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	607b      	str	r3, [r7, #4]
}
 800a3c0:	bf00      	nop
 800a3c2:	bf00      	nop
 800a3c4:	e7fd      	b.n	800a3c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a404 <vPortValidateInterruptPriority+0x7c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a3ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a408 <vPortValidateInterruptPriority+0x80>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d90b      	bls.n	800a3ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	603b      	str	r3, [r7, #0]
}
 800a3e8:	bf00      	nop
 800a3ea:	bf00      	nop
 800a3ec:	e7fd      	b.n	800a3ea <vPortValidateInterruptPriority+0x62>
	}
 800a3ee:	bf00      	nop
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	e000e3f0 	.word	0xe000e3f0
 800a400:	2000134c 	.word	0x2000134c
 800a404:	e000ed0c 	.word	0xe000ed0c
 800a408:	20001350 	.word	0x20001350

0800a40c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08a      	sub	sp, #40	@ 0x28
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a414:	2300      	movs	r3, #0
 800a416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a418:	f7fe fca2 	bl	8008d60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a41c:	4b5c      	ldr	r3, [pc, #368]	@ (800a590 <pvPortMalloc+0x184>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a424:	f000 f924 	bl	800a670 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a428:	4b5a      	ldr	r3, [pc, #360]	@ (800a594 <pvPortMalloc+0x188>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4013      	ands	r3, r2
 800a430:	2b00      	cmp	r3, #0
 800a432:	f040 8095 	bne.w	800a560 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01e      	beq.n	800a47a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a43c:	2208      	movs	r2, #8
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4413      	add	r3, r2
 800a442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d015      	beq.n	800a47a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f023 0307 	bic.w	r3, r3, #7
 800a454:	3308      	adds	r3, #8
 800a456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f003 0307 	and.w	r3, r3, #7
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00b      	beq.n	800a47a <pvPortMalloc+0x6e>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	617b      	str	r3, [r7, #20]
}
 800a474:	bf00      	nop
 800a476:	bf00      	nop
 800a478:	e7fd      	b.n	800a476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d06f      	beq.n	800a560 <pvPortMalloc+0x154>
 800a480:	4b45      	ldr	r3, [pc, #276]	@ (800a598 <pvPortMalloc+0x18c>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	429a      	cmp	r2, r3
 800a488:	d86a      	bhi.n	800a560 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a48a:	4b44      	ldr	r3, [pc, #272]	@ (800a59c <pvPortMalloc+0x190>)
 800a48c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a48e:	4b43      	ldr	r3, [pc, #268]	@ (800a59c <pvPortMalloc+0x190>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a494:	e004      	b.n	800a4a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d903      	bls.n	800a4b2 <pvPortMalloc+0xa6>
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f1      	bne.n	800a496 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4b2:	4b37      	ldr	r3, [pc, #220]	@ (800a590 <pvPortMalloc+0x184>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d051      	beq.n	800a560 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2208      	movs	r2, #8
 800a4c2:	4413      	add	r3, r2
 800a4c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	1ad2      	subs	r2, r2, r3
 800a4d6:	2308      	movs	r3, #8
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d920      	bls.n	800a520 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	f003 0307 	and.w	r3, r3, #7
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00b      	beq.n	800a508 <pvPortMalloc+0xfc>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	613b      	str	r3, [r7, #16]
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	1ad2      	subs	r2, r2, r3
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a51a:	69b8      	ldr	r0, [r7, #24]
 800a51c:	f000 f90a 	bl	800a734 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a520:	4b1d      	ldr	r3, [pc, #116]	@ (800a598 <pvPortMalloc+0x18c>)
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	4a1b      	ldr	r2, [pc, #108]	@ (800a598 <pvPortMalloc+0x18c>)
 800a52c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a52e:	4b1a      	ldr	r3, [pc, #104]	@ (800a598 <pvPortMalloc+0x18c>)
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	4b1b      	ldr	r3, [pc, #108]	@ (800a5a0 <pvPortMalloc+0x194>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	429a      	cmp	r2, r3
 800a538:	d203      	bcs.n	800a542 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a53a:	4b17      	ldr	r3, [pc, #92]	@ (800a598 <pvPortMalloc+0x18c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a18      	ldr	r2, [pc, #96]	@ (800a5a0 <pvPortMalloc+0x194>)
 800a540:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	4b13      	ldr	r3, [pc, #76]	@ (800a594 <pvPortMalloc+0x188>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	431a      	orrs	r2, r3
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a556:	4b13      	ldr	r3, [pc, #76]	@ (800a5a4 <pvPortMalloc+0x198>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	4a11      	ldr	r2, [pc, #68]	@ (800a5a4 <pvPortMalloc+0x198>)
 800a55e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a560:	f7fe fc0c 	bl	8008d7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00b      	beq.n	800a586 <pvPortMalloc+0x17a>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	60fb      	str	r3, [r7, #12]
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	e7fd      	b.n	800a582 <pvPortMalloc+0x176>
	return pvReturn;
 800a586:	69fb      	ldr	r3, [r7, #28]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3728      	adds	r7, #40	@ 0x28
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20004f5c 	.word	0x20004f5c
 800a594:	20004f70 	.word	0x20004f70
 800a598:	20004f60 	.word	0x20004f60
 800a59c:	20004f54 	.word	0x20004f54
 800a5a0:	20004f64 	.word	0x20004f64
 800a5a4:	20004f68 	.word	0x20004f68

0800a5a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d04f      	beq.n	800a65a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5ba:	2308      	movs	r3, #8
 800a5bc:	425b      	negs	r3, r3
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	4b25      	ldr	r3, [pc, #148]	@ (800a664 <vPortFree+0xbc>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10b      	bne.n	800a5ee <vPortFree+0x46>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	60fb      	str	r3, [r7, #12]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00b      	beq.n	800a60e <vPortFree+0x66>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	60bb      	str	r3, [r7, #8]
}
 800a608:	bf00      	nop
 800a60a:	bf00      	nop
 800a60c:	e7fd      	b.n	800a60a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	4b14      	ldr	r3, [pc, #80]	@ (800a664 <vPortFree+0xbc>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4013      	ands	r3, r2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d01e      	beq.n	800a65a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d11a      	bne.n	800a65a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	4b0e      	ldr	r3, [pc, #56]	@ (800a664 <vPortFree+0xbc>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	43db      	mvns	r3, r3
 800a62e:	401a      	ands	r2, r3
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a634:	f7fe fb94 	bl	8008d60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	4b0a      	ldr	r3, [pc, #40]	@ (800a668 <vPortFree+0xc0>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4413      	add	r3, r2
 800a642:	4a09      	ldr	r2, [pc, #36]	@ (800a668 <vPortFree+0xc0>)
 800a644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a646:	6938      	ldr	r0, [r7, #16]
 800a648:	f000 f874 	bl	800a734 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a64c:	4b07      	ldr	r3, [pc, #28]	@ (800a66c <vPortFree+0xc4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3301      	adds	r3, #1
 800a652:	4a06      	ldr	r2, [pc, #24]	@ (800a66c <vPortFree+0xc4>)
 800a654:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a656:	f7fe fb91 	bl	8008d7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a65a:	bf00      	nop
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20004f70 	.word	0x20004f70
 800a668:	20004f60 	.word	0x20004f60
 800a66c:	20004f6c 	.word	0x20004f6c

0800a670 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a676:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a67a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a67c:	4b27      	ldr	r3, [pc, #156]	@ (800a71c <prvHeapInit+0xac>)
 800a67e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00c      	beq.n	800a6a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3307      	adds	r3, #7
 800a68e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 0307 	bic.w	r3, r3, #7
 800a696:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	4a1f      	ldr	r2, [pc, #124]	@ (800a71c <prvHeapInit+0xac>)
 800a6a0:	4413      	add	r3, r2
 800a6a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a720 <prvHeapInit+0xb0>)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a720 <prvHeapInit+0xb0>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6bc:	2208      	movs	r2, #8
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	1a9b      	subs	r3, r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f023 0307 	bic.w	r3, r3, #7
 800a6ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4a15      	ldr	r2, [pc, #84]	@ (800a724 <prvHeapInit+0xb4>)
 800a6d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6d2:	4b14      	ldr	r3, [pc, #80]	@ (800a724 <prvHeapInit+0xb4>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6da:	4b12      	ldr	r3, [pc, #72]	@ (800a724 <prvHeapInit+0xb4>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	1ad2      	subs	r2, r2, r3
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a724 <prvHeapInit+0xb4>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a728 <prvHeapInit+0xb8>)
 800a6fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	4a09      	ldr	r2, [pc, #36]	@ (800a72c <prvHeapInit+0xbc>)
 800a706:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a708:	4b09      	ldr	r3, [pc, #36]	@ (800a730 <prvHeapInit+0xc0>)
 800a70a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a70e:	601a      	str	r2, [r3, #0]
}
 800a710:	bf00      	nop
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	20001354 	.word	0x20001354
 800a720:	20004f54 	.word	0x20004f54
 800a724:	20004f5c 	.word	0x20004f5c
 800a728:	20004f64 	.word	0x20004f64
 800a72c:	20004f60 	.word	0x20004f60
 800a730:	20004f70 	.word	0x20004f70

0800a734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a73c:	4b28      	ldr	r3, [pc, #160]	@ (800a7e0 <prvInsertBlockIntoFreeList+0xac>)
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	e002      	b.n	800a748 <prvInsertBlockIntoFreeList+0x14>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d8f7      	bhi.n	800a742 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	4413      	add	r3, r2
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	429a      	cmp	r2, r3
 800a762:	d108      	bne.n	800a776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	441a      	add	r2, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	441a      	add	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d118      	bne.n	800a7bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	4b15      	ldr	r3, [pc, #84]	@ (800a7e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	429a      	cmp	r2, r3
 800a794:	d00d      	beq.n	800a7b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	441a      	add	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	e008      	b.n	800a7c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
 800a7ba:	e003      	b.n	800a7c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d002      	beq.n	800a7d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7d2:	bf00      	nop
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	20004f54 	.word	0x20004f54
 800a7e4:	20004f5c 	.word	0x20004f5c

0800a7e8 <atoi>:
 800a7e8:	220a      	movs	r2, #10
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	f000 b87a 	b.w	800a8e4 <strtol>

0800a7f0 <_strtol_l.constprop.0>:
 800a7f0:	2b24      	cmp	r3, #36	@ 0x24
 800a7f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f6:	4686      	mov	lr, r0
 800a7f8:	4690      	mov	r8, r2
 800a7fa:	d801      	bhi.n	800a800 <_strtol_l.constprop.0+0x10>
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d106      	bne.n	800a80e <_strtol_l.constprop.0+0x1e>
 800a800:	f000 ff52 	bl	800b6a8 <__errno>
 800a804:	2316      	movs	r3, #22
 800a806:	6003      	str	r3, [r0, #0]
 800a808:	2000      	movs	r0, #0
 800a80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80e:	4834      	ldr	r0, [pc, #208]	@ (800a8e0 <_strtol_l.constprop.0+0xf0>)
 800a810:	460d      	mov	r5, r1
 800a812:	462a      	mov	r2, r5
 800a814:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a818:	5d06      	ldrb	r6, [r0, r4]
 800a81a:	f016 0608 	ands.w	r6, r6, #8
 800a81e:	d1f8      	bne.n	800a812 <_strtol_l.constprop.0+0x22>
 800a820:	2c2d      	cmp	r4, #45	@ 0x2d
 800a822:	d12d      	bne.n	800a880 <_strtol_l.constprop.0+0x90>
 800a824:	782c      	ldrb	r4, [r5, #0]
 800a826:	2601      	movs	r6, #1
 800a828:	1c95      	adds	r5, r2, #2
 800a82a:	f033 0210 	bics.w	r2, r3, #16
 800a82e:	d109      	bne.n	800a844 <_strtol_l.constprop.0+0x54>
 800a830:	2c30      	cmp	r4, #48	@ 0x30
 800a832:	d12a      	bne.n	800a88a <_strtol_l.constprop.0+0x9a>
 800a834:	782a      	ldrb	r2, [r5, #0]
 800a836:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a83a:	2a58      	cmp	r2, #88	@ 0x58
 800a83c:	d125      	bne.n	800a88a <_strtol_l.constprop.0+0x9a>
 800a83e:	786c      	ldrb	r4, [r5, #1]
 800a840:	2310      	movs	r3, #16
 800a842:	3502      	adds	r5, #2
 800a844:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a848:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a84c:	2200      	movs	r2, #0
 800a84e:	fbbc f9f3 	udiv	r9, ip, r3
 800a852:	4610      	mov	r0, r2
 800a854:	fb03 ca19 	mls	sl, r3, r9, ip
 800a858:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a85c:	2f09      	cmp	r7, #9
 800a85e:	d81b      	bhi.n	800a898 <_strtol_l.constprop.0+0xa8>
 800a860:	463c      	mov	r4, r7
 800a862:	42a3      	cmp	r3, r4
 800a864:	dd27      	ble.n	800a8b6 <_strtol_l.constprop.0+0xc6>
 800a866:	1c57      	adds	r7, r2, #1
 800a868:	d007      	beq.n	800a87a <_strtol_l.constprop.0+0x8a>
 800a86a:	4581      	cmp	r9, r0
 800a86c:	d320      	bcc.n	800a8b0 <_strtol_l.constprop.0+0xc0>
 800a86e:	d101      	bne.n	800a874 <_strtol_l.constprop.0+0x84>
 800a870:	45a2      	cmp	sl, r4
 800a872:	db1d      	blt.n	800a8b0 <_strtol_l.constprop.0+0xc0>
 800a874:	fb00 4003 	mla	r0, r0, r3, r4
 800a878:	2201      	movs	r2, #1
 800a87a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a87e:	e7eb      	b.n	800a858 <_strtol_l.constprop.0+0x68>
 800a880:	2c2b      	cmp	r4, #43	@ 0x2b
 800a882:	bf04      	itt	eq
 800a884:	782c      	ldrbeq	r4, [r5, #0]
 800a886:	1c95      	addeq	r5, r2, #2
 800a888:	e7cf      	b.n	800a82a <_strtol_l.constprop.0+0x3a>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1da      	bne.n	800a844 <_strtol_l.constprop.0+0x54>
 800a88e:	2c30      	cmp	r4, #48	@ 0x30
 800a890:	bf0c      	ite	eq
 800a892:	2308      	moveq	r3, #8
 800a894:	230a      	movne	r3, #10
 800a896:	e7d5      	b.n	800a844 <_strtol_l.constprop.0+0x54>
 800a898:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a89c:	2f19      	cmp	r7, #25
 800a89e:	d801      	bhi.n	800a8a4 <_strtol_l.constprop.0+0xb4>
 800a8a0:	3c37      	subs	r4, #55	@ 0x37
 800a8a2:	e7de      	b.n	800a862 <_strtol_l.constprop.0+0x72>
 800a8a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a8a8:	2f19      	cmp	r7, #25
 800a8aa:	d804      	bhi.n	800a8b6 <_strtol_l.constprop.0+0xc6>
 800a8ac:	3c57      	subs	r4, #87	@ 0x57
 800a8ae:	e7d8      	b.n	800a862 <_strtol_l.constprop.0+0x72>
 800a8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b4:	e7e1      	b.n	800a87a <_strtol_l.constprop.0+0x8a>
 800a8b6:	1c53      	adds	r3, r2, #1
 800a8b8:	d108      	bne.n	800a8cc <_strtol_l.constprop.0+0xdc>
 800a8ba:	2322      	movs	r3, #34	@ 0x22
 800a8bc:	f8ce 3000 	str.w	r3, [lr]
 800a8c0:	4660      	mov	r0, ip
 800a8c2:	f1b8 0f00 	cmp.w	r8, #0
 800a8c6:	d0a0      	beq.n	800a80a <_strtol_l.constprop.0+0x1a>
 800a8c8:	1e69      	subs	r1, r5, #1
 800a8ca:	e006      	b.n	800a8da <_strtol_l.constprop.0+0xea>
 800a8cc:	b106      	cbz	r6, 800a8d0 <_strtol_l.constprop.0+0xe0>
 800a8ce:	4240      	negs	r0, r0
 800a8d0:	f1b8 0f00 	cmp.w	r8, #0
 800a8d4:	d099      	beq.n	800a80a <_strtol_l.constprop.0+0x1a>
 800a8d6:	2a00      	cmp	r2, #0
 800a8d8:	d1f6      	bne.n	800a8c8 <_strtol_l.constprop.0+0xd8>
 800a8da:	f8c8 1000 	str.w	r1, [r8]
 800a8de:	e794      	b.n	800a80a <_strtol_l.constprop.0+0x1a>
 800a8e0:	0800e8b9 	.word	0x0800e8b9

0800a8e4 <strtol>:
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	460a      	mov	r2, r1
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	4802      	ldr	r0, [pc, #8]	@ (800a8f4 <strtol+0x10>)
 800a8ec:	6800      	ldr	r0, [r0, #0]
 800a8ee:	f7ff bf7f 	b.w	800a7f0 <_strtol_l.constprop.0>
 800a8f2:	bf00      	nop
 800a8f4:	2000001c 	.word	0x2000001c

0800a8f8 <__cvt>:
 800a8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	ec57 6b10 	vmov	r6, r7, d0
 800a900:	2f00      	cmp	r7, #0
 800a902:	460c      	mov	r4, r1
 800a904:	4619      	mov	r1, r3
 800a906:	463b      	mov	r3, r7
 800a908:	bfbb      	ittet	lt
 800a90a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a90e:	461f      	movlt	r7, r3
 800a910:	2300      	movge	r3, #0
 800a912:	232d      	movlt	r3, #45	@ 0x2d
 800a914:	700b      	strb	r3, [r1, #0]
 800a916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a918:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a91c:	4691      	mov	r9, r2
 800a91e:	f023 0820 	bic.w	r8, r3, #32
 800a922:	bfbc      	itt	lt
 800a924:	4632      	movlt	r2, r6
 800a926:	4616      	movlt	r6, r2
 800a928:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a92c:	d005      	beq.n	800a93a <__cvt+0x42>
 800a92e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a932:	d100      	bne.n	800a936 <__cvt+0x3e>
 800a934:	3401      	adds	r4, #1
 800a936:	2102      	movs	r1, #2
 800a938:	e000      	b.n	800a93c <__cvt+0x44>
 800a93a:	2103      	movs	r1, #3
 800a93c:	ab03      	add	r3, sp, #12
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	ab02      	add	r3, sp, #8
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	ec47 6b10 	vmov	d0, r6, r7
 800a948:	4653      	mov	r3, sl
 800a94a:	4622      	mov	r2, r4
 800a94c:	f000 ff70 	bl	800b830 <_dtoa_r>
 800a950:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a954:	4605      	mov	r5, r0
 800a956:	d119      	bne.n	800a98c <__cvt+0x94>
 800a958:	f019 0f01 	tst.w	r9, #1
 800a95c:	d00e      	beq.n	800a97c <__cvt+0x84>
 800a95e:	eb00 0904 	add.w	r9, r0, r4
 800a962:	2200      	movs	r2, #0
 800a964:	2300      	movs	r3, #0
 800a966:	4630      	mov	r0, r6
 800a968:	4639      	mov	r1, r7
 800a96a:	f7f6 f8cd 	bl	8000b08 <__aeabi_dcmpeq>
 800a96e:	b108      	cbz	r0, 800a974 <__cvt+0x7c>
 800a970:	f8cd 900c 	str.w	r9, [sp, #12]
 800a974:	2230      	movs	r2, #48	@ 0x30
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	454b      	cmp	r3, r9
 800a97a:	d31e      	bcc.n	800a9ba <__cvt+0xc2>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a980:	1b5b      	subs	r3, r3, r5
 800a982:	4628      	mov	r0, r5
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	b004      	add	sp, #16
 800a988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a990:	eb00 0904 	add.w	r9, r0, r4
 800a994:	d1e5      	bne.n	800a962 <__cvt+0x6a>
 800a996:	7803      	ldrb	r3, [r0, #0]
 800a998:	2b30      	cmp	r3, #48	@ 0x30
 800a99a:	d10a      	bne.n	800a9b2 <__cvt+0xba>
 800a99c:	2200      	movs	r2, #0
 800a99e:	2300      	movs	r3, #0
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f6 f8b0 	bl	8000b08 <__aeabi_dcmpeq>
 800a9a8:	b918      	cbnz	r0, 800a9b2 <__cvt+0xba>
 800a9aa:	f1c4 0401 	rsb	r4, r4, #1
 800a9ae:	f8ca 4000 	str.w	r4, [sl]
 800a9b2:	f8da 3000 	ldr.w	r3, [sl]
 800a9b6:	4499      	add	r9, r3
 800a9b8:	e7d3      	b.n	800a962 <__cvt+0x6a>
 800a9ba:	1c59      	adds	r1, r3, #1
 800a9bc:	9103      	str	r1, [sp, #12]
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	e7d9      	b.n	800a976 <__cvt+0x7e>

0800a9c2 <__exponent>:
 800a9c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	bfba      	itte	lt
 800a9c8:	4249      	neglt	r1, r1
 800a9ca:	232d      	movlt	r3, #45	@ 0x2d
 800a9cc:	232b      	movge	r3, #43	@ 0x2b
 800a9ce:	2909      	cmp	r1, #9
 800a9d0:	7002      	strb	r2, [r0, #0]
 800a9d2:	7043      	strb	r3, [r0, #1]
 800a9d4:	dd29      	ble.n	800aa2a <__exponent+0x68>
 800a9d6:	f10d 0307 	add.w	r3, sp, #7
 800a9da:	461d      	mov	r5, r3
 800a9dc:	270a      	movs	r7, #10
 800a9de:	461a      	mov	r2, r3
 800a9e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a9e4:	fb07 1416 	mls	r4, r7, r6, r1
 800a9e8:	3430      	adds	r4, #48	@ 0x30
 800a9ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	2c63      	cmp	r4, #99	@ 0x63
 800a9f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	dcf1      	bgt.n	800a9de <__exponent+0x1c>
 800a9fa:	3130      	adds	r1, #48	@ 0x30
 800a9fc:	1e94      	subs	r4, r2, #2
 800a9fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa02:	1c41      	adds	r1, r0, #1
 800aa04:	4623      	mov	r3, r4
 800aa06:	42ab      	cmp	r3, r5
 800aa08:	d30a      	bcc.n	800aa20 <__exponent+0x5e>
 800aa0a:	f10d 0309 	add.w	r3, sp, #9
 800aa0e:	1a9b      	subs	r3, r3, r2
 800aa10:	42ac      	cmp	r4, r5
 800aa12:	bf88      	it	hi
 800aa14:	2300      	movhi	r3, #0
 800aa16:	3302      	adds	r3, #2
 800aa18:	4403      	add	r3, r0
 800aa1a:	1a18      	subs	r0, r3, r0
 800aa1c:	b003      	add	sp, #12
 800aa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa20:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aa24:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aa28:	e7ed      	b.n	800aa06 <__exponent+0x44>
 800aa2a:	2330      	movs	r3, #48	@ 0x30
 800aa2c:	3130      	adds	r1, #48	@ 0x30
 800aa2e:	7083      	strb	r3, [r0, #2]
 800aa30:	70c1      	strb	r1, [r0, #3]
 800aa32:	1d03      	adds	r3, r0, #4
 800aa34:	e7f1      	b.n	800aa1a <__exponent+0x58>
	...

0800aa38 <_printf_float>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	b08d      	sub	sp, #52	@ 0x34
 800aa3e:	460c      	mov	r4, r1
 800aa40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aa44:	4616      	mov	r6, r2
 800aa46:	461f      	mov	r7, r3
 800aa48:	4605      	mov	r5, r0
 800aa4a:	f000 fde3 	bl	800b614 <_localeconv_r>
 800aa4e:	6803      	ldr	r3, [r0, #0]
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7f5 fc2c 	bl	80002b0 <strlen>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa5c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa60:	9005      	str	r0, [sp, #20]
 800aa62:	3307      	adds	r3, #7
 800aa64:	f023 0307 	bic.w	r3, r3, #7
 800aa68:	f103 0208 	add.w	r2, r3, #8
 800aa6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa70:	f8d4 b000 	ldr.w	fp, [r4]
 800aa74:	f8c8 2000 	str.w	r2, [r8]
 800aa78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aa80:	9307      	str	r3, [sp, #28]
 800aa82:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aa8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa8e:	4b9c      	ldr	r3, [pc, #624]	@ (800ad00 <_printf_float+0x2c8>)
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	f7f6 f86a 	bl	8000b6c <__aeabi_dcmpun>
 800aa98:	bb70      	cbnz	r0, 800aaf8 <_printf_float+0xc0>
 800aa9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa9e:	4b98      	ldr	r3, [pc, #608]	@ (800ad00 <_printf_float+0x2c8>)
 800aaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa4:	f7f6 f844 	bl	8000b30 <__aeabi_dcmple>
 800aaa8:	bb30      	cbnz	r0, 800aaf8 <_printf_float+0xc0>
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2300      	movs	r3, #0
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	f7f6 f833 	bl	8000b1c <__aeabi_dcmplt>
 800aab6:	b110      	cbz	r0, 800aabe <_printf_float+0x86>
 800aab8:	232d      	movs	r3, #45	@ 0x2d
 800aaba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aabe:	4a91      	ldr	r2, [pc, #580]	@ (800ad04 <_printf_float+0x2cc>)
 800aac0:	4b91      	ldr	r3, [pc, #580]	@ (800ad08 <_printf_float+0x2d0>)
 800aac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aac6:	bf94      	ite	ls
 800aac8:	4690      	movls	r8, r2
 800aaca:	4698      	movhi	r8, r3
 800aacc:	2303      	movs	r3, #3
 800aace:	6123      	str	r3, [r4, #16]
 800aad0:	f02b 0304 	bic.w	r3, fp, #4
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	f04f 0900 	mov.w	r9, #0
 800aada:	9700      	str	r7, [sp, #0]
 800aadc:	4633      	mov	r3, r6
 800aade:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aae0:	4621      	mov	r1, r4
 800aae2:	4628      	mov	r0, r5
 800aae4:	f000 f9d2 	bl	800ae8c <_printf_common>
 800aae8:	3001      	adds	r0, #1
 800aaea:	f040 808d 	bne.w	800ac08 <_printf_float+0x1d0>
 800aaee:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf2:	b00d      	add	sp, #52	@ 0x34
 800aaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf8:	4642      	mov	r2, r8
 800aafa:	464b      	mov	r3, r9
 800aafc:	4640      	mov	r0, r8
 800aafe:	4649      	mov	r1, r9
 800ab00:	f7f6 f834 	bl	8000b6c <__aeabi_dcmpun>
 800ab04:	b140      	cbz	r0, 800ab18 <_printf_float+0xe0>
 800ab06:	464b      	mov	r3, r9
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfbc      	itt	lt
 800ab0c:	232d      	movlt	r3, #45	@ 0x2d
 800ab0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ab12:	4a7e      	ldr	r2, [pc, #504]	@ (800ad0c <_printf_float+0x2d4>)
 800ab14:	4b7e      	ldr	r3, [pc, #504]	@ (800ad10 <_printf_float+0x2d8>)
 800ab16:	e7d4      	b.n	800aac2 <_printf_float+0x8a>
 800ab18:	6863      	ldr	r3, [r4, #4]
 800ab1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ab1e:	9206      	str	r2, [sp, #24]
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	d13b      	bne.n	800ab9c <_printf_float+0x164>
 800ab24:	2306      	movs	r3, #6
 800ab26:	6063      	str	r3, [r4, #4]
 800ab28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	6022      	str	r2, [r4, #0]
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab34:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ab38:	ab09      	add	r3, sp, #36	@ 0x24
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	6861      	ldr	r1, [r4, #4]
 800ab3e:	ec49 8b10 	vmov	d0, r8, r9
 800ab42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ab46:	4628      	mov	r0, r5
 800ab48:	f7ff fed6 	bl	800a8f8 <__cvt>
 800ab4c:	9b06      	ldr	r3, [sp, #24]
 800ab4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab50:	2b47      	cmp	r3, #71	@ 0x47
 800ab52:	4680      	mov	r8, r0
 800ab54:	d129      	bne.n	800abaa <_printf_float+0x172>
 800ab56:	1cc8      	adds	r0, r1, #3
 800ab58:	db02      	blt.n	800ab60 <_printf_float+0x128>
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	dd41      	ble.n	800abe4 <_printf_float+0x1ac>
 800ab60:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab64:	fa5f fa8a 	uxtb.w	sl, sl
 800ab68:	3901      	subs	r1, #1
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ab70:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab72:	f7ff ff26 	bl	800a9c2 <__exponent>
 800ab76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab78:	1813      	adds	r3, r2, r0
 800ab7a:	2a01      	cmp	r2, #1
 800ab7c:	4681      	mov	r9, r0
 800ab7e:	6123      	str	r3, [r4, #16]
 800ab80:	dc02      	bgt.n	800ab88 <_printf_float+0x150>
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	07d2      	lsls	r2, r2, #31
 800ab86:	d501      	bpl.n	800ab8c <_printf_float+0x154>
 800ab88:	3301      	adds	r3, #1
 800ab8a:	6123      	str	r3, [r4, #16]
 800ab8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0a2      	beq.n	800aada <_printf_float+0xa2>
 800ab94:	232d      	movs	r3, #45	@ 0x2d
 800ab96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab9a:	e79e      	b.n	800aada <_printf_float+0xa2>
 800ab9c:	9a06      	ldr	r2, [sp, #24]
 800ab9e:	2a47      	cmp	r2, #71	@ 0x47
 800aba0:	d1c2      	bne.n	800ab28 <_printf_float+0xf0>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1c0      	bne.n	800ab28 <_printf_float+0xf0>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e7bd      	b.n	800ab26 <_printf_float+0xee>
 800abaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800abae:	d9db      	bls.n	800ab68 <_printf_float+0x130>
 800abb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800abb4:	d118      	bne.n	800abe8 <_printf_float+0x1b0>
 800abb6:	2900      	cmp	r1, #0
 800abb8:	6863      	ldr	r3, [r4, #4]
 800abba:	dd0b      	ble.n	800abd4 <_printf_float+0x19c>
 800abbc:	6121      	str	r1, [r4, #16]
 800abbe:	b913      	cbnz	r3, 800abc6 <_printf_float+0x18e>
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	07d0      	lsls	r0, r2, #31
 800abc4:	d502      	bpl.n	800abcc <_printf_float+0x194>
 800abc6:	3301      	adds	r3, #1
 800abc8:	440b      	add	r3, r1
 800abca:	6123      	str	r3, [r4, #16]
 800abcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800abce:	f04f 0900 	mov.w	r9, #0
 800abd2:	e7db      	b.n	800ab8c <_printf_float+0x154>
 800abd4:	b913      	cbnz	r3, 800abdc <_printf_float+0x1a4>
 800abd6:	6822      	ldr	r2, [r4, #0]
 800abd8:	07d2      	lsls	r2, r2, #31
 800abda:	d501      	bpl.n	800abe0 <_printf_float+0x1a8>
 800abdc:	3302      	adds	r3, #2
 800abde:	e7f4      	b.n	800abca <_printf_float+0x192>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e7f2      	b.n	800abca <_printf_float+0x192>
 800abe4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800abe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abea:	4299      	cmp	r1, r3
 800abec:	db05      	blt.n	800abfa <_printf_float+0x1c2>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	6121      	str	r1, [r4, #16]
 800abf2:	07d8      	lsls	r0, r3, #31
 800abf4:	d5ea      	bpl.n	800abcc <_printf_float+0x194>
 800abf6:	1c4b      	adds	r3, r1, #1
 800abf8:	e7e7      	b.n	800abca <_printf_float+0x192>
 800abfa:	2900      	cmp	r1, #0
 800abfc:	bfd4      	ite	le
 800abfe:	f1c1 0202 	rsble	r2, r1, #2
 800ac02:	2201      	movgt	r2, #1
 800ac04:	4413      	add	r3, r2
 800ac06:	e7e0      	b.n	800abca <_printf_float+0x192>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	055a      	lsls	r2, r3, #21
 800ac0c:	d407      	bmi.n	800ac1e <_printf_float+0x1e6>
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	4642      	mov	r2, r8
 800ac12:	4631      	mov	r1, r6
 800ac14:	4628      	mov	r0, r5
 800ac16:	47b8      	blx	r7
 800ac18:	3001      	adds	r0, #1
 800ac1a:	d12b      	bne.n	800ac74 <_printf_float+0x23c>
 800ac1c:	e767      	b.n	800aaee <_printf_float+0xb6>
 800ac1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac22:	f240 80dd 	bls.w	800ade0 <_printf_float+0x3a8>
 800ac26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f7f5 ff6b 	bl	8000b08 <__aeabi_dcmpeq>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d033      	beq.n	800ac9e <_printf_float+0x266>
 800ac36:	4a37      	ldr	r2, [pc, #220]	@ (800ad14 <_printf_float+0x2dc>)
 800ac38:	2301      	movs	r3, #1
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	47b8      	blx	r7
 800ac40:	3001      	adds	r0, #1
 800ac42:	f43f af54 	beq.w	800aaee <_printf_float+0xb6>
 800ac46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ac4a:	4543      	cmp	r3, r8
 800ac4c:	db02      	blt.n	800ac54 <_printf_float+0x21c>
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	07d8      	lsls	r0, r3, #31
 800ac52:	d50f      	bpl.n	800ac74 <_printf_float+0x23c>
 800ac54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b8      	blx	r7
 800ac5e:	3001      	adds	r0, #1
 800ac60:	f43f af45 	beq.w	800aaee <_printf_float+0xb6>
 800ac64:	f04f 0900 	mov.w	r9, #0
 800ac68:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac6c:	f104 0a1a 	add.w	sl, r4, #26
 800ac70:	45c8      	cmp	r8, r9
 800ac72:	dc09      	bgt.n	800ac88 <_printf_float+0x250>
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	079b      	lsls	r3, r3, #30
 800ac78:	f100 8103 	bmi.w	800ae82 <_printf_float+0x44a>
 800ac7c:	68e0      	ldr	r0, [r4, #12]
 800ac7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac80:	4298      	cmp	r0, r3
 800ac82:	bfb8      	it	lt
 800ac84:	4618      	movlt	r0, r3
 800ac86:	e734      	b.n	800aaf2 <_printf_float+0xba>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	4652      	mov	r2, sl
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4628      	mov	r0, r5
 800ac90:	47b8      	blx	r7
 800ac92:	3001      	adds	r0, #1
 800ac94:	f43f af2b 	beq.w	800aaee <_printf_float+0xb6>
 800ac98:	f109 0901 	add.w	r9, r9, #1
 800ac9c:	e7e8      	b.n	800ac70 <_printf_float+0x238>
 800ac9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dc39      	bgt.n	800ad18 <_printf_float+0x2e0>
 800aca4:	4a1b      	ldr	r2, [pc, #108]	@ (800ad14 <_printf_float+0x2dc>)
 800aca6:	2301      	movs	r3, #1
 800aca8:	4631      	mov	r1, r6
 800acaa:	4628      	mov	r0, r5
 800acac:	47b8      	blx	r7
 800acae:	3001      	adds	r0, #1
 800acb0:	f43f af1d 	beq.w	800aaee <_printf_float+0xb6>
 800acb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800acb8:	ea59 0303 	orrs.w	r3, r9, r3
 800acbc:	d102      	bne.n	800acc4 <_printf_float+0x28c>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	07d9      	lsls	r1, r3, #31
 800acc2:	d5d7      	bpl.n	800ac74 <_printf_float+0x23c>
 800acc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acc8:	4631      	mov	r1, r6
 800acca:	4628      	mov	r0, r5
 800accc:	47b8      	blx	r7
 800acce:	3001      	adds	r0, #1
 800acd0:	f43f af0d 	beq.w	800aaee <_printf_float+0xb6>
 800acd4:	f04f 0a00 	mov.w	sl, #0
 800acd8:	f104 0b1a 	add.w	fp, r4, #26
 800acdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acde:	425b      	negs	r3, r3
 800ace0:	4553      	cmp	r3, sl
 800ace2:	dc01      	bgt.n	800ace8 <_printf_float+0x2b0>
 800ace4:	464b      	mov	r3, r9
 800ace6:	e793      	b.n	800ac10 <_printf_float+0x1d8>
 800ace8:	2301      	movs	r3, #1
 800acea:	465a      	mov	r2, fp
 800acec:	4631      	mov	r1, r6
 800acee:	4628      	mov	r0, r5
 800acf0:	47b8      	blx	r7
 800acf2:	3001      	adds	r0, #1
 800acf4:	f43f aefb 	beq.w	800aaee <_printf_float+0xb6>
 800acf8:	f10a 0a01 	add.w	sl, sl, #1
 800acfc:	e7ee      	b.n	800acdc <_printf_float+0x2a4>
 800acfe:	bf00      	nop
 800ad00:	7fefffff 	.word	0x7fefffff
 800ad04:	0800e9b9 	.word	0x0800e9b9
 800ad08:	0800e9bd 	.word	0x0800e9bd
 800ad0c:	0800e9c1 	.word	0x0800e9c1
 800ad10:	0800e9c5 	.word	0x0800e9c5
 800ad14:	0800e9c9 	.word	0x0800e9c9
 800ad18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad1e:	4553      	cmp	r3, sl
 800ad20:	bfa8      	it	ge
 800ad22:	4653      	movge	r3, sl
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	4699      	mov	r9, r3
 800ad28:	dc36      	bgt.n	800ad98 <_printf_float+0x360>
 800ad2a:	f04f 0b00 	mov.w	fp, #0
 800ad2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad32:	f104 021a 	add.w	r2, r4, #26
 800ad36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad38:	9306      	str	r3, [sp, #24]
 800ad3a:	eba3 0309 	sub.w	r3, r3, r9
 800ad3e:	455b      	cmp	r3, fp
 800ad40:	dc31      	bgt.n	800ada6 <_printf_float+0x36e>
 800ad42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad44:	459a      	cmp	sl, r3
 800ad46:	dc3a      	bgt.n	800adbe <_printf_float+0x386>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	07da      	lsls	r2, r3, #31
 800ad4c:	d437      	bmi.n	800adbe <_printf_float+0x386>
 800ad4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad50:	ebaa 0903 	sub.w	r9, sl, r3
 800ad54:	9b06      	ldr	r3, [sp, #24]
 800ad56:	ebaa 0303 	sub.w	r3, sl, r3
 800ad5a:	4599      	cmp	r9, r3
 800ad5c:	bfa8      	it	ge
 800ad5e:	4699      	movge	r9, r3
 800ad60:	f1b9 0f00 	cmp.w	r9, #0
 800ad64:	dc33      	bgt.n	800adce <_printf_float+0x396>
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad6e:	f104 0b1a 	add.w	fp, r4, #26
 800ad72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad74:	ebaa 0303 	sub.w	r3, sl, r3
 800ad78:	eba3 0309 	sub.w	r3, r3, r9
 800ad7c:	4543      	cmp	r3, r8
 800ad7e:	f77f af79 	ble.w	800ac74 <_printf_float+0x23c>
 800ad82:	2301      	movs	r3, #1
 800ad84:	465a      	mov	r2, fp
 800ad86:	4631      	mov	r1, r6
 800ad88:	4628      	mov	r0, r5
 800ad8a:	47b8      	blx	r7
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	f43f aeae 	beq.w	800aaee <_printf_float+0xb6>
 800ad92:	f108 0801 	add.w	r8, r8, #1
 800ad96:	e7ec      	b.n	800ad72 <_printf_float+0x33a>
 800ad98:	4642      	mov	r2, r8
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	d1c2      	bne.n	800ad2a <_printf_float+0x2f2>
 800ada4:	e6a3      	b.n	800aaee <_printf_float+0xb6>
 800ada6:	2301      	movs	r3, #1
 800ada8:	4631      	mov	r1, r6
 800adaa:	4628      	mov	r0, r5
 800adac:	9206      	str	r2, [sp, #24]
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	f43f ae9c 	beq.w	800aaee <_printf_float+0xb6>
 800adb6:	9a06      	ldr	r2, [sp, #24]
 800adb8:	f10b 0b01 	add.w	fp, fp, #1
 800adbc:	e7bb      	b.n	800ad36 <_printf_float+0x2fe>
 800adbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adc2:	4631      	mov	r1, r6
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b8      	blx	r7
 800adc8:	3001      	adds	r0, #1
 800adca:	d1c0      	bne.n	800ad4e <_printf_float+0x316>
 800adcc:	e68f      	b.n	800aaee <_printf_float+0xb6>
 800adce:	9a06      	ldr	r2, [sp, #24]
 800add0:	464b      	mov	r3, r9
 800add2:	4442      	add	r2, r8
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	d1c3      	bne.n	800ad66 <_printf_float+0x32e>
 800adde:	e686      	b.n	800aaee <_printf_float+0xb6>
 800ade0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ade4:	f1ba 0f01 	cmp.w	sl, #1
 800ade8:	dc01      	bgt.n	800adee <_printf_float+0x3b6>
 800adea:	07db      	lsls	r3, r3, #31
 800adec:	d536      	bpl.n	800ae5c <_printf_float+0x424>
 800adee:	2301      	movs	r3, #1
 800adf0:	4642      	mov	r2, r8
 800adf2:	4631      	mov	r1, r6
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b8      	blx	r7
 800adf8:	3001      	adds	r0, #1
 800adfa:	f43f ae78 	beq.w	800aaee <_printf_float+0xb6>
 800adfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae02:	4631      	mov	r1, r6
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b8      	blx	r7
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f43f ae70 	beq.w	800aaee <_printf_float+0xb6>
 800ae0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae1a:	f7f5 fe75 	bl	8000b08 <__aeabi_dcmpeq>
 800ae1e:	b9c0      	cbnz	r0, 800ae52 <_printf_float+0x41a>
 800ae20:	4653      	mov	r3, sl
 800ae22:	f108 0201 	add.w	r2, r8, #1
 800ae26:	4631      	mov	r1, r6
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b8      	blx	r7
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d10c      	bne.n	800ae4a <_printf_float+0x412>
 800ae30:	e65d      	b.n	800aaee <_printf_float+0xb6>
 800ae32:	2301      	movs	r3, #1
 800ae34:	465a      	mov	r2, fp
 800ae36:	4631      	mov	r1, r6
 800ae38:	4628      	mov	r0, r5
 800ae3a:	47b8      	blx	r7
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	f43f ae56 	beq.w	800aaee <_printf_float+0xb6>
 800ae42:	f108 0801 	add.w	r8, r8, #1
 800ae46:	45d0      	cmp	r8, sl
 800ae48:	dbf3      	blt.n	800ae32 <_printf_float+0x3fa>
 800ae4a:	464b      	mov	r3, r9
 800ae4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae50:	e6df      	b.n	800ac12 <_printf_float+0x1da>
 800ae52:	f04f 0800 	mov.w	r8, #0
 800ae56:	f104 0b1a 	add.w	fp, r4, #26
 800ae5a:	e7f4      	b.n	800ae46 <_printf_float+0x40e>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	4642      	mov	r2, r8
 800ae60:	e7e1      	b.n	800ae26 <_printf_float+0x3ee>
 800ae62:	2301      	movs	r3, #1
 800ae64:	464a      	mov	r2, r9
 800ae66:	4631      	mov	r1, r6
 800ae68:	4628      	mov	r0, r5
 800ae6a:	47b8      	blx	r7
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	f43f ae3e 	beq.w	800aaee <_printf_float+0xb6>
 800ae72:	f108 0801 	add.w	r8, r8, #1
 800ae76:	68e3      	ldr	r3, [r4, #12]
 800ae78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae7a:	1a5b      	subs	r3, r3, r1
 800ae7c:	4543      	cmp	r3, r8
 800ae7e:	dcf0      	bgt.n	800ae62 <_printf_float+0x42a>
 800ae80:	e6fc      	b.n	800ac7c <_printf_float+0x244>
 800ae82:	f04f 0800 	mov.w	r8, #0
 800ae86:	f104 0919 	add.w	r9, r4, #25
 800ae8a:	e7f4      	b.n	800ae76 <_printf_float+0x43e>

0800ae8c <_printf_common>:
 800ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	4616      	mov	r6, r2
 800ae92:	4698      	mov	r8, r3
 800ae94:	688a      	ldr	r2, [r1, #8]
 800ae96:	690b      	ldr	r3, [r1, #16]
 800ae98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	bfb8      	it	lt
 800aea0:	4613      	movlt	r3, r2
 800aea2:	6033      	str	r3, [r6, #0]
 800aea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aea8:	4607      	mov	r7, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b10a      	cbz	r2, 800aeb2 <_printf_common+0x26>
 800aeae:	3301      	adds	r3, #1
 800aeb0:	6033      	str	r3, [r6, #0]
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	0699      	lsls	r1, r3, #26
 800aeb6:	bf42      	ittt	mi
 800aeb8:	6833      	ldrmi	r3, [r6, #0]
 800aeba:	3302      	addmi	r3, #2
 800aebc:	6033      	strmi	r3, [r6, #0]
 800aebe:	6825      	ldr	r5, [r4, #0]
 800aec0:	f015 0506 	ands.w	r5, r5, #6
 800aec4:	d106      	bne.n	800aed4 <_printf_common+0x48>
 800aec6:	f104 0a19 	add.w	sl, r4, #25
 800aeca:	68e3      	ldr	r3, [r4, #12]
 800aecc:	6832      	ldr	r2, [r6, #0]
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	dc26      	bgt.n	800af22 <_printf_common+0x96>
 800aed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aed8:	6822      	ldr	r2, [r4, #0]
 800aeda:	3b00      	subs	r3, #0
 800aedc:	bf18      	it	ne
 800aede:	2301      	movne	r3, #1
 800aee0:	0692      	lsls	r2, r2, #26
 800aee2:	d42b      	bmi.n	800af3c <_printf_common+0xb0>
 800aee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aee8:	4641      	mov	r1, r8
 800aeea:	4638      	mov	r0, r7
 800aeec:	47c8      	blx	r9
 800aeee:	3001      	adds	r0, #1
 800aef0:	d01e      	beq.n	800af30 <_printf_common+0xa4>
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	6922      	ldr	r2, [r4, #16]
 800aef6:	f003 0306 	and.w	r3, r3, #6
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	bf02      	ittt	eq
 800aefe:	68e5      	ldreq	r5, [r4, #12]
 800af00:	6833      	ldreq	r3, [r6, #0]
 800af02:	1aed      	subeq	r5, r5, r3
 800af04:	68a3      	ldr	r3, [r4, #8]
 800af06:	bf0c      	ite	eq
 800af08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af0c:	2500      	movne	r5, #0
 800af0e:	4293      	cmp	r3, r2
 800af10:	bfc4      	itt	gt
 800af12:	1a9b      	subgt	r3, r3, r2
 800af14:	18ed      	addgt	r5, r5, r3
 800af16:	2600      	movs	r6, #0
 800af18:	341a      	adds	r4, #26
 800af1a:	42b5      	cmp	r5, r6
 800af1c:	d11a      	bne.n	800af54 <_printf_common+0xc8>
 800af1e:	2000      	movs	r0, #0
 800af20:	e008      	b.n	800af34 <_printf_common+0xa8>
 800af22:	2301      	movs	r3, #1
 800af24:	4652      	mov	r2, sl
 800af26:	4641      	mov	r1, r8
 800af28:	4638      	mov	r0, r7
 800af2a:	47c8      	blx	r9
 800af2c:	3001      	adds	r0, #1
 800af2e:	d103      	bne.n	800af38 <_printf_common+0xac>
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af38:	3501      	adds	r5, #1
 800af3a:	e7c6      	b.n	800aeca <_printf_common+0x3e>
 800af3c:	18e1      	adds	r1, r4, r3
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	2030      	movs	r0, #48	@ 0x30
 800af42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af46:	4422      	add	r2, r4
 800af48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af50:	3302      	adds	r3, #2
 800af52:	e7c7      	b.n	800aee4 <_printf_common+0x58>
 800af54:	2301      	movs	r3, #1
 800af56:	4622      	mov	r2, r4
 800af58:	4641      	mov	r1, r8
 800af5a:	4638      	mov	r0, r7
 800af5c:	47c8      	blx	r9
 800af5e:	3001      	adds	r0, #1
 800af60:	d0e6      	beq.n	800af30 <_printf_common+0xa4>
 800af62:	3601      	adds	r6, #1
 800af64:	e7d9      	b.n	800af1a <_printf_common+0x8e>
	...

0800af68 <_printf_i>:
 800af68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	7e0f      	ldrb	r7, [r1, #24]
 800af6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af70:	2f78      	cmp	r7, #120	@ 0x78
 800af72:	4691      	mov	r9, r2
 800af74:	4680      	mov	r8, r0
 800af76:	460c      	mov	r4, r1
 800af78:	469a      	mov	sl, r3
 800af7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af7e:	d807      	bhi.n	800af90 <_printf_i+0x28>
 800af80:	2f62      	cmp	r7, #98	@ 0x62
 800af82:	d80a      	bhi.n	800af9a <_printf_i+0x32>
 800af84:	2f00      	cmp	r7, #0
 800af86:	f000 80d2 	beq.w	800b12e <_printf_i+0x1c6>
 800af8a:	2f58      	cmp	r7, #88	@ 0x58
 800af8c:	f000 80b9 	beq.w	800b102 <_printf_i+0x19a>
 800af90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af98:	e03a      	b.n	800b010 <_printf_i+0xa8>
 800af9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af9e:	2b15      	cmp	r3, #21
 800afa0:	d8f6      	bhi.n	800af90 <_printf_i+0x28>
 800afa2:	a101      	add	r1, pc, #4	@ (adr r1, 800afa8 <_printf_i+0x40>)
 800afa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afa8:	0800b001 	.word	0x0800b001
 800afac:	0800b015 	.word	0x0800b015
 800afb0:	0800af91 	.word	0x0800af91
 800afb4:	0800af91 	.word	0x0800af91
 800afb8:	0800af91 	.word	0x0800af91
 800afbc:	0800af91 	.word	0x0800af91
 800afc0:	0800b015 	.word	0x0800b015
 800afc4:	0800af91 	.word	0x0800af91
 800afc8:	0800af91 	.word	0x0800af91
 800afcc:	0800af91 	.word	0x0800af91
 800afd0:	0800af91 	.word	0x0800af91
 800afd4:	0800b115 	.word	0x0800b115
 800afd8:	0800b03f 	.word	0x0800b03f
 800afdc:	0800b0cf 	.word	0x0800b0cf
 800afe0:	0800af91 	.word	0x0800af91
 800afe4:	0800af91 	.word	0x0800af91
 800afe8:	0800b137 	.word	0x0800b137
 800afec:	0800af91 	.word	0x0800af91
 800aff0:	0800b03f 	.word	0x0800b03f
 800aff4:	0800af91 	.word	0x0800af91
 800aff8:	0800af91 	.word	0x0800af91
 800affc:	0800b0d7 	.word	0x0800b0d7
 800b000:	6833      	ldr	r3, [r6, #0]
 800b002:	1d1a      	adds	r2, r3, #4
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6032      	str	r2, [r6, #0]
 800b008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b00c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b010:	2301      	movs	r3, #1
 800b012:	e09d      	b.n	800b150 <_printf_i+0x1e8>
 800b014:	6833      	ldr	r3, [r6, #0]
 800b016:	6820      	ldr	r0, [r4, #0]
 800b018:	1d19      	adds	r1, r3, #4
 800b01a:	6031      	str	r1, [r6, #0]
 800b01c:	0606      	lsls	r6, r0, #24
 800b01e:	d501      	bpl.n	800b024 <_printf_i+0xbc>
 800b020:	681d      	ldr	r5, [r3, #0]
 800b022:	e003      	b.n	800b02c <_printf_i+0xc4>
 800b024:	0645      	lsls	r5, r0, #25
 800b026:	d5fb      	bpl.n	800b020 <_printf_i+0xb8>
 800b028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	da03      	bge.n	800b038 <_printf_i+0xd0>
 800b030:	232d      	movs	r3, #45	@ 0x2d
 800b032:	426d      	negs	r5, r5
 800b034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b038:	4859      	ldr	r0, [pc, #356]	@ (800b1a0 <_printf_i+0x238>)
 800b03a:	230a      	movs	r3, #10
 800b03c:	e011      	b.n	800b062 <_printf_i+0xfa>
 800b03e:	6821      	ldr	r1, [r4, #0]
 800b040:	6833      	ldr	r3, [r6, #0]
 800b042:	0608      	lsls	r0, r1, #24
 800b044:	f853 5b04 	ldr.w	r5, [r3], #4
 800b048:	d402      	bmi.n	800b050 <_printf_i+0xe8>
 800b04a:	0649      	lsls	r1, r1, #25
 800b04c:	bf48      	it	mi
 800b04e:	b2ad      	uxthmi	r5, r5
 800b050:	2f6f      	cmp	r7, #111	@ 0x6f
 800b052:	4853      	ldr	r0, [pc, #332]	@ (800b1a0 <_printf_i+0x238>)
 800b054:	6033      	str	r3, [r6, #0]
 800b056:	bf14      	ite	ne
 800b058:	230a      	movne	r3, #10
 800b05a:	2308      	moveq	r3, #8
 800b05c:	2100      	movs	r1, #0
 800b05e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b062:	6866      	ldr	r6, [r4, #4]
 800b064:	60a6      	str	r6, [r4, #8]
 800b066:	2e00      	cmp	r6, #0
 800b068:	bfa2      	ittt	ge
 800b06a:	6821      	ldrge	r1, [r4, #0]
 800b06c:	f021 0104 	bicge.w	r1, r1, #4
 800b070:	6021      	strge	r1, [r4, #0]
 800b072:	b90d      	cbnz	r5, 800b078 <_printf_i+0x110>
 800b074:	2e00      	cmp	r6, #0
 800b076:	d04b      	beq.n	800b110 <_printf_i+0x1a8>
 800b078:	4616      	mov	r6, r2
 800b07a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b07e:	fb03 5711 	mls	r7, r3, r1, r5
 800b082:	5dc7      	ldrb	r7, [r0, r7]
 800b084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b088:	462f      	mov	r7, r5
 800b08a:	42bb      	cmp	r3, r7
 800b08c:	460d      	mov	r5, r1
 800b08e:	d9f4      	bls.n	800b07a <_printf_i+0x112>
 800b090:	2b08      	cmp	r3, #8
 800b092:	d10b      	bne.n	800b0ac <_printf_i+0x144>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	07df      	lsls	r7, r3, #31
 800b098:	d508      	bpl.n	800b0ac <_printf_i+0x144>
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	6861      	ldr	r1, [r4, #4]
 800b09e:	4299      	cmp	r1, r3
 800b0a0:	bfde      	ittt	le
 800b0a2:	2330      	movle	r3, #48	@ 0x30
 800b0a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0ac:	1b92      	subs	r2, r2, r6
 800b0ae:	6122      	str	r2, [r4, #16]
 800b0b0:	f8cd a000 	str.w	sl, [sp]
 800b0b4:	464b      	mov	r3, r9
 800b0b6:	aa03      	add	r2, sp, #12
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	f7ff fee6 	bl	800ae8c <_printf_common>
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d14a      	bne.n	800b15a <_printf_i+0x1f2>
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c8:	b004      	add	sp, #16
 800b0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	f043 0320 	orr.w	r3, r3, #32
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	4833      	ldr	r0, [pc, #204]	@ (800b1a4 <_printf_i+0x23c>)
 800b0d8:	2778      	movs	r7, #120	@ 0x78
 800b0da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	6831      	ldr	r1, [r6, #0]
 800b0e2:	061f      	lsls	r7, r3, #24
 800b0e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0e8:	d402      	bmi.n	800b0f0 <_printf_i+0x188>
 800b0ea:	065f      	lsls	r7, r3, #25
 800b0ec:	bf48      	it	mi
 800b0ee:	b2ad      	uxthmi	r5, r5
 800b0f0:	6031      	str	r1, [r6, #0]
 800b0f2:	07d9      	lsls	r1, r3, #31
 800b0f4:	bf44      	itt	mi
 800b0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800b0fa:	6023      	strmi	r3, [r4, #0]
 800b0fc:	b11d      	cbz	r5, 800b106 <_printf_i+0x19e>
 800b0fe:	2310      	movs	r3, #16
 800b100:	e7ac      	b.n	800b05c <_printf_i+0xf4>
 800b102:	4827      	ldr	r0, [pc, #156]	@ (800b1a0 <_printf_i+0x238>)
 800b104:	e7e9      	b.n	800b0da <_printf_i+0x172>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	f023 0320 	bic.w	r3, r3, #32
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	e7f6      	b.n	800b0fe <_printf_i+0x196>
 800b110:	4616      	mov	r6, r2
 800b112:	e7bd      	b.n	800b090 <_printf_i+0x128>
 800b114:	6833      	ldr	r3, [r6, #0]
 800b116:	6825      	ldr	r5, [r4, #0]
 800b118:	6961      	ldr	r1, [r4, #20]
 800b11a:	1d18      	adds	r0, r3, #4
 800b11c:	6030      	str	r0, [r6, #0]
 800b11e:	062e      	lsls	r6, r5, #24
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	d501      	bpl.n	800b128 <_printf_i+0x1c0>
 800b124:	6019      	str	r1, [r3, #0]
 800b126:	e002      	b.n	800b12e <_printf_i+0x1c6>
 800b128:	0668      	lsls	r0, r5, #25
 800b12a:	d5fb      	bpl.n	800b124 <_printf_i+0x1bc>
 800b12c:	8019      	strh	r1, [r3, #0]
 800b12e:	2300      	movs	r3, #0
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	4616      	mov	r6, r2
 800b134:	e7bc      	b.n	800b0b0 <_printf_i+0x148>
 800b136:	6833      	ldr	r3, [r6, #0]
 800b138:	1d1a      	adds	r2, r3, #4
 800b13a:	6032      	str	r2, [r6, #0]
 800b13c:	681e      	ldr	r6, [r3, #0]
 800b13e:	6862      	ldr	r2, [r4, #4]
 800b140:	2100      	movs	r1, #0
 800b142:	4630      	mov	r0, r6
 800b144:	f7f5 f864 	bl	8000210 <memchr>
 800b148:	b108      	cbz	r0, 800b14e <_printf_i+0x1e6>
 800b14a:	1b80      	subs	r0, r0, r6
 800b14c:	6060      	str	r0, [r4, #4]
 800b14e:	6863      	ldr	r3, [r4, #4]
 800b150:	6123      	str	r3, [r4, #16]
 800b152:	2300      	movs	r3, #0
 800b154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b158:	e7aa      	b.n	800b0b0 <_printf_i+0x148>
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	4632      	mov	r2, r6
 800b15e:	4649      	mov	r1, r9
 800b160:	4640      	mov	r0, r8
 800b162:	47d0      	blx	sl
 800b164:	3001      	adds	r0, #1
 800b166:	d0ad      	beq.n	800b0c4 <_printf_i+0x15c>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	079b      	lsls	r3, r3, #30
 800b16c:	d413      	bmi.n	800b196 <_printf_i+0x22e>
 800b16e:	68e0      	ldr	r0, [r4, #12]
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	4298      	cmp	r0, r3
 800b174:	bfb8      	it	lt
 800b176:	4618      	movlt	r0, r3
 800b178:	e7a6      	b.n	800b0c8 <_printf_i+0x160>
 800b17a:	2301      	movs	r3, #1
 800b17c:	4632      	mov	r2, r6
 800b17e:	4649      	mov	r1, r9
 800b180:	4640      	mov	r0, r8
 800b182:	47d0      	blx	sl
 800b184:	3001      	adds	r0, #1
 800b186:	d09d      	beq.n	800b0c4 <_printf_i+0x15c>
 800b188:	3501      	adds	r5, #1
 800b18a:	68e3      	ldr	r3, [r4, #12]
 800b18c:	9903      	ldr	r1, [sp, #12]
 800b18e:	1a5b      	subs	r3, r3, r1
 800b190:	42ab      	cmp	r3, r5
 800b192:	dcf2      	bgt.n	800b17a <_printf_i+0x212>
 800b194:	e7eb      	b.n	800b16e <_printf_i+0x206>
 800b196:	2500      	movs	r5, #0
 800b198:	f104 0619 	add.w	r6, r4, #25
 800b19c:	e7f5      	b.n	800b18a <_printf_i+0x222>
 800b19e:	bf00      	nop
 800b1a0:	0800e9cb 	.word	0x0800e9cb
 800b1a4:	0800e9dc 	.word	0x0800e9dc

0800b1a8 <std>:
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b1b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1b6:	6083      	str	r3, [r0, #8]
 800b1b8:	8181      	strh	r1, [r0, #12]
 800b1ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800b1bc:	81c2      	strh	r2, [r0, #14]
 800b1be:	6183      	str	r3, [r0, #24]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	2208      	movs	r2, #8
 800b1c4:	305c      	adds	r0, #92	@ 0x5c
 800b1c6:	f000 f9f9 	bl	800b5bc <memset>
 800b1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b200 <std+0x58>)
 800b1cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b204 <std+0x5c>)
 800b1d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b208 <std+0x60>)
 800b1d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b20c <std+0x64>)
 800b1d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1da:	4b0d      	ldr	r3, [pc, #52]	@ (800b210 <std+0x68>)
 800b1dc:	6224      	str	r4, [r4, #32]
 800b1de:	429c      	cmp	r4, r3
 800b1e0:	d006      	beq.n	800b1f0 <std+0x48>
 800b1e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1e6:	4294      	cmp	r4, r2
 800b1e8:	d002      	beq.n	800b1f0 <std+0x48>
 800b1ea:	33d0      	adds	r3, #208	@ 0xd0
 800b1ec:	429c      	cmp	r4, r3
 800b1ee:	d105      	bne.n	800b1fc <std+0x54>
 800b1f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f8:	f000 ba80 	b.w	800b6fc <__retarget_lock_init_recursive>
 800b1fc:	bd10      	pop	{r4, pc}
 800b1fe:	bf00      	nop
 800b200:	0800b40d 	.word	0x0800b40d
 800b204:	0800b42f 	.word	0x0800b42f
 800b208:	0800b467 	.word	0x0800b467
 800b20c:	0800b48b 	.word	0x0800b48b
 800b210:	20004f74 	.word	0x20004f74

0800b214 <stdio_exit_handler>:
 800b214:	4a02      	ldr	r2, [pc, #8]	@ (800b220 <stdio_exit_handler+0xc>)
 800b216:	4903      	ldr	r1, [pc, #12]	@ (800b224 <stdio_exit_handler+0x10>)
 800b218:	4803      	ldr	r0, [pc, #12]	@ (800b228 <stdio_exit_handler+0x14>)
 800b21a:	f000 b869 	b.w	800b2f0 <_fwalk_sglue>
 800b21e:	bf00      	nop
 800b220:	20000010 	.word	0x20000010
 800b224:	0800d049 	.word	0x0800d049
 800b228:	20000020 	.word	0x20000020

0800b22c <cleanup_stdio>:
 800b22c:	6841      	ldr	r1, [r0, #4]
 800b22e:	4b0c      	ldr	r3, [pc, #48]	@ (800b260 <cleanup_stdio+0x34>)
 800b230:	4299      	cmp	r1, r3
 800b232:	b510      	push	{r4, lr}
 800b234:	4604      	mov	r4, r0
 800b236:	d001      	beq.n	800b23c <cleanup_stdio+0x10>
 800b238:	f001 ff06 	bl	800d048 <_fflush_r>
 800b23c:	68a1      	ldr	r1, [r4, #8]
 800b23e:	4b09      	ldr	r3, [pc, #36]	@ (800b264 <cleanup_stdio+0x38>)
 800b240:	4299      	cmp	r1, r3
 800b242:	d002      	beq.n	800b24a <cleanup_stdio+0x1e>
 800b244:	4620      	mov	r0, r4
 800b246:	f001 feff 	bl	800d048 <_fflush_r>
 800b24a:	68e1      	ldr	r1, [r4, #12]
 800b24c:	4b06      	ldr	r3, [pc, #24]	@ (800b268 <cleanup_stdio+0x3c>)
 800b24e:	4299      	cmp	r1, r3
 800b250:	d004      	beq.n	800b25c <cleanup_stdio+0x30>
 800b252:	4620      	mov	r0, r4
 800b254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b258:	f001 bef6 	b.w	800d048 <_fflush_r>
 800b25c:	bd10      	pop	{r4, pc}
 800b25e:	bf00      	nop
 800b260:	20004f74 	.word	0x20004f74
 800b264:	20004fdc 	.word	0x20004fdc
 800b268:	20005044 	.word	0x20005044

0800b26c <global_stdio_init.part.0>:
 800b26c:	b510      	push	{r4, lr}
 800b26e:	4b0b      	ldr	r3, [pc, #44]	@ (800b29c <global_stdio_init.part.0+0x30>)
 800b270:	4c0b      	ldr	r4, [pc, #44]	@ (800b2a0 <global_stdio_init.part.0+0x34>)
 800b272:	4a0c      	ldr	r2, [pc, #48]	@ (800b2a4 <global_stdio_init.part.0+0x38>)
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	4620      	mov	r0, r4
 800b278:	2200      	movs	r2, #0
 800b27a:	2104      	movs	r1, #4
 800b27c:	f7ff ff94 	bl	800b1a8 <std>
 800b280:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b284:	2201      	movs	r2, #1
 800b286:	2109      	movs	r1, #9
 800b288:	f7ff ff8e 	bl	800b1a8 <std>
 800b28c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b290:	2202      	movs	r2, #2
 800b292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b296:	2112      	movs	r1, #18
 800b298:	f7ff bf86 	b.w	800b1a8 <std>
 800b29c:	200050ac 	.word	0x200050ac
 800b2a0:	20004f74 	.word	0x20004f74
 800b2a4:	0800b215 	.word	0x0800b215

0800b2a8 <__sfp_lock_acquire>:
 800b2a8:	4801      	ldr	r0, [pc, #4]	@ (800b2b0 <__sfp_lock_acquire+0x8>)
 800b2aa:	f000 ba28 	b.w	800b6fe <__retarget_lock_acquire_recursive>
 800b2ae:	bf00      	nop
 800b2b0:	200050b5 	.word	0x200050b5

0800b2b4 <__sfp_lock_release>:
 800b2b4:	4801      	ldr	r0, [pc, #4]	@ (800b2bc <__sfp_lock_release+0x8>)
 800b2b6:	f000 ba23 	b.w	800b700 <__retarget_lock_release_recursive>
 800b2ba:	bf00      	nop
 800b2bc:	200050b5 	.word	0x200050b5

0800b2c0 <__sinit>:
 800b2c0:	b510      	push	{r4, lr}
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	f7ff fff0 	bl	800b2a8 <__sfp_lock_acquire>
 800b2c8:	6a23      	ldr	r3, [r4, #32]
 800b2ca:	b11b      	cbz	r3, 800b2d4 <__sinit+0x14>
 800b2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2d0:	f7ff bff0 	b.w	800b2b4 <__sfp_lock_release>
 800b2d4:	4b04      	ldr	r3, [pc, #16]	@ (800b2e8 <__sinit+0x28>)
 800b2d6:	6223      	str	r3, [r4, #32]
 800b2d8:	4b04      	ldr	r3, [pc, #16]	@ (800b2ec <__sinit+0x2c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1f5      	bne.n	800b2cc <__sinit+0xc>
 800b2e0:	f7ff ffc4 	bl	800b26c <global_stdio_init.part.0>
 800b2e4:	e7f2      	b.n	800b2cc <__sinit+0xc>
 800b2e6:	bf00      	nop
 800b2e8:	0800b22d 	.word	0x0800b22d
 800b2ec:	200050ac 	.word	0x200050ac

0800b2f0 <_fwalk_sglue>:
 800b2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f4:	4607      	mov	r7, r0
 800b2f6:	4688      	mov	r8, r1
 800b2f8:	4614      	mov	r4, r2
 800b2fa:	2600      	movs	r6, #0
 800b2fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b300:	f1b9 0901 	subs.w	r9, r9, #1
 800b304:	d505      	bpl.n	800b312 <_fwalk_sglue+0x22>
 800b306:	6824      	ldr	r4, [r4, #0]
 800b308:	2c00      	cmp	r4, #0
 800b30a:	d1f7      	bne.n	800b2fc <_fwalk_sglue+0xc>
 800b30c:	4630      	mov	r0, r6
 800b30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d907      	bls.n	800b328 <_fwalk_sglue+0x38>
 800b318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b31c:	3301      	adds	r3, #1
 800b31e:	d003      	beq.n	800b328 <_fwalk_sglue+0x38>
 800b320:	4629      	mov	r1, r5
 800b322:	4638      	mov	r0, r7
 800b324:	47c0      	blx	r8
 800b326:	4306      	orrs	r6, r0
 800b328:	3568      	adds	r5, #104	@ 0x68
 800b32a:	e7e9      	b.n	800b300 <_fwalk_sglue+0x10>

0800b32c <iprintf>:
 800b32c:	b40f      	push	{r0, r1, r2, r3}
 800b32e:	b507      	push	{r0, r1, r2, lr}
 800b330:	4906      	ldr	r1, [pc, #24]	@ (800b34c <iprintf+0x20>)
 800b332:	ab04      	add	r3, sp, #16
 800b334:	6808      	ldr	r0, [r1, #0]
 800b336:	f853 2b04 	ldr.w	r2, [r3], #4
 800b33a:	6881      	ldr	r1, [r0, #8]
 800b33c:	9301      	str	r3, [sp, #4]
 800b33e:	f001 fce7 	bl	800cd10 <_vfiprintf_r>
 800b342:	b003      	add	sp, #12
 800b344:	f85d eb04 	ldr.w	lr, [sp], #4
 800b348:	b004      	add	sp, #16
 800b34a:	4770      	bx	lr
 800b34c:	2000001c 	.word	0x2000001c

0800b350 <_puts_r>:
 800b350:	6a03      	ldr	r3, [r0, #32]
 800b352:	b570      	push	{r4, r5, r6, lr}
 800b354:	6884      	ldr	r4, [r0, #8]
 800b356:	4605      	mov	r5, r0
 800b358:	460e      	mov	r6, r1
 800b35a:	b90b      	cbnz	r3, 800b360 <_puts_r+0x10>
 800b35c:	f7ff ffb0 	bl	800b2c0 <__sinit>
 800b360:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b362:	07db      	lsls	r3, r3, #31
 800b364:	d405      	bmi.n	800b372 <_puts_r+0x22>
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	0598      	lsls	r0, r3, #22
 800b36a:	d402      	bmi.n	800b372 <_puts_r+0x22>
 800b36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b36e:	f000 f9c6 	bl	800b6fe <__retarget_lock_acquire_recursive>
 800b372:	89a3      	ldrh	r3, [r4, #12]
 800b374:	0719      	lsls	r1, r3, #28
 800b376:	d502      	bpl.n	800b37e <_puts_r+0x2e>
 800b378:	6923      	ldr	r3, [r4, #16]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d135      	bne.n	800b3ea <_puts_r+0x9a>
 800b37e:	4621      	mov	r1, r4
 800b380:	4628      	mov	r0, r5
 800b382:	f000 f8c5 	bl	800b510 <__swsetup_r>
 800b386:	b380      	cbz	r0, 800b3ea <_puts_r+0x9a>
 800b388:	f04f 35ff 	mov.w	r5, #4294967295
 800b38c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b38e:	07da      	lsls	r2, r3, #31
 800b390:	d405      	bmi.n	800b39e <_puts_r+0x4e>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	059b      	lsls	r3, r3, #22
 800b396:	d402      	bmi.n	800b39e <_puts_r+0x4e>
 800b398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b39a:	f000 f9b1 	bl	800b700 <__retarget_lock_release_recursive>
 800b39e:	4628      	mov	r0, r5
 800b3a0:	bd70      	pop	{r4, r5, r6, pc}
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	da04      	bge.n	800b3b0 <_puts_r+0x60>
 800b3a6:	69a2      	ldr	r2, [r4, #24]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	dc17      	bgt.n	800b3dc <_puts_r+0x8c>
 800b3ac:	290a      	cmp	r1, #10
 800b3ae:	d015      	beq.n	800b3dc <_puts_r+0x8c>
 800b3b0:	6823      	ldr	r3, [r4, #0]
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	6022      	str	r2, [r4, #0]
 800b3b6:	7019      	strb	r1, [r3, #0]
 800b3b8:	68a3      	ldr	r3, [r4, #8]
 800b3ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	60a3      	str	r3, [r4, #8]
 800b3c2:	2900      	cmp	r1, #0
 800b3c4:	d1ed      	bne.n	800b3a2 <_puts_r+0x52>
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	da11      	bge.n	800b3ee <_puts_r+0x9e>
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	210a      	movs	r1, #10
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f000 f85f 	bl	800b492 <__swbuf_r>
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	d0d7      	beq.n	800b388 <_puts_r+0x38>
 800b3d8:	250a      	movs	r5, #10
 800b3da:	e7d7      	b.n	800b38c <_puts_r+0x3c>
 800b3dc:	4622      	mov	r2, r4
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f000 f857 	bl	800b492 <__swbuf_r>
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d1e7      	bne.n	800b3b8 <_puts_r+0x68>
 800b3e8:	e7ce      	b.n	800b388 <_puts_r+0x38>
 800b3ea:	3e01      	subs	r6, #1
 800b3ec:	e7e4      	b.n	800b3b8 <_puts_r+0x68>
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	1c5a      	adds	r2, r3, #1
 800b3f2:	6022      	str	r2, [r4, #0]
 800b3f4:	220a      	movs	r2, #10
 800b3f6:	701a      	strb	r2, [r3, #0]
 800b3f8:	e7ee      	b.n	800b3d8 <_puts_r+0x88>
	...

0800b3fc <puts>:
 800b3fc:	4b02      	ldr	r3, [pc, #8]	@ (800b408 <puts+0xc>)
 800b3fe:	4601      	mov	r1, r0
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	f7ff bfa5 	b.w	800b350 <_puts_r>
 800b406:	bf00      	nop
 800b408:	2000001c 	.word	0x2000001c

0800b40c <__sread>:
 800b40c:	b510      	push	{r4, lr}
 800b40e:	460c      	mov	r4, r1
 800b410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b414:	f000 f924 	bl	800b660 <_read_r>
 800b418:	2800      	cmp	r0, #0
 800b41a:	bfab      	itete	ge
 800b41c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b41e:	89a3      	ldrhlt	r3, [r4, #12]
 800b420:	181b      	addge	r3, r3, r0
 800b422:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b426:	bfac      	ite	ge
 800b428:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b42a:	81a3      	strhlt	r3, [r4, #12]
 800b42c:	bd10      	pop	{r4, pc}

0800b42e <__swrite>:
 800b42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b432:	461f      	mov	r7, r3
 800b434:	898b      	ldrh	r3, [r1, #12]
 800b436:	05db      	lsls	r3, r3, #23
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	4616      	mov	r6, r2
 800b43e:	d505      	bpl.n	800b44c <__swrite+0x1e>
 800b440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b444:	2302      	movs	r3, #2
 800b446:	2200      	movs	r2, #0
 800b448:	f000 f8f8 	bl	800b63c <_lseek_r>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b452:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b456:	81a3      	strh	r3, [r4, #12]
 800b458:	4632      	mov	r2, r6
 800b45a:	463b      	mov	r3, r7
 800b45c:	4628      	mov	r0, r5
 800b45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b462:	f000 b90f 	b.w	800b684 <_write_r>

0800b466 <__sseek>:
 800b466:	b510      	push	{r4, lr}
 800b468:	460c      	mov	r4, r1
 800b46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46e:	f000 f8e5 	bl	800b63c <_lseek_r>
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	bf15      	itete	ne
 800b478:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b47a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b47e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b482:	81a3      	strheq	r3, [r4, #12]
 800b484:	bf18      	it	ne
 800b486:	81a3      	strhne	r3, [r4, #12]
 800b488:	bd10      	pop	{r4, pc}

0800b48a <__sclose>:
 800b48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b48e:	f000 b8c5 	b.w	800b61c <_close_r>

0800b492 <__swbuf_r>:
 800b492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b494:	460e      	mov	r6, r1
 800b496:	4614      	mov	r4, r2
 800b498:	4605      	mov	r5, r0
 800b49a:	b118      	cbz	r0, 800b4a4 <__swbuf_r+0x12>
 800b49c:	6a03      	ldr	r3, [r0, #32]
 800b49e:	b90b      	cbnz	r3, 800b4a4 <__swbuf_r+0x12>
 800b4a0:	f7ff ff0e 	bl	800b2c0 <__sinit>
 800b4a4:	69a3      	ldr	r3, [r4, #24]
 800b4a6:	60a3      	str	r3, [r4, #8]
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	071a      	lsls	r2, r3, #28
 800b4ac:	d501      	bpl.n	800b4b2 <__swbuf_r+0x20>
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	b943      	cbnz	r3, 800b4c4 <__swbuf_r+0x32>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f000 f82b 	bl	800b510 <__swsetup_r>
 800b4ba:	b118      	cbz	r0, 800b4c4 <__swbuf_r+0x32>
 800b4bc:	f04f 37ff 	mov.w	r7, #4294967295
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	6922      	ldr	r2, [r4, #16]
 800b4c8:	1a98      	subs	r0, r3, r2
 800b4ca:	6963      	ldr	r3, [r4, #20]
 800b4cc:	b2f6      	uxtb	r6, r6
 800b4ce:	4283      	cmp	r3, r0
 800b4d0:	4637      	mov	r7, r6
 800b4d2:	dc05      	bgt.n	800b4e0 <__swbuf_r+0x4e>
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f001 fdb6 	bl	800d048 <_fflush_r>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d1ed      	bne.n	800b4bc <__swbuf_r+0x2a>
 800b4e0:	68a3      	ldr	r3, [r4, #8]
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	60a3      	str	r3, [r4, #8]
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	6022      	str	r2, [r4, #0]
 800b4ec:	701e      	strb	r6, [r3, #0]
 800b4ee:	6962      	ldr	r2, [r4, #20]
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d004      	beq.n	800b500 <__swbuf_r+0x6e>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	07db      	lsls	r3, r3, #31
 800b4fa:	d5e1      	bpl.n	800b4c0 <__swbuf_r+0x2e>
 800b4fc:	2e0a      	cmp	r6, #10
 800b4fe:	d1df      	bne.n	800b4c0 <__swbuf_r+0x2e>
 800b500:	4621      	mov	r1, r4
 800b502:	4628      	mov	r0, r5
 800b504:	f001 fda0 	bl	800d048 <_fflush_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d0d9      	beq.n	800b4c0 <__swbuf_r+0x2e>
 800b50c:	e7d6      	b.n	800b4bc <__swbuf_r+0x2a>
	...

0800b510 <__swsetup_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4b29      	ldr	r3, [pc, #164]	@ (800b5b8 <__swsetup_r+0xa8>)
 800b514:	4605      	mov	r5, r0
 800b516:	6818      	ldr	r0, [r3, #0]
 800b518:	460c      	mov	r4, r1
 800b51a:	b118      	cbz	r0, 800b524 <__swsetup_r+0x14>
 800b51c:	6a03      	ldr	r3, [r0, #32]
 800b51e:	b90b      	cbnz	r3, 800b524 <__swsetup_r+0x14>
 800b520:	f7ff fece 	bl	800b2c0 <__sinit>
 800b524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b528:	0719      	lsls	r1, r3, #28
 800b52a:	d422      	bmi.n	800b572 <__swsetup_r+0x62>
 800b52c:	06da      	lsls	r2, r3, #27
 800b52e:	d407      	bmi.n	800b540 <__swsetup_r+0x30>
 800b530:	2209      	movs	r2, #9
 800b532:	602a      	str	r2, [r5, #0]
 800b534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b538:	81a3      	strh	r3, [r4, #12]
 800b53a:	f04f 30ff 	mov.w	r0, #4294967295
 800b53e:	e033      	b.n	800b5a8 <__swsetup_r+0x98>
 800b540:	0758      	lsls	r0, r3, #29
 800b542:	d512      	bpl.n	800b56a <__swsetup_r+0x5a>
 800b544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b546:	b141      	cbz	r1, 800b55a <__swsetup_r+0x4a>
 800b548:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b54c:	4299      	cmp	r1, r3
 800b54e:	d002      	beq.n	800b556 <__swsetup_r+0x46>
 800b550:	4628      	mov	r0, r5
 800b552:	f000 ff31 	bl	800c3b8 <_free_r>
 800b556:	2300      	movs	r3, #0
 800b558:	6363      	str	r3, [r4, #52]	@ 0x34
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	2300      	movs	r3, #0
 800b564:	6063      	str	r3, [r4, #4]
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	f043 0308 	orr.w	r3, r3, #8
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	b94b      	cbnz	r3, 800b58a <__swsetup_r+0x7a>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b57c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b580:	d003      	beq.n	800b58a <__swsetup_r+0x7a>
 800b582:	4621      	mov	r1, r4
 800b584:	4628      	mov	r0, r5
 800b586:	f001 fdad 	bl	800d0e4 <__smakebuf_r>
 800b58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b58e:	f013 0201 	ands.w	r2, r3, #1
 800b592:	d00a      	beq.n	800b5aa <__swsetup_r+0x9a>
 800b594:	2200      	movs	r2, #0
 800b596:	60a2      	str	r2, [r4, #8]
 800b598:	6962      	ldr	r2, [r4, #20]
 800b59a:	4252      	negs	r2, r2
 800b59c:	61a2      	str	r2, [r4, #24]
 800b59e:	6922      	ldr	r2, [r4, #16]
 800b5a0:	b942      	cbnz	r2, 800b5b4 <__swsetup_r+0xa4>
 800b5a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b5a6:	d1c5      	bne.n	800b534 <__swsetup_r+0x24>
 800b5a8:	bd38      	pop	{r3, r4, r5, pc}
 800b5aa:	0799      	lsls	r1, r3, #30
 800b5ac:	bf58      	it	pl
 800b5ae:	6962      	ldrpl	r2, [r4, #20]
 800b5b0:	60a2      	str	r2, [r4, #8]
 800b5b2:	e7f4      	b.n	800b59e <__swsetup_r+0x8e>
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	e7f7      	b.n	800b5a8 <__swsetup_r+0x98>
 800b5b8:	2000001c 	.word	0x2000001c

0800b5bc <memset>:
 800b5bc:	4402      	add	r2, r0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d100      	bne.n	800b5c6 <memset+0xa>
 800b5c4:	4770      	bx	lr
 800b5c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5ca:	e7f9      	b.n	800b5c0 <memset+0x4>

0800b5cc <strchr>:
 800b5cc:	b2c9      	uxtb	r1, r1
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5d6:	b112      	cbz	r2, 800b5de <strchr+0x12>
 800b5d8:	428a      	cmp	r2, r1
 800b5da:	d1f9      	bne.n	800b5d0 <strchr+0x4>
 800b5dc:	4770      	bx	lr
 800b5de:	2900      	cmp	r1, #0
 800b5e0:	bf18      	it	ne
 800b5e2:	2000      	movne	r0, #0
 800b5e4:	4770      	bx	lr

0800b5e6 <strstr>:
 800b5e6:	780a      	ldrb	r2, [r1, #0]
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	b96a      	cbnz	r2, 800b608 <strstr+0x22>
 800b5ec:	bd70      	pop	{r4, r5, r6, pc}
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d109      	bne.n	800b606 <strstr+0x20>
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0f6      	beq.n	800b5ec <strstr+0x6>
 800b5fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b602:	429e      	cmp	r6, r3
 800b604:	d0f7      	beq.n	800b5f6 <strstr+0x10>
 800b606:	3001      	adds	r0, #1
 800b608:	7803      	ldrb	r3, [r0, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1ef      	bne.n	800b5ee <strstr+0x8>
 800b60e:	4618      	mov	r0, r3
 800b610:	e7ec      	b.n	800b5ec <strstr+0x6>
	...

0800b614 <_localeconv_r>:
 800b614:	4800      	ldr	r0, [pc, #0]	@ (800b618 <_localeconv_r+0x4>)
 800b616:	4770      	bx	lr
 800b618:	2000015c 	.word	0x2000015c

0800b61c <_close_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4d06      	ldr	r5, [pc, #24]	@ (800b638 <_close_r+0x1c>)
 800b620:	2300      	movs	r3, #0
 800b622:	4604      	mov	r4, r0
 800b624:	4608      	mov	r0, r1
 800b626:	602b      	str	r3, [r5, #0]
 800b628:	f7f6 ff62 	bl	80024f0 <_close>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_close_r+0x1a>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_close_r+0x1a>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	200050b0 	.word	0x200050b0

0800b63c <_lseek_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4d07      	ldr	r5, [pc, #28]	@ (800b65c <_lseek_r+0x20>)
 800b640:	4604      	mov	r4, r0
 800b642:	4608      	mov	r0, r1
 800b644:	4611      	mov	r1, r2
 800b646:	2200      	movs	r2, #0
 800b648:	602a      	str	r2, [r5, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	f7f6 ff77 	bl	800253e <_lseek>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <_lseek_r+0x1e>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b103      	cbz	r3, 800b65a <_lseek_r+0x1e>
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
 800b65c:	200050b0 	.word	0x200050b0

0800b660 <_read_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d07      	ldr	r5, [pc, #28]	@ (800b680 <_read_r+0x20>)
 800b664:	4604      	mov	r4, r0
 800b666:	4608      	mov	r0, r1
 800b668:	4611      	mov	r1, r2
 800b66a:	2200      	movs	r2, #0
 800b66c:	602a      	str	r2, [r5, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	f7f6 ff05 	bl	800247e <_read>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d102      	bne.n	800b67e <_read_r+0x1e>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	b103      	cbz	r3, 800b67e <_read_r+0x1e>
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	200050b0 	.word	0x200050b0

0800b684 <_write_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d07      	ldr	r5, [pc, #28]	@ (800b6a4 <_write_r+0x20>)
 800b688:	4604      	mov	r4, r0
 800b68a:	4608      	mov	r0, r1
 800b68c:	4611      	mov	r1, r2
 800b68e:	2200      	movs	r2, #0
 800b690:	602a      	str	r2, [r5, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	f7f6 ff10 	bl	80024b8 <_write>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d102      	bne.n	800b6a2 <_write_r+0x1e>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	b103      	cbz	r3, 800b6a2 <_write_r+0x1e>
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	200050b0 	.word	0x200050b0

0800b6a8 <__errno>:
 800b6a8:	4b01      	ldr	r3, [pc, #4]	@ (800b6b0 <__errno+0x8>)
 800b6aa:	6818      	ldr	r0, [r3, #0]
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	2000001c 	.word	0x2000001c

0800b6b4 <__libc_init_array>:
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	4d0d      	ldr	r5, [pc, #52]	@ (800b6ec <__libc_init_array+0x38>)
 800b6b8:	4c0d      	ldr	r4, [pc, #52]	@ (800b6f0 <__libc_init_array+0x3c>)
 800b6ba:	1b64      	subs	r4, r4, r5
 800b6bc:	10a4      	asrs	r4, r4, #2
 800b6be:	2600      	movs	r6, #0
 800b6c0:	42a6      	cmp	r6, r4
 800b6c2:	d109      	bne.n	800b6d8 <__libc_init_array+0x24>
 800b6c4:	4d0b      	ldr	r5, [pc, #44]	@ (800b6f4 <__libc_init_array+0x40>)
 800b6c6:	4c0c      	ldr	r4, [pc, #48]	@ (800b6f8 <__libc_init_array+0x44>)
 800b6c8:	f002 ff28 	bl	800e51c <_init>
 800b6cc:	1b64      	subs	r4, r4, r5
 800b6ce:	10a4      	asrs	r4, r4, #2
 800b6d0:	2600      	movs	r6, #0
 800b6d2:	42a6      	cmp	r6, r4
 800b6d4:	d105      	bne.n	800b6e2 <__libc_init_array+0x2e>
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}
 800b6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6dc:	4798      	blx	r3
 800b6de:	3601      	adds	r6, #1
 800b6e0:	e7ee      	b.n	800b6c0 <__libc_init_array+0xc>
 800b6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e6:	4798      	blx	r3
 800b6e8:	3601      	adds	r6, #1
 800b6ea:	e7f2      	b.n	800b6d2 <__libc_init_array+0x1e>
 800b6ec:	0800ec98 	.word	0x0800ec98
 800b6f0:	0800ec98 	.word	0x0800ec98
 800b6f4:	0800ec98 	.word	0x0800ec98
 800b6f8:	0800ec9c 	.word	0x0800ec9c

0800b6fc <__retarget_lock_init_recursive>:
 800b6fc:	4770      	bx	lr

0800b6fe <__retarget_lock_acquire_recursive>:
 800b6fe:	4770      	bx	lr

0800b700 <__retarget_lock_release_recursive>:
 800b700:	4770      	bx	lr

0800b702 <memcpy>:
 800b702:	440a      	add	r2, r1
 800b704:	4291      	cmp	r1, r2
 800b706:	f100 33ff 	add.w	r3, r0, #4294967295
 800b70a:	d100      	bne.n	800b70e <memcpy+0xc>
 800b70c:	4770      	bx	lr
 800b70e:	b510      	push	{r4, lr}
 800b710:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b714:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b718:	4291      	cmp	r1, r2
 800b71a:	d1f9      	bne.n	800b710 <memcpy+0xe>
 800b71c:	bd10      	pop	{r4, pc}

0800b71e <quorem>:
 800b71e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b722:	6903      	ldr	r3, [r0, #16]
 800b724:	690c      	ldr	r4, [r1, #16]
 800b726:	42a3      	cmp	r3, r4
 800b728:	4607      	mov	r7, r0
 800b72a:	db7e      	blt.n	800b82a <quorem+0x10c>
 800b72c:	3c01      	subs	r4, #1
 800b72e:	f101 0814 	add.w	r8, r1, #20
 800b732:	00a3      	lsls	r3, r4, #2
 800b734:	f100 0514 	add.w	r5, r0, #20
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b748:	3301      	adds	r3, #1
 800b74a:	429a      	cmp	r2, r3
 800b74c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b750:	fbb2 f6f3 	udiv	r6, r2, r3
 800b754:	d32e      	bcc.n	800b7b4 <quorem+0x96>
 800b756:	f04f 0a00 	mov.w	sl, #0
 800b75a:	46c4      	mov	ip, r8
 800b75c:	46ae      	mov	lr, r5
 800b75e:	46d3      	mov	fp, sl
 800b760:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b764:	b298      	uxth	r0, r3
 800b766:	fb06 a000 	mla	r0, r6, r0, sl
 800b76a:	0c02      	lsrs	r2, r0, #16
 800b76c:	0c1b      	lsrs	r3, r3, #16
 800b76e:	fb06 2303 	mla	r3, r6, r3, r2
 800b772:	f8de 2000 	ldr.w	r2, [lr]
 800b776:	b280      	uxth	r0, r0
 800b778:	b292      	uxth	r2, r2
 800b77a:	1a12      	subs	r2, r2, r0
 800b77c:	445a      	add	r2, fp
 800b77e:	f8de 0000 	ldr.w	r0, [lr]
 800b782:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b786:	b29b      	uxth	r3, r3
 800b788:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b78c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b790:	b292      	uxth	r2, r2
 800b792:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b796:	45e1      	cmp	r9, ip
 800b798:	f84e 2b04 	str.w	r2, [lr], #4
 800b79c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7a0:	d2de      	bcs.n	800b760 <quorem+0x42>
 800b7a2:	9b00      	ldr	r3, [sp, #0]
 800b7a4:	58eb      	ldr	r3, [r5, r3]
 800b7a6:	b92b      	cbnz	r3, 800b7b4 <quorem+0x96>
 800b7a8:	9b01      	ldr	r3, [sp, #4]
 800b7aa:	3b04      	subs	r3, #4
 800b7ac:	429d      	cmp	r5, r3
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	d32f      	bcc.n	800b812 <quorem+0xf4>
 800b7b2:	613c      	str	r4, [r7, #16]
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f001 f979 	bl	800caac <__mcmp>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	db25      	blt.n	800b80a <quorem+0xec>
 800b7be:	4629      	mov	r1, r5
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7c6:	f8d1 c000 	ldr.w	ip, [r1]
 800b7ca:	fa1f fe82 	uxth.w	lr, r2
 800b7ce:	fa1f f38c 	uxth.w	r3, ip
 800b7d2:	eba3 030e 	sub.w	r3, r3, lr
 800b7d6:	4403      	add	r3, r0
 800b7d8:	0c12      	lsrs	r2, r2, #16
 800b7da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b7de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7e8:	45c1      	cmp	r9, r8
 800b7ea:	f841 3b04 	str.w	r3, [r1], #4
 800b7ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7f2:	d2e6      	bcs.n	800b7c2 <quorem+0xa4>
 800b7f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7fc:	b922      	cbnz	r2, 800b808 <quorem+0xea>
 800b7fe:	3b04      	subs	r3, #4
 800b800:	429d      	cmp	r5, r3
 800b802:	461a      	mov	r2, r3
 800b804:	d30b      	bcc.n	800b81e <quorem+0x100>
 800b806:	613c      	str	r4, [r7, #16]
 800b808:	3601      	adds	r6, #1
 800b80a:	4630      	mov	r0, r6
 800b80c:	b003      	add	sp, #12
 800b80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b812:	6812      	ldr	r2, [r2, #0]
 800b814:	3b04      	subs	r3, #4
 800b816:	2a00      	cmp	r2, #0
 800b818:	d1cb      	bne.n	800b7b2 <quorem+0x94>
 800b81a:	3c01      	subs	r4, #1
 800b81c:	e7c6      	b.n	800b7ac <quorem+0x8e>
 800b81e:	6812      	ldr	r2, [r2, #0]
 800b820:	3b04      	subs	r3, #4
 800b822:	2a00      	cmp	r2, #0
 800b824:	d1ef      	bne.n	800b806 <quorem+0xe8>
 800b826:	3c01      	subs	r4, #1
 800b828:	e7ea      	b.n	800b800 <quorem+0xe2>
 800b82a:	2000      	movs	r0, #0
 800b82c:	e7ee      	b.n	800b80c <quorem+0xee>
	...

0800b830 <_dtoa_r>:
 800b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b834:	69c7      	ldr	r7, [r0, #28]
 800b836:	b099      	sub	sp, #100	@ 0x64
 800b838:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b83c:	ec55 4b10 	vmov	r4, r5, d0
 800b840:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b842:	9109      	str	r1, [sp, #36]	@ 0x24
 800b844:	4683      	mov	fp, r0
 800b846:	920e      	str	r2, [sp, #56]	@ 0x38
 800b848:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b84a:	b97f      	cbnz	r7, 800b86c <_dtoa_r+0x3c>
 800b84c:	2010      	movs	r0, #16
 800b84e:	f000 fdfd 	bl	800c44c <malloc>
 800b852:	4602      	mov	r2, r0
 800b854:	f8cb 001c 	str.w	r0, [fp, #28]
 800b858:	b920      	cbnz	r0, 800b864 <_dtoa_r+0x34>
 800b85a:	4ba7      	ldr	r3, [pc, #668]	@ (800baf8 <_dtoa_r+0x2c8>)
 800b85c:	21ef      	movs	r1, #239	@ 0xef
 800b85e:	48a7      	ldr	r0, [pc, #668]	@ (800bafc <_dtoa_r+0x2cc>)
 800b860:	f001 fcae 	bl	800d1c0 <__assert_func>
 800b864:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b868:	6007      	str	r7, [r0, #0]
 800b86a:	60c7      	str	r7, [r0, #12]
 800b86c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b870:	6819      	ldr	r1, [r3, #0]
 800b872:	b159      	cbz	r1, 800b88c <_dtoa_r+0x5c>
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	604a      	str	r2, [r1, #4]
 800b878:	2301      	movs	r3, #1
 800b87a:	4093      	lsls	r3, r2
 800b87c:	608b      	str	r3, [r1, #8]
 800b87e:	4658      	mov	r0, fp
 800b880:	f000 feda 	bl	800c638 <_Bfree>
 800b884:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b888:	2200      	movs	r2, #0
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	1e2b      	subs	r3, r5, #0
 800b88e:	bfb9      	ittee	lt
 800b890:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b894:	9303      	strlt	r3, [sp, #12]
 800b896:	2300      	movge	r3, #0
 800b898:	6033      	strge	r3, [r6, #0]
 800b89a:	9f03      	ldr	r7, [sp, #12]
 800b89c:	4b98      	ldr	r3, [pc, #608]	@ (800bb00 <_dtoa_r+0x2d0>)
 800b89e:	bfbc      	itt	lt
 800b8a0:	2201      	movlt	r2, #1
 800b8a2:	6032      	strlt	r2, [r6, #0]
 800b8a4:	43bb      	bics	r3, r7
 800b8a6:	d112      	bne.n	800b8ce <_dtoa_r+0x9e>
 800b8a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8b4:	4323      	orrs	r3, r4
 800b8b6:	f000 854d 	beq.w	800c354 <_dtoa_r+0xb24>
 800b8ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb14 <_dtoa_r+0x2e4>
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 854f 	beq.w	800c364 <_dtoa_r+0xb34>
 800b8c6:	f10a 0303 	add.w	r3, sl, #3
 800b8ca:	f000 bd49 	b.w	800c360 <_dtoa_r+0xb30>
 800b8ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	ec51 0b17 	vmov	r0, r1, d7
 800b8d8:	2300      	movs	r3, #0
 800b8da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b8de:	f7f5 f913 	bl	8000b08 <__aeabi_dcmpeq>
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	b158      	cbz	r0, 800b8fe <_dtoa_r+0xce>
 800b8e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	6013      	str	r3, [r2, #0]
 800b8ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8ee:	b113      	cbz	r3, 800b8f6 <_dtoa_r+0xc6>
 800b8f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8f2:	4b84      	ldr	r3, [pc, #528]	@ (800bb04 <_dtoa_r+0x2d4>)
 800b8f4:	6013      	str	r3, [r2, #0]
 800b8f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb18 <_dtoa_r+0x2e8>
 800b8fa:	f000 bd33 	b.w	800c364 <_dtoa_r+0xb34>
 800b8fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b902:	aa16      	add	r2, sp, #88	@ 0x58
 800b904:	a917      	add	r1, sp, #92	@ 0x5c
 800b906:	4658      	mov	r0, fp
 800b908:	f001 f980 	bl	800cc0c <__d2b>
 800b90c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b910:	4681      	mov	r9, r0
 800b912:	2e00      	cmp	r6, #0
 800b914:	d077      	beq.n	800ba06 <_dtoa_r+0x1d6>
 800b916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b918:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b924:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b928:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b92c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b930:	4619      	mov	r1, r3
 800b932:	2200      	movs	r2, #0
 800b934:	4b74      	ldr	r3, [pc, #464]	@ (800bb08 <_dtoa_r+0x2d8>)
 800b936:	f7f4 fcc7 	bl	80002c8 <__aeabi_dsub>
 800b93a:	a369      	add	r3, pc, #420	@ (adr r3, 800bae0 <_dtoa_r+0x2b0>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f7f4 fe7a 	bl	8000638 <__aeabi_dmul>
 800b944:	a368      	add	r3, pc, #416	@ (adr r3, 800bae8 <_dtoa_r+0x2b8>)
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	f7f4 fcbf 	bl	80002cc <__adddf3>
 800b94e:	4604      	mov	r4, r0
 800b950:	4630      	mov	r0, r6
 800b952:	460d      	mov	r5, r1
 800b954:	f7f4 fe06 	bl	8000564 <__aeabi_i2d>
 800b958:	a365      	add	r3, pc, #404	@ (adr r3, 800baf0 <_dtoa_r+0x2c0>)
 800b95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95e:	f7f4 fe6b 	bl	8000638 <__aeabi_dmul>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4620      	mov	r0, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	f7f4 fcaf 	bl	80002cc <__adddf3>
 800b96e:	4604      	mov	r4, r0
 800b970:	460d      	mov	r5, r1
 800b972:	f7f5 f911 	bl	8000b98 <__aeabi_d2iz>
 800b976:	2200      	movs	r2, #0
 800b978:	4607      	mov	r7, r0
 800b97a:	2300      	movs	r3, #0
 800b97c:	4620      	mov	r0, r4
 800b97e:	4629      	mov	r1, r5
 800b980:	f7f5 f8cc 	bl	8000b1c <__aeabi_dcmplt>
 800b984:	b140      	cbz	r0, 800b998 <_dtoa_r+0x168>
 800b986:	4638      	mov	r0, r7
 800b988:	f7f4 fdec 	bl	8000564 <__aeabi_i2d>
 800b98c:	4622      	mov	r2, r4
 800b98e:	462b      	mov	r3, r5
 800b990:	f7f5 f8ba 	bl	8000b08 <__aeabi_dcmpeq>
 800b994:	b900      	cbnz	r0, 800b998 <_dtoa_r+0x168>
 800b996:	3f01      	subs	r7, #1
 800b998:	2f16      	cmp	r7, #22
 800b99a:	d851      	bhi.n	800ba40 <_dtoa_r+0x210>
 800b99c:	4b5b      	ldr	r3, [pc, #364]	@ (800bb0c <_dtoa_r+0x2dc>)
 800b99e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9aa:	f7f5 f8b7 	bl	8000b1c <__aeabi_dcmplt>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d048      	beq.n	800ba44 <_dtoa_r+0x214>
 800b9b2:	3f01      	subs	r7, #1
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9ba:	1b9b      	subs	r3, r3, r6
 800b9bc:	1e5a      	subs	r2, r3, #1
 800b9be:	bf44      	itt	mi
 800b9c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b9c4:	2300      	movmi	r3, #0
 800b9c6:	9208      	str	r2, [sp, #32]
 800b9c8:	bf54      	ite	pl
 800b9ca:	f04f 0800 	movpl.w	r8, #0
 800b9ce:	9308      	strmi	r3, [sp, #32]
 800b9d0:	2f00      	cmp	r7, #0
 800b9d2:	db39      	blt.n	800ba48 <_dtoa_r+0x218>
 800b9d4:	9b08      	ldr	r3, [sp, #32]
 800b9d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b9d8:	443b      	add	r3, r7
 800b9da:	9308      	str	r3, [sp, #32]
 800b9dc:	2300      	movs	r3, #0
 800b9de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e2:	2b09      	cmp	r3, #9
 800b9e4:	d864      	bhi.n	800bab0 <_dtoa_r+0x280>
 800b9e6:	2b05      	cmp	r3, #5
 800b9e8:	bfc4      	itt	gt
 800b9ea:	3b04      	subgt	r3, #4
 800b9ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9f0:	f1a3 0302 	sub.w	r3, r3, #2
 800b9f4:	bfcc      	ite	gt
 800b9f6:	2400      	movgt	r4, #0
 800b9f8:	2401      	movle	r4, #1
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d863      	bhi.n	800bac6 <_dtoa_r+0x296>
 800b9fe:	e8df f003 	tbb	[pc, r3]
 800ba02:	372a      	.short	0x372a
 800ba04:	5535      	.short	0x5535
 800ba06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ba0a:	441e      	add	r6, r3
 800ba0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba10:	2b20      	cmp	r3, #32
 800ba12:	bfc1      	itttt	gt
 800ba14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba18:	409f      	lslgt	r7, r3
 800ba1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba22:	bfd6      	itet	le
 800ba24:	f1c3 0320 	rsble	r3, r3, #32
 800ba28:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba2c:	fa04 f003 	lslle.w	r0, r4, r3
 800ba30:	f7f4 fd88 	bl	8000544 <__aeabi_ui2d>
 800ba34:	2201      	movs	r2, #1
 800ba36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba3a:	3e01      	subs	r6, #1
 800ba3c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba3e:	e777      	b.n	800b930 <_dtoa_r+0x100>
 800ba40:	2301      	movs	r3, #1
 800ba42:	e7b8      	b.n	800b9b6 <_dtoa_r+0x186>
 800ba44:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba46:	e7b7      	b.n	800b9b8 <_dtoa_r+0x188>
 800ba48:	427b      	negs	r3, r7
 800ba4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	eba8 0807 	sub.w	r8, r8, r7
 800ba52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba54:	e7c4      	b.n	800b9e0 <_dtoa_r+0x1b0>
 800ba56:	2300      	movs	r3, #0
 800ba58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dc35      	bgt.n	800bacc <_dtoa_r+0x29c>
 800ba60:	2301      	movs	r3, #1
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	9307      	str	r3, [sp, #28]
 800ba66:	461a      	mov	r2, r3
 800ba68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba6a:	e00b      	b.n	800ba84 <_dtoa_r+0x254>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e7f3      	b.n	800ba58 <_dtoa_r+0x228>
 800ba70:	2300      	movs	r3, #0
 800ba72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba76:	18fb      	adds	r3, r7, r3
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	9307      	str	r3, [sp, #28]
 800ba80:	bfb8      	it	lt
 800ba82:	2301      	movlt	r3, #1
 800ba84:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba88:	2100      	movs	r1, #0
 800ba8a:	2204      	movs	r2, #4
 800ba8c:	f102 0514 	add.w	r5, r2, #20
 800ba90:	429d      	cmp	r5, r3
 800ba92:	d91f      	bls.n	800bad4 <_dtoa_r+0x2a4>
 800ba94:	6041      	str	r1, [r0, #4]
 800ba96:	4658      	mov	r0, fp
 800ba98:	f000 fd8e 	bl	800c5b8 <_Balloc>
 800ba9c:	4682      	mov	sl, r0
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d13c      	bne.n	800bb1c <_dtoa_r+0x2ec>
 800baa2:	4b1b      	ldr	r3, [pc, #108]	@ (800bb10 <_dtoa_r+0x2e0>)
 800baa4:	4602      	mov	r2, r0
 800baa6:	f240 11af 	movw	r1, #431	@ 0x1af
 800baaa:	e6d8      	b.n	800b85e <_dtoa_r+0x2e>
 800baac:	2301      	movs	r3, #1
 800baae:	e7e0      	b.n	800ba72 <_dtoa_r+0x242>
 800bab0:	2401      	movs	r4, #1
 800bab2:	2300      	movs	r3, #0
 800bab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bab6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bab8:	f04f 33ff 	mov.w	r3, #4294967295
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	9307      	str	r3, [sp, #28]
 800bac0:	2200      	movs	r2, #0
 800bac2:	2312      	movs	r3, #18
 800bac4:	e7d0      	b.n	800ba68 <_dtoa_r+0x238>
 800bac6:	2301      	movs	r3, #1
 800bac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baca:	e7f5      	b.n	800bab8 <_dtoa_r+0x288>
 800bacc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	9307      	str	r3, [sp, #28]
 800bad2:	e7d7      	b.n	800ba84 <_dtoa_r+0x254>
 800bad4:	3101      	adds	r1, #1
 800bad6:	0052      	lsls	r2, r2, #1
 800bad8:	e7d8      	b.n	800ba8c <_dtoa_r+0x25c>
 800bada:	bf00      	nop
 800badc:	f3af 8000 	nop.w
 800bae0:	636f4361 	.word	0x636f4361
 800bae4:	3fd287a7 	.word	0x3fd287a7
 800bae8:	8b60c8b3 	.word	0x8b60c8b3
 800baec:	3fc68a28 	.word	0x3fc68a28
 800baf0:	509f79fb 	.word	0x509f79fb
 800baf4:	3fd34413 	.word	0x3fd34413
 800baf8:	0800e9fa 	.word	0x0800e9fa
 800bafc:	0800ea11 	.word	0x0800ea11
 800bb00:	7ff00000 	.word	0x7ff00000
 800bb04:	0800e9ca 	.word	0x0800e9ca
 800bb08:	3ff80000 	.word	0x3ff80000
 800bb0c:	0800eb08 	.word	0x0800eb08
 800bb10:	0800ea69 	.word	0x0800ea69
 800bb14:	0800e9f6 	.word	0x0800e9f6
 800bb18:	0800e9c9 	.word	0x0800e9c9
 800bb1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb20:	6018      	str	r0, [r3, #0]
 800bb22:	9b07      	ldr	r3, [sp, #28]
 800bb24:	2b0e      	cmp	r3, #14
 800bb26:	f200 80a4 	bhi.w	800bc72 <_dtoa_r+0x442>
 800bb2a:	2c00      	cmp	r4, #0
 800bb2c:	f000 80a1 	beq.w	800bc72 <_dtoa_r+0x442>
 800bb30:	2f00      	cmp	r7, #0
 800bb32:	dd33      	ble.n	800bb9c <_dtoa_r+0x36c>
 800bb34:	4bad      	ldr	r3, [pc, #692]	@ (800bdec <_dtoa_r+0x5bc>)
 800bb36:	f007 020f 	and.w	r2, r7, #15
 800bb3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb3e:	ed93 7b00 	vldr	d7, [r3]
 800bb42:	05f8      	lsls	r0, r7, #23
 800bb44:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb4c:	d516      	bpl.n	800bb7c <_dtoa_r+0x34c>
 800bb4e:	4ba8      	ldr	r3, [pc, #672]	@ (800bdf0 <_dtoa_r+0x5c0>)
 800bb50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb58:	f7f4 fe98 	bl	800088c <__aeabi_ddiv>
 800bb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb60:	f004 040f 	and.w	r4, r4, #15
 800bb64:	2603      	movs	r6, #3
 800bb66:	4da2      	ldr	r5, [pc, #648]	@ (800bdf0 <_dtoa_r+0x5c0>)
 800bb68:	b954      	cbnz	r4, 800bb80 <_dtoa_r+0x350>
 800bb6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb72:	f7f4 fe8b 	bl	800088c <__aeabi_ddiv>
 800bb76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb7a:	e028      	b.n	800bbce <_dtoa_r+0x39e>
 800bb7c:	2602      	movs	r6, #2
 800bb7e:	e7f2      	b.n	800bb66 <_dtoa_r+0x336>
 800bb80:	07e1      	lsls	r1, r4, #31
 800bb82:	d508      	bpl.n	800bb96 <_dtoa_r+0x366>
 800bb84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb8c:	f7f4 fd54 	bl	8000638 <__aeabi_dmul>
 800bb90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb94:	3601      	adds	r6, #1
 800bb96:	1064      	asrs	r4, r4, #1
 800bb98:	3508      	adds	r5, #8
 800bb9a:	e7e5      	b.n	800bb68 <_dtoa_r+0x338>
 800bb9c:	f000 80d2 	beq.w	800bd44 <_dtoa_r+0x514>
 800bba0:	427c      	negs	r4, r7
 800bba2:	4b92      	ldr	r3, [pc, #584]	@ (800bdec <_dtoa_r+0x5bc>)
 800bba4:	4d92      	ldr	r5, [pc, #584]	@ (800bdf0 <_dtoa_r+0x5c0>)
 800bba6:	f004 020f 	and.w	r2, r4, #15
 800bbaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbb6:	f7f4 fd3f 	bl	8000638 <__aeabi_dmul>
 800bbba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbbe:	1124      	asrs	r4, r4, #4
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	2602      	movs	r6, #2
 800bbc4:	2c00      	cmp	r4, #0
 800bbc6:	f040 80b2 	bne.w	800bd2e <_dtoa_r+0x4fe>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1d3      	bne.n	800bb76 <_dtoa_r+0x346>
 800bbce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 80b7 	beq.w	800bd48 <_dtoa_r+0x518>
 800bbda:	4b86      	ldr	r3, [pc, #536]	@ (800bdf4 <_dtoa_r+0x5c4>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	4620      	mov	r0, r4
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	f7f4 ff9b 	bl	8000b1c <__aeabi_dcmplt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f000 80ae 	beq.w	800bd48 <_dtoa_r+0x518>
 800bbec:	9b07      	ldr	r3, [sp, #28]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 80aa 	beq.w	800bd48 <_dtoa_r+0x518>
 800bbf4:	9b00      	ldr	r3, [sp, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	dd37      	ble.n	800bc6a <_dtoa_r+0x43a>
 800bbfa:	1e7b      	subs	r3, r7, #1
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	4620      	mov	r0, r4
 800bc00:	4b7d      	ldr	r3, [pc, #500]	@ (800bdf8 <_dtoa_r+0x5c8>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	4629      	mov	r1, r5
 800bc06:	f7f4 fd17 	bl	8000638 <__aeabi_dmul>
 800bc0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc0e:	9c00      	ldr	r4, [sp, #0]
 800bc10:	3601      	adds	r6, #1
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7f4 fca6 	bl	8000564 <__aeabi_i2d>
 800bc18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc1c:	f7f4 fd0c 	bl	8000638 <__aeabi_dmul>
 800bc20:	4b76      	ldr	r3, [pc, #472]	@ (800bdfc <_dtoa_r+0x5cc>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	f7f4 fb52 	bl	80002cc <__adddf3>
 800bc28:	4605      	mov	r5, r0
 800bc2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc2e:	2c00      	cmp	r4, #0
 800bc30:	f040 808d 	bne.w	800bd4e <_dtoa_r+0x51e>
 800bc34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc38:	4b71      	ldr	r3, [pc, #452]	@ (800be00 <_dtoa_r+0x5d0>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f7f4 fb44 	bl	80002c8 <__aeabi_dsub>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc48:	462a      	mov	r2, r5
 800bc4a:	4633      	mov	r3, r6
 800bc4c:	f7f4 ff84 	bl	8000b58 <__aeabi_dcmpgt>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	f040 828b 	bne.w	800c16c <_dtoa_r+0x93c>
 800bc56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc5a:	462a      	mov	r2, r5
 800bc5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc60:	f7f4 ff5c 	bl	8000b1c <__aeabi_dcmplt>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	f040 8128 	bne.w	800beba <_dtoa_r+0x68a>
 800bc6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f2c0 815a 	blt.w	800bf2e <_dtoa_r+0x6fe>
 800bc7a:	2f0e      	cmp	r7, #14
 800bc7c:	f300 8157 	bgt.w	800bf2e <_dtoa_r+0x6fe>
 800bc80:	4b5a      	ldr	r3, [pc, #360]	@ (800bdec <_dtoa_r+0x5bc>)
 800bc82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc86:	ed93 7b00 	vldr	d7, [r3]
 800bc8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	ed8d 7b00 	vstr	d7, [sp]
 800bc92:	da03      	bge.n	800bc9c <_dtoa_r+0x46c>
 800bc94:	9b07      	ldr	r3, [sp, #28]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f340 8101 	ble.w	800be9e <_dtoa_r+0x66e>
 800bc9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bca0:	4656      	mov	r6, sl
 800bca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bca6:	4620      	mov	r0, r4
 800bca8:	4629      	mov	r1, r5
 800bcaa:	f7f4 fdef 	bl	800088c <__aeabi_ddiv>
 800bcae:	f7f4 ff73 	bl	8000b98 <__aeabi_d2iz>
 800bcb2:	4680      	mov	r8, r0
 800bcb4:	f7f4 fc56 	bl	8000564 <__aeabi_i2d>
 800bcb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcbc:	f7f4 fcbc 	bl	8000638 <__aeabi_dmul>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bccc:	f7f4 fafc 	bl	80002c8 <__aeabi_dsub>
 800bcd0:	f806 4b01 	strb.w	r4, [r6], #1
 800bcd4:	9d07      	ldr	r5, [sp, #28]
 800bcd6:	eba6 040a 	sub.w	r4, r6, sl
 800bcda:	42a5      	cmp	r5, r4
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	f040 8117 	bne.w	800bf12 <_dtoa_r+0x6e2>
 800bce4:	f7f4 faf2 	bl	80002cc <__adddf3>
 800bce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcec:	4604      	mov	r4, r0
 800bcee:	460d      	mov	r5, r1
 800bcf0:	f7f4 ff32 	bl	8000b58 <__aeabi_dcmpgt>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	f040 80f9 	bne.w	800beec <_dtoa_r+0x6bc>
 800bcfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcfe:	4620      	mov	r0, r4
 800bd00:	4629      	mov	r1, r5
 800bd02:	f7f4 ff01 	bl	8000b08 <__aeabi_dcmpeq>
 800bd06:	b118      	cbz	r0, 800bd10 <_dtoa_r+0x4e0>
 800bd08:	f018 0f01 	tst.w	r8, #1
 800bd0c:	f040 80ee 	bne.w	800beec <_dtoa_r+0x6bc>
 800bd10:	4649      	mov	r1, r9
 800bd12:	4658      	mov	r0, fp
 800bd14:	f000 fc90 	bl	800c638 <_Bfree>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	7033      	strb	r3, [r6, #0]
 800bd1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd1e:	3701      	adds	r7, #1
 800bd20:	601f      	str	r7, [r3, #0]
 800bd22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 831d 	beq.w	800c364 <_dtoa_r+0xb34>
 800bd2a:	601e      	str	r6, [r3, #0]
 800bd2c:	e31a      	b.n	800c364 <_dtoa_r+0xb34>
 800bd2e:	07e2      	lsls	r2, r4, #31
 800bd30:	d505      	bpl.n	800bd3e <_dtoa_r+0x50e>
 800bd32:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd36:	f7f4 fc7f 	bl	8000638 <__aeabi_dmul>
 800bd3a:	3601      	adds	r6, #1
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	1064      	asrs	r4, r4, #1
 800bd40:	3508      	adds	r5, #8
 800bd42:	e73f      	b.n	800bbc4 <_dtoa_r+0x394>
 800bd44:	2602      	movs	r6, #2
 800bd46:	e742      	b.n	800bbce <_dtoa_r+0x39e>
 800bd48:	9c07      	ldr	r4, [sp, #28]
 800bd4a:	9704      	str	r7, [sp, #16]
 800bd4c:	e761      	b.n	800bc12 <_dtoa_r+0x3e2>
 800bd4e:	4b27      	ldr	r3, [pc, #156]	@ (800bdec <_dtoa_r+0x5bc>)
 800bd50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd5a:	4454      	add	r4, sl
 800bd5c:	2900      	cmp	r1, #0
 800bd5e:	d053      	beq.n	800be08 <_dtoa_r+0x5d8>
 800bd60:	4928      	ldr	r1, [pc, #160]	@ (800be04 <_dtoa_r+0x5d4>)
 800bd62:	2000      	movs	r0, #0
 800bd64:	f7f4 fd92 	bl	800088c <__aeabi_ddiv>
 800bd68:	4633      	mov	r3, r6
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	f7f4 faac 	bl	80002c8 <__aeabi_dsub>
 800bd70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd74:	4656      	mov	r6, sl
 800bd76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd7a:	f7f4 ff0d 	bl	8000b98 <__aeabi_d2iz>
 800bd7e:	4605      	mov	r5, r0
 800bd80:	f7f4 fbf0 	bl	8000564 <__aeabi_i2d>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd8c:	f7f4 fa9c 	bl	80002c8 <__aeabi_dsub>
 800bd90:	3530      	adds	r5, #48	@ 0x30
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd9a:	f806 5b01 	strb.w	r5, [r6], #1
 800bd9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bda2:	f7f4 febb 	bl	8000b1c <__aeabi_dcmplt>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d171      	bne.n	800be8e <_dtoa_r+0x65e>
 800bdaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdae:	4911      	ldr	r1, [pc, #68]	@ (800bdf4 <_dtoa_r+0x5c4>)
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	f7f4 fa89 	bl	80002c8 <__aeabi_dsub>
 800bdb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdba:	f7f4 feaf 	bl	8000b1c <__aeabi_dcmplt>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	f040 8095 	bne.w	800beee <_dtoa_r+0x6be>
 800bdc4:	42a6      	cmp	r6, r4
 800bdc6:	f43f af50 	beq.w	800bc6a <_dtoa_r+0x43a>
 800bdca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdce:	4b0a      	ldr	r3, [pc, #40]	@ (800bdf8 <_dtoa_r+0x5c8>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f7f4 fc31 	bl	8000638 <__aeabi_dmul>
 800bdd6:	4b08      	ldr	r3, [pc, #32]	@ (800bdf8 <_dtoa_r+0x5c8>)
 800bdd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bddc:	2200      	movs	r2, #0
 800bdde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bde2:	f7f4 fc29 	bl	8000638 <__aeabi_dmul>
 800bde6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdea:	e7c4      	b.n	800bd76 <_dtoa_r+0x546>
 800bdec:	0800eb08 	.word	0x0800eb08
 800bdf0:	0800eae0 	.word	0x0800eae0
 800bdf4:	3ff00000 	.word	0x3ff00000
 800bdf8:	40240000 	.word	0x40240000
 800bdfc:	401c0000 	.word	0x401c0000
 800be00:	40140000 	.word	0x40140000
 800be04:	3fe00000 	.word	0x3fe00000
 800be08:	4631      	mov	r1, r6
 800be0a:	4628      	mov	r0, r5
 800be0c:	f7f4 fc14 	bl	8000638 <__aeabi_dmul>
 800be10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be14:	9415      	str	r4, [sp, #84]	@ 0x54
 800be16:	4656      	mov	r6, sl
 800be18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1c:	f7f4 febc 	bl	8000b98 <__aeabi_d2iz>
 800be20:	4605      	mov	r5, r0
 800be22:	f7f4 fb9f 	bl	8000564 <__aeabi_i2d>
 800be26:	4602      	mov	r2, r0
 800be28:	460b      	mov	r3, r1
 800be2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be2e:	f7f4 fa4b 	bl	80002c8 <__aeabi_dsub>
 800be32:	3530      	adds	r5, #48	@ 0x30
 800be34:	f806 5b01 	strb.w	r5, [r6], #1
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	42a6      	cmp	r6, r4
 800be3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be42:	f04f 0200 	mov.w	r2, #0
 800be46:	d124      	bne.n	800be92 <_dtoa_r+0x662>
 800be48:	4bac      	ldr	r3, [pc, #688]	@ (800c0fc <_dtoa_r+0x8cc>)
 800be4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be4e:	f7f4 fa3d 	bl	80002cc <__adddf3>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be5a:	f7f4 fe7d 	bl	8000b58 <__aeabi_dcmpgt>
 800be5e:	2800      	cmp	r0, #0
 800be60:	d145      	bne.n	800beee <_dtoa_r+0x6be>
 800be62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be66:	49a5      	ldr	r1, [pc, #660]	@ (800c0fc <_dtoa_r+0x8cc>)
 800be68:	2000      	movs	r0, #0
 800be6a:	f7f4 fa2d 	bl	80002c8 <__aeabi_dsub>
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be76:	f7f4 fe51 	bl	8000b1c <__aeabi_dcmplt>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	f43f aef5 	beq.w	800bc6a <_dtoa_r+0x43a>
 800be80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be82:	1e73      	subs	r3, r6, #1
 800be84:	9315      	str	r3, [sp, #84]	@ 0x54
 800be86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be8a:	2b30      	cmp	r3, #48	@ 0x30
 800be8c:	d0f8      	beq.n	800be80 <_dtoa_r+0x650>
 800be8e:	9f04      	ldr	r7, [sp, #16]
 800be90:	e73e      	b.n	800bd10 <_dtoa_r+0x4e0>
 800be92:	4b9b      	ldr	r3, [pc, #620]	@ (800c100 <_dtoa_r+0x8d0>)
 800be94:	f7f4 fbd0 	bl	8000638 <__aeabi_dmul>
 800be98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be9c:	e7bc      	b.n	800be18 <_dtoa_r+0x5e8>
 800be9e:	d10c      	bne.n	800beba <_dtoa_r+0x68a>
 800bea0:	4b98      	ldr	r3, [pc, #608]	@ (800c104 <_dtoa_r+0x8d4>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bea8:	f7f4 fbc6 	bl	8000638 <__aeabi_dmul>
 800beac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800beb0:	f7f4 fe48 	bl	8000b44 <__aeabi_dcmpge>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	f000 8157 	beq.w	800c168 <_dtoa_r+0x938>
 800beba:	2400      	movs	r4, #0
 800bebc:	4625      	mov	r5, r4
 800bebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bec0:	43db      	mvns	r3, r3
 800bec2:	9304      	str	r3, [sp, #16]
 800bec4:	4656      	mov	r6, sl
 800bec6:	2700      	movs	r7, #0
 800bec8:	4621      	mov	r1, r4
 800beca:	4658      	mov	r0, fp
 800becc:	f000 fbb4 	bl	800c638 <_Bfree>
 800bed0:	2d00      	cmp	r5, #0
 800bed2:	d0dc      	beq.n	800be8e <_dtoa_r+0x65e>
 800bed4:	b12f      	cbz	r7, 800bee2 <_dtoa_r+0x6b2>
 800bed6:	42af      	cmp	r7, r5
 800bed8:	d003      	beq.n	800bee2 <_dtoa_r+0x6b2>
 800beda:	4639      	mov	r1, r7
 800bedc:	4658      	mov	r0, fp
 800bede:	f000 fbab 	bl	800c638 <_Bfree>
 800bee2:	4629      	mov	r1, r5
 800bee4:	4658      	mov	r0, fp
 800bee6:	f000 fba7 	bl	800c638 <_Bfree>
 800beea:	e7d0      	b.n	800be8e <_dtoa_r+0x65e>
 800beec:	9704      	str	r7, [sp, #16]
 800beee:	4633      	mov	r3, r6
 800bef0:	461e      	mov	r6, r3
 800bef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bef6:	2a39      	cmp	r2, #57	@ 0x39
 800bef8:	d107      	bne.n	800bf0a <_dtoa_r+0x6da>
 800befa:	459a      	cmp	sl, r3
 800befc:	d1f8      	bne.n	800bef0 <_dtoa_r+0x6c0>
 800befe:	9a04      	ldr	r2, [sp, #16]
 800bf00:	3201      	adds	r2, #1
 800bf02:	9204      	str	r2, [sp, #16]
 800bf04:	2230      	movs	r2, #48	@ 0x30
 800bf06:	f88a 2000 	strb.w	r2, [sl]
 800bf0a:	781a      	ldrb	r2, [r3, #0]
 800bf0c:	3201      	adds	r2, #1
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	e7bd      	b.n	800be8e <_dtoa_r+0x65e>
 800bf12:	4b7b      	ldr	r3, [pc, #492]	@ (800c100 <_dtoa_r+0x8d0>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	f7f4 fb8f 	bl	8000638 <__aeabi_dmul>
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4604      	mov	r4, r0
 800bf20:	460d      	mov	r5, r1
 800bf22:	f7f4 fdf1 	bl	8000b08 <__aeabi_dcmpeq>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	f43f aebb 	beq.w	800bca2 <_dtoa_r+0x472>
 800bf2c:	e6f0      	b.n	800bd10 <_dtoa_r+0x4e0>
 800bf2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf30:	2a00      	cmp	r2, #0
 800bf32:	f000 80db 	beq.w	800c0ec <_dtoa_r+0x8bc>
 800bf36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf38:	2a01      	cmp	r2, #1
 800bf3a:	f300 80bf 	bgt.w	800c0bc <_dtoa_r+0x88c>
 800bf3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf40:	2a00      	cmp	r2, #0
 800bf42:	f000 80b7 	beq.w	800c0b4 <_dtoa_r+0x884>
 800bf46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf4c:	4646      	mov	r6, r8
 800bf4e:	9a08      	ldr	r2, [sp, #32]
 800bf50:	2101      	movs	r1, #1
 800bf52:	441a      	add	r2, r3
 800bf54:	4658      	mov	r0, fp
 800bf56:	4498      	add	r8, r3
 800bf58:	9208      	str	r2, [sp, #32]
 800bf5a:	f000 fc21 	bl	800c7a0 <__i2b>
 800bf5e:	4605      	mov	r5, r0
 800bf60:	b15e      	cbz	r6, 800bf7a <_dtoa_r+0x74a>
 800bf62:	9b08      	ldr	r3, [sp, #32]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd08      	ble.n	800bf7a <_dtoa_r+0x74a>
 800bf68:	42b3      	cmp	r3, r6
 800bf6a:	9a08      	ldr	r2, [sp, #32]
 800bf6c:	bfa8      	it	ge
 800bf6e:	4633      	movge	r3, r6
 800bf70:	eba8 0803 	sub.w	r8, r8, r3
 800bf74:	1af6      	subs	r6, r6, r3
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	9308      	str	r3, [sp, #32]
 800bf7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf7c:	b1f3      	cbz	r3, 800bfbc <_dtoa_r+0x78c>
 800bf7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 80b7 	beq.w	800c0f4 <_dtoa_r+0x8c4>
 800bf86:	b18c      	cbz	r4, 800bfac <_dtoa_r+0x77c>
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	4658      	mov	r0, fp
 800bf8e:	f000 fcc7 	bl	800c920 <__pow5mult>
 800bf92:	464a      	mov	r2, r9
 800bf94:	4601      	mov	r1, r0
 800bf96:	4605      	mov	r5, r0
 800bf98:	4658      	mov	r0, fp
 800bf9a:	f000 fc17 	bl	800c7cc <__multiply>
 800bf9e:	4649      	mov	r1, r9
 800bfa0:	9004      	str	r0, [sp, #16]
 800bfa2:	4658      	mov	r0, fp
 800bfa4:	f000 fb48 	bl	800c638 <_Bfree>
 800bfa8:	9b04      	ldr	r3, [sp, #16]
 800bfaa:	4699      	mov	r9, r3
 800bfac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfae:	1b1a      	subs	r2, r3, r4
 800bfb0:	d004      	beq.n	800bfbc <_dtoa_r+0x78c>
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	4658      	mov	r0, fp
 800bfb6:	f000 fcb3 	bl	800c920 <__pow5mult>
 800bfba:	4681      	mov	r9, r0
 800bfbc:	2101      	movs	r1, #1
 800bfbe:	4658      	mov	r0, fp
 800bfc0:	f000 fbee 	bl	800c7a0 <__i2b>
 800bfc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f000 81cf 	beq.w	800c36c <_dtoa_r+0xb3c>
 800bfce:	461a      	mov	r2, r3
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	4658      	mov	r0, fp
 800bfd4:	f000 fca4 	bl	800c920 <__pow5mult>
 800bfd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	4604      	mov	r4, r0
 800bfde:	f300 8095 	bgt.w	800c10c <_dtoa_r+0x8dc>
 800bfe2:	9b02      	ldr	r3, [sp, #8]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f040 8087 	bne.w	800c0f8 <_dtoa_r+0x8c8>
 800bfea:	9b03      	ldr	r3, [sp, #12]
 800bfec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f040 8089 	bne.w	800c108 <_dtoa_r+0x8d8>
 800bff6:	9b03      	ldr	r3, [sp, #12]
 800bff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bffc:	0d1b      	lsrs	r3, r3, #20
 800bffe:	051b      	lsls	r3, r3, #20
 800c000:	b12b      	cbz	r3, 800c00e <_dtoa_r+0x7de>
 800c002:	9b08      	ldr	r3, [sp, #32]
 800c004:	3301      	adds	r3, #1
 800c006:	9308      	str	r3, [sp, #32]
 800c008:	f108 0801 	add.w	r8, r8, #1
 800c00c:	2301      	movs	r3, #1
 800c00e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c012:	2b00      	cmp	r3, #0
 800c014:	f000 81b0 	beq.w	800c378 <_dtoa_r+0xb48>
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c01e:	6918      	ldr	r0, [r3, #16]
 800c020:	f000 fb72 	bl	800c708 <__hi0bits>
 800c024:	f1c0 0020 	rsb	r0, r0, #32
 800c028:	9b08      	ldr	r3, [sp, #32]
 800c02a:	4418      	add	r0, r3
 800c02c:	f010 001f 	ands.w	r0, r0, #31
 800c030:	d077      	beq.n	800c122 <_dtoa_r+0x8f2>
 800c032:	f1c0 0320 	rsb	r3, r0, #32
 800c036:	2b04      	cmp	r3, #4
 800c038:	dd6b      	ble.n	800c112 <_dtoa_r+0x8e2>
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	f1c0 001c 	rsb	r0, r0, #28
 800c040:	4403      	add	r3, r0
 800c042:	4480      	add	r8, r0
 800c044:	4406      	add	r6, r0
 800c046:	9308      	str	r3, [sp, #32]
 800c048:	f1b8 0f00 	cmp.w	r8, #0
 800c04c:	dd05      	ble.n	800c05a <_dtoa_r+0x82a>
 800c04e:	4649      	mov	r1, r9
 800c050:	4642      	mov	r2, r8
 800c052:	4658      	mov	r0, fp
 800c054:	f000 fcbe 	bl	800c9d4 <__lshift>
 800c058:	4681      	mov	r9, r0
 800c05a:	9b08      	ldr	r3, [sp, #32]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	dd05      	ble.n	800c06c <_dtoa_r+0x83c>
 800c060:	4621      	mov	r1, r4
 800c062:	461a      	mov	r2, r3
 800c064:	4658      	mov	r0, fp
 800c066:	f000 fcb5 	bl	800c9d4 <__lshift>
 800c06a:	4604      	mov	r4, r0
 800c06c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d059      	beq.n	800c126 <_dtoa_r+0x8f6>
 800c072:	4621      	mov	r1, r4
 800c074:	4648      	mov	r0, r9
 800c076:	f000 fd19 	bl	800caac <__mcmp>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	da53      	bge.n	800c126 <_dtoa_r+0x8f6>
 800c07e:	1e7b      	subs	r3, r7, #1
 800c080:	9304      	str	r3, [sp, #16]
 800c082:	4649      	mov	r1, r9
 800c084:	2300      	movs	r3, #0
 800c086:	220a      	movs	r2, #10
 800c088:	4658      	mov	r0, fp
 800c08a:	f000 faf7 	bl	800c67c <__multadd>
 800c08e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c090:	4681      	mov	r9, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 8172 	beq.w	800c37c <_dtoa_r+0xb4c>
 800c098:	2300      	movs	r3, #0
 800c09a:	4629      	mov	r1, r5
 800c09c:	220a      	movs	r2, #10
 800c09e:	4658      	mov	r0, fp
 800c0a0:	f000 faec 	bl	800c67c <__multadd>
 800c0a4:	9b00      	ldr	r3, [sp, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	dc67      	bgt.n	800c17c <_dtoa_r+0x94c>
 800c0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	dc41      	bgt.n	800c136 <_dtoa_r+0x906>
 800c0b2:	e063      	b.n	800c17c <_dtoa_r+0x94c>
 800c0b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c0b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c0ba:	e746      	b.n	800bf4a <_dtoa_r+0x71a>
 800c0bc:	9b07      	ldr	r3, [sp, #28]
 800c0be:	1e5c      	subs	r4, r3, #1
 800c0c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0c2:	42a3      	cmp	r3, r4
 800c0c4:	bfbf      	itttt	lt
 800c0c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c0c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c0ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c0cc:	1ae3      	sublt	r3, r4, r3
 800c0ce:	bfb4      	ite	lt
 800c0d0:	18d2      	addlt	r2, r2, r3
 800c0d2:	1b1c      	subge	r4, r3, r4
 800c0d4:	9b07      	ldr	r3, [sp, #28]
 800c0d6:	bfbc      	itt	lt
 800c0d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c0da:	2400      	movlt	r4, #0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	bfb5      	itete	lt
 800c0e0:	eba8 0603 	sublt.w	r6, r8, r3
 800c0e4:	9b07      	ldrge	r3, [sp, #28]
 800c0e6:	2300      	movlt	r3, #0
 800c0e8:	4646      	movge	r6, r8
 800c0ea:	e730      	b.n	800bf4e <_dtoa_r+0x71e>
 800c0ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c0f0:	4646      	mov	r6, r8
 800c0f2:	e735      	b.n	800bf60 <_dtoa_r+0x730>
 800c0f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0f6:	e75c      	b.n	800bfb2 <_dtoa_r+0x782>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e788      	b.n	800c00e <_dtoa_r+0x7de>
 800c0fc:	3fe00000 	.word	0x3fe00000
 800c100:	40240000 	.word	0x40240000
 800c104:	40140000 	.word	0x40140000
 800c108:	9b02      	ldr	r3, [sp, #8]
 800c10a:	e780      	b.n	800c00e <_dtoa_r+0x7de>
 800c10c:	2300      	movs	r3, #0
 800c10e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c110:	e782      	b.n	800c018 <_dtoa_r+0x7e8>
 800c112:	d099      	beq.n	800c048 <_dtoa_r+0x818>
 800c114:	9a08      	ldr	r2, [sp, #32]
 800c116:	331c      	adds	r3, #28
 800c118:	441a      	add	r2, r3
 800c11a:	4498      	add	r8, r3
 800c11c:	441e      	add	r6, r3
 800c11e:	9208      	str	r2, [sp, #32]
 800c120:	e792      	b.n	800c048 <_dtoa_r+0x818>
 800c122:	4603      	mov	r3, r0
 800c124:	e7f6      	b.n	800c114 <_dtoa_r+0x8e4>
 800c126:	9b07      	ldr	r3, [sp, #28]
 800c128:	9704      	str	r7, [sp, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dc20      	bgt.n	800c170 <_dtoa_r+0x940>
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c132:	2b02      	cmp	r3, #2
 800c134:	dd1e      	ble.n	800c174 <_dtoa_r+0x944>
 800c136:	9b00      	ldr	r3, [sp, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f47f aec0 	bne.w	800bebe <_dtoa_r+0x68e>
 800c13e:	4621      	mov	r1, r4
 800c140:	2205      	movs	r2, #5
 800c142:	4658      	mov	r0, fp
 800c144:	f000 fa9a 	bl	800c67c <__multadd>
 800c148:	4601      	mov	r1, r0
 800c14a:	4604      	mov	r4, r0
 800c14c:	4648      	mov	r0, r9
 800c14e:	f000 fcad 	bl	800caac <__mcmp>
 800c152:	2800      	cmp	r0, #0
 800c154:	f77f aeb3 	ble.w	800bebe <_dtoa_r+0x68e>
 800c158:	4656      	mov	r6, sl
 800c15a:	2331      	movs	r3, #49	@ 0x31
 800c15c:	f806 3b01 	strb.w	r3, [r6], #1
 800c160:	9b04      	ldr	r3, [sp, #16]
 800c162:	3301      	adds	r3, #1
 800c164:	9304      	str	r3, [sp, #16]
 800c166:	e6ae      	b.n	800bec6 <_dtoa_r+0x696>
 800c168:	9c07      	ldr	r4, [sp, #28]
 800c16a:	9704      	str	r7, [sp, #16]
 800c16c:	4625      	mov	r5, r4
 800c16e:	e7f3      	b.n	800c158 <_dtoa_r+0x928>
 800c170:	9b07      	ldr	r3, [sp, #28]
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c176:	2b00      	cmp	r3, #0
 800c178:	f000 8104 	beq.w	800c384 <_dtoa_r+0xb54>
 800c17c:	2e00      	cmp	r6, #0
 800c17e:	dd05      	ble.n	800c18c <_dtoa_r+0x95c>
 800c180:	4629      	mov	r1, r5
 800c182:	4632      	mov	r2, r6
 800c184:	4658      	mov	r0, fp
 800c186:	f000 fc25 	bl	800c9d4 <__lshift>
 800c18a:	4605      	mov	r5, r0
 800c18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d05a      	beq.n	800c248 <_dtoa_r+0xa18>
 800c192:	6869      	ldr	r1, [r5, #4]
 800c194:	4658      	mov	r0, fp
 800c196:	f000 fa0f 	bl	800c5b8 <_Balloc>
 800c19a:	4606      	mov	r6, r0
 800c19c:	b928      	cbnz	r0, 800c1aa <_dtoa_r+0x97a>
 800c19e:	4b84      	ldr	r3, [pc, #528]	@ (800c3b0 <_dtoa_r+0xb80>)
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c1a6:	f7ff bb5a 	b.w	800b85e <_dtoa_r+0x2e>
 800c1aa:	692a      	ldr	r2, [r5, #16]
 800c1ac:	3202      	adds	r2, #2
 800c1ae:	0092      	lsls	r2, r2, #2
 800c1b0:	f105 010c 	add.w	r1, r5, #12
 800c1b4:	300c      	adds	r0, #12
 800c1b6:	f7ff faa4 	bl	800b702 <memcpy>
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	4631      	mov	r1, r6
 800c1be:	4658      	mov	r0, fp
 800c1c0:	f000 fc08 	bl	800c9d4 <__lshift>
 800c1c4:	f10a 0301 	add.w	r3, sl, #1
 800c1c8:	9307      	str	r3, [sp, #28]
 800c1ca:	9b00      	ldr	r3, [sp, #0]
 800c1cc:	4453      	add	r3, sl
 800c1ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	462f      	mov	r7, r5
 800c1d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1da:	4605      	mov	r5, r0
 800c1dc:	9b07      	ldr	r3, [sp, #28]
 800c1de:	4621      	mov	r1, r4
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	4648      	mov	r0, r9
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	f7ff fa9a 	bl	800b71e <quorem>
 800c1ea:	4639      	mov	r1, r7
 800c1ec:	9002      	str	r0, [sp, #8]
 800c1ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1f2:	4648      	mov	r0, r9
 800c1f4:	f000 fc5a 	bl	800caac <__mcmp>
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	9008      	str	r0, [sp, #32]
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	4658      	mov	r0, fp
 800c200:	f000 fc70 	bl	800cae4 <__mdiff>
 800c204:	68c2      	ldr	r2, [r0, #12]
 800c206:	4606      	mov	r6, r0
 800c208:	bb02      	cbnz	r2, 800c24c <_dtoa_r+0xa1c>
 800c20a:	4601      	mov	r1, r0
 800c20c:	4648      	mov	r0, r9
 800c20e:	f000 fc4d 	bl	800caac <__mcmp>
 800c212:	4602      	mov	r2, r0
 800c214:	4631      	mov	r1, r6
 800c216:	4658      	mov	r0, fp
 800c218:	920e      	str	r2, [sp, #56]	@ 0x38
 800c21a:	f000 fa0d 	bl	800c638 <_Bfree>
 800c21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c220:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c222:	9e07      	ldr	r6, [sp, #28]
 800c224:	ea43 0102 	orr.w	r1, r3, r2
 800c228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c22a:	4319      	orrs	r1, r3
 800c22c:	d110      	bne.n	800c250 <_dtoa_r+0xa20>
 800c22e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c232:	d029      	beq.n	800c288 <_dtoa_r+0xa58>
 800c234:	9b08      	ldr	r3, [sp, #32]
 800c236:	2b00      	cmp	r3, #0
 800c238:	dd02      	ble.n	800c240 <_dtoa_r+0xa10>
 800c23a:	9b02      	ldr	r3, [sp, #8]
 800c23c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c240:	9b00      	ldr	r3, [sp, #0]
 800c242:	f883 8000 	strb.w	r8, [r3]
 800c246:	e63f      	b.n	800bec8 <_dtoa_r+0x698>
 800c248:	4628      	mov	r0, r5
 800c24a:	e7bb      	b.n	800c1c4 <_dtoa_r+0x994>
 800c24c:	2201      	movs	r2, #1
 800c24e:	e7e1      	b.n	800c214 <_dtoa_r+0x9e4>
 800c250:	9b08      	ldr	r3, [sp, #32]
 800c252:	2b00      	cmp	r3, #0
 800c254:	db04      	blt.n	800c260 <_dtoa_r+0xa30>
 800c256:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c258:	430b      	orrs	r3, r1
 800c25a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c25c:	430b      	orrs	r3, r1
 800c25e:	d120      	bne.n	800c2a2 <_dtoa_r+0xa72>
 800c260:	2a00      	cmp	r2, #0
 800c262:	dded      	ble.n	800c240 <_dtoa_r+0xa10>
 800c264:	4649      	mov	r1, r9
 800c266:	2201      	movs	r2, #1
 800c268:	4658      	mov	r0, fp
 800c26a:	f000 fbb3 	bl	800c9d4 <__lshift>
 800c26e:	4621      	mov	r1, r4
 800c270:	4681      	mov	r9, r0
 800c272:	f000 fc1b 	bl	800caac <__mcmp>
 800c276:	2800      	cmp	r0, #0
 800c278:	dc03      	bgt.n	800c282 <_dtoa_r+0xa52>
 800c27a:	d1e1      	bne.n	800c240 <_dtoa_r+0xa10>
 800c27c:	f018 0f01 	tst.w	r8, #1
 800c280:	d0de      	beq.n	800c240 <_dtoa_r+0xa10>
 800c282:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c286:	d1d8      	bne.n	800c23a <_dtoa_r+0xa0a>
 800c288:	9a00      	ldr	r2, [sp, #0]
 800c28a:	2339      	movs	r3, #57	@ 0x39
 800c28c:	7013      	strb	r3, [r2, #0]
 800c28e:	4633      	mov	r3, r6
 800c290:	461e      	mov	r6, r3
 800c292:	3b01      	subs	r3, #1
 800c294:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c298:	2a39      	cmp	r2, #57	@ 0x39
 800c29a:	d052      	beq.n	800c342 <_dtoa_r+0xb12>
 800c29c:	3201      	adds	r2, #1
 800c29e:	701a      	strb	r2, [r3, #0]
 800c2a0:	e612      	b.n	800bec8 <_dtoa_r+0x698>
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	dd07      	ble.n	800c2b6 <_dtoa_r+0xa86>
 800c2a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2aa:	d0ed      	beq.n	800c288 <_dtoa_r+0xa58>
 800c2ac:	9a00      	ldr	r2, [sp, #0]
 800c2ae:	f108 0301 	add.w	r3, r8, #1
 800c2b2:	7013      	strb	r3, [r2, #0]
 800c2b4:	e608      	b.n	800bec8 <_dtoa_r+0x698>
 800c2b6:	9b07      	ldr	r3, [sp, #28]
 800c2b8:	9a07      	ldr	r2, [sp, #28]
 800c2ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c2be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d028      	beq.n	800c316 <_dtoa_r+0xae6>
 800c2c4:	4649      	mov	r1, r9
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	4658      	mov	r0, fp
 800c2cc:	f000 f9d6 	bl	800c67c <__multadd>
 800c2d0:	42af      	cmp	r7, r5
 800c2d2:	4681      	mov	r9, r0
 800c2d4:	f04f 0300 	mov.w	r3, #0
 800c2d8:	f04f 020a 	mov.w	r2, #10
 800c2dc:	4639      	mov	r1, r7
 800c2de:	4658      	mov	r0, fp
 800c2e0:	d107      	bne.n	800c2f2 <_dtoa_r+0xac2>
 800c2e2:	f000 f9cb 	bl	800c67c <__multadd>
 800c2e6:	4607      	mov	r7, r0
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	9b07      	ldr	r3, [sp, #28]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	9307      	str	r3, [sp, #28]
 800c2f0:	e774      	b.n	800c1dc <_dtoa_r+0x9ac>
 800c2f2:	f000 f9c3 	bl	800c67c <__multadd>
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	220a      	movs	r2, #10
 800c2fe:	4658      	mov	r0, fp
 800c300:	f000 f9bc 	bl	800c67c <__multadd>
 800c304:	4605      	mov	r5, r0
 800c306:	e7f0      	b.n	800c2ea <_dtoa_r+0xaba>
 800c308:	9b00      	ldr	r3, [sp, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	bfcc      	ite	gt
 800c30e:	461e      	movgt	r6, r3
 800c310:	2601      	movle	r6, #1
 800c312:	4456      	add	r6, sl
 800c314:	2700      	movs	r7, #0
 800c316:	4649      	mov	r1, r9
 800c318:	2201      	movs	r2, #1
 800c31a:	4658      	mov	r0, fp
 800c31c:	f000 fb5a 	bl	800c9d4 <__lshift>
 800c320:	4621      	mov	r1, r4
 800c322:	4681      	mov	r9, r0
 800c324:	f000 fbc2 	bl	800caac <__mcmp>
 800c328:	2800      	cmp	r0, #0
 800c32a:	dcb0      	bgt.n	800c28e <_dtoa_r+0xa5e>
 800c32c:	d102      	bne.n	800c334 <_dtoa_r+0xb04>
 800c32e:	f018 0f01 	tst.w	r8, #1
 800c332:	d1ac      	bne.n	800c28e <_dtoa_r+0xa5e>
 800c334:	4633      	mov	r3, r6
 800c336:	461e      	mov	r6, r3
 800c338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c33c:	2a30      	cmp	r2, #48	@ 0x30
 800c33e:	d0fa      	beq.n	800c336 <_dtoa_r+0xb06>
 800c340:	e5c2      	b.n	800bec8 <_dtoa_r+0x698>
 800c342:	459a      	cmp	sl, r3
 800c344:	d1a4      	bne.n	800c290 <_dtoa_r+0xa60>
 800c346:	9b04      	ldr	r3, [sp, #16]
 800c348:	3301      	adds	r3, #1
 800c34a:	9304      	str	r3, [sp, #16]
 800c34c:	2331      	movs	r3, #49	@ 0x31
 800c34e:	f88a 3000 	strb.w	r3, [sl]
 800c352:	e5b9      	b.n	800bec8 <_dtoa_r+0x698>
 800c354:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c356:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c3b4 <_dtoa_r+0xb84>
 800c35a:	b11b      	cbz	r3, 800c364 <_dtoa_r+0xb34>
 800c35c:	f10a 0308 	add.w	r3, sl, #8
 800c360:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c362:	6013      	str	r3, [r2, #0]
 800c364:	4650      	mov	r0, sl
 800c366:	b019      	add	sp, #100	@ 0x64
 800c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c36e:	2b01      	cmp	r3, #1
 800c370:	f77f ae37 	ble.w	800bfe2 <_dtoa_r+0x7b2>
 800c374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c376:	930a      	str	r3, [sp, #40]	@ 0x28
 800c378:	2001      	movs	r0, #1
 800c37a:	e655      	b.n	800c028 <_dtoa_r+0x7f8>
 800c37c:	9b00      	ldr	r3, [sp, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f77f aed6 	ble.w	800c130 <_dtoa_r+0x900>
 800c384:	4656      	mov	r6, sl
 800c386:	4621      	mov	r1, r4
 800c388:	4648      	mov	r0, r9
 800c38a:	f7ff f9c8 	bl	800b71e <quorem>
 800c38e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c392:	f806 8b01 	strb.w	r8, [r6], #1
 800c396:	9b00      	ldr	r3, [sp, #0]
 800c398:	eba6 020a 	sub.w	r2, r6, sl
 800c39c:	4293      	cmp	r3, r2
 800c39e:	ddb3      	ble.n	800c308 <_dtoa_r+0xad8>
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	220a      	movs	r2, #10
 800c3a6:	4658      	mov	r0, fp
 800c3a8:	f000 f968 	bl	800c67c <__multadd>
 800c3ac:	4681      	mov	r9, r0
 800c3ae:	e7ea      	b.n	800c386 <_dtoa_r+0xb56>
 800c3b0:	0800ea69 	.word	0x0800ea69
 800c3b4:	0800e9ed 	.word	0x0800e9ed

0800c3b8 <_free_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	2900      	cmp	r1, #0
 800c3be:	d041      	beq.n	800c444 <_free_r+0x8c>
 800c3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3c4:	1f0c      	subs	r4, r1, #4
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	bfb8      	it	lt
 800c3ca:	18e4      	addlt	r4, r4, r3
 800c3cc:	f000 f8e8 	bl	800c5a0 <__malloc_lock>
 800c3d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c448 <_free_r+0x90>)
 800c3d2:	6813      	ldr	r3, [r2, #0]
 800c3d4:	b933      	cbnz	r3, 800c3e4 <_free_r+0x2c>
 800c3d6:	6063      	str	r3, [r4, #4]
 800c3d8:	6014      	str	r4, [r2, #0]
 800c3da:	4628      	mov	r0, r5
 800c3dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3e0:	f000 b8e4 	b.w	800c5ac <__malloc_unlock>
 800c3e4:	42a3      	cmp	r3, r4
 800c3e6:	d908      	bls.n	800c3fa <_free_r+0x42>
 800c3e8:	6820      	ldr	r0, [r4, #0]
 800c3ea:	1821      	adds	r1, r4, r0
 800c3ec:	428b      	cmp	r3, r1
 800c3ee:	bf01      	itttt	eq
 800c3f0:	6819      	ldreq	r1, [r3, #0]
 800c3f2:	685b      	ldreq	r3, [r3, #4]
 800c3f4:	1809      	addeq	r1, r1, r0
 800c3f6:	6021      	streq	r1, [r4, #0]
 800c3f8:	e7ed      	b.n	800c3d6 <_free_r+0x1e>
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	b10b      	cbz	r3, 800c404 <_free_r+0x4c>
 800c400:	42a3      	cmp	r3, r4
 800c402:	d9fa      	bls.n	800c3fa <_free_r+0x42>
 800c404:	6811      	ldr	r1, [r2, #0]
 800c406:	1850      	adds	r0, r2, r1
 800c408:	42a0      	cmp	r0, r4
 800c40a:	d10b      	bne.n	800c424 <_free_r+0x6c>
 800c40c:	6820      	ldr	r0, [r4, #0]
 800c40e:	4401      	add	r1, r0
 800c410:	1850      	adds	r0, r2, r1
 800c412:	4283      	cmp	r3, r0
 800c414:	6011      	str	r1, [r2, #0]
 800c416:	d1e0      	bne.n	800c3da <_free_r+0x22>
 800c418:	6818      	ldr	r0, [r3, #0]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	6053      	str	r3, [r2, #4]
 800c41e:	4408      	add	r0, r1
 800c420:	6010      	str	r0, [r2, #0]
 800c422:	e7da      	b.n	800c3da <_free_r+0x22>
 800c424:	d902      	bls.n	800c42c <_free_r+0x74>
 800c426:	230c      	movs	r3, #12
 800c428:	602b      	str	r3, [r5, #0]
 800c42a:	e7d6      	b.n	800c3da <_free_r+0x22>
 800c42c:	6820      	ldr	r0, [r4, #0]
 800c42e:	1821      	adds	r1, r4, r0
 800c430:	428b      	cmp	r3, r1
 800c432:	bf04      	itt	eq
 800c434:	6819      	ldreq	r1, [r3, #0]
 800c436:	685b      	ldreq	r3, [r3, #4]
 800c438:	6063      	str	r3, [r4, #4]
 800c43a:	bf04      	itt	eq
 800c43c:	1809      	addeq	r1, r1, r0
 800c43e:	6021      	streq	r1, [r4, #0]
 800c440:	6054      	str	r4, [r2, #4]
 800c442:	e7ca      	b.n	800c3da <_free_r+0x22>
 800c444:	bd38      	pop	{r3, r4, r5, pc}
 800c446:	bf00      	nop
 800c448:	200050bc 	.word	0x200050bc

0800c44c <malloc>:
 800c44c:	4b02      	ldr	r3, [pc, #8]	@ (800c458 <malloc+0xc>)
 800c44e:	4601      	mov	r1, r0
 800c450:	6818      	ldr	r0, [r3, #0]
 800c452:	f000 b825 	b.w	800c4a0 <_malloc_r>
 800c456:	bf00      	nop
 800c458:	2000001c 	.word	0x2000001c

0800c45c <sbrk_aligned>:
 800c45c:	b570      	push	{r4, r5, r6, lr}
 800c45e:	4e0f      	ldr	r6, [pc, #60]	@ (800c49c <sbrk_aligned+0x40>)
 800c460:	460c      	mov	r4, r1
 800c462:	6831      	ldr	r1, [r6, #0]
 800c464:	4605      	mov	r5, r0
 800c466:	b911      	cbnz	r1, 800c46e <sbrk_aligned+0x12>
 800c468:	f000 fe9a 	bl	800d1a0 <_sbrk_r>
 800c46c:	6030      	str	r0, [r6, #0]
 800c46e:	4621      	mov	r1, r4
 800c470:	4628      	mov	r0, r5
 800c472:	f000 fe95 	bl	800d1a0 <_sbrk_r>
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	d103      	bne.n	800c482 <sbrk_aligned+0x26>
 800c47a:	f04f 34ff 	mov.w	r4, #4294967295
 800c47e:	4620      	mov	r0, r4
 800c480:	bd70      	pop	{r4, r5, r6, pc}
 800c482:	1cc4      	adds	r4, r0, #3
 800c484:	f024 0403 	bic.w	r4, r4, #3
 800c488:	42a0      	cmp	r0, r4
 800c48a:	d0f8      	beq.n	800c47e <sbrk_aligned+0x22>
 800c48c:	1a21      	subs	r1, r4, r0
 800c48e:	4628      	mov	r0, r5
 800c490:	f000 fe86 	bl	800d1a0 <_sbrk_r>
 800c494:	3001      	adds	r0, #1
 800c496:	d1f2      	bne.n	800c47e <sbrk_aligned+0x22>
 800c498:	e7ef      	b.n	800c47a <sbrk_aligned+0x1e>
 800c49a:	bf00      	nop
 800c49c:	200050b8 	.word	0x200050b8

0800c4a0 <_malloc_r>:
 800c4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4a4:	1ccd      	adds	r5, r1, #3
 800c4a6:	f025 0503 	bic.w	r5, r5, #3
 800c4aa:	3508      	adds	r5, #8
 800c4ac:	2d0c      	cmp	r5, #12
 800c4ae:	bf38      	it	cc
 800c4b0:	250c      	movcc	r5, #12
 800c4b2:	2d00      	cmp	r5, #0
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	db01      	blt.n	800c4bc <_malloc_r+0x1c>
 800c4b8:	42a9      	cmp	r1, r5
 800c4ba:	d904      	bls.n	800c4c6 <_malloc_r+0x26>
 800c4bc:	230c      	movs	r3, #12
 800c4be:	6033      	str	r3, [r6, #0]
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c59c <_malloc_r+0xfc>
 800c4ca:	f000 f869 	bl	800c5a0 <__malloc_lock>
 800c4ce:	f8d8 3000 	ldr.w	r3, [r8]
 800c4d2:	461c      	mov	r4, r3
 800c4d4:	bb44      	cbnz	r4, 800c528 <_malloc_r+0x88>
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f7ff ffbf 	bl	800c45c <sbrk_aligned>
 800c4de:	1c43      	adds	r3, r0, #1
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	d158      	bne.n	800c596 <_malloc_r+0xf6>
 800c4e4:	f8d8 4000 	ldr.w	r4, [r8]
 800c4e8:	4627      	mov	r7, r4
 800c4ea:	2f00      	cmp	r7, #0
 800c4ec:	d143      	bne.n	800c576 <_malloc_r+0xd6>
 800c4ee:	2c00      	cmp	r4, #0
 800c4f0:	d04b      	beq.n	800c58a <_malloc_r+0xea>
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	4639      	mov	r1, r7
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	eb04 0903 	add.w	r9, r4, r3
 800c4fc:	f000 fe50 	bl	800d1a0 <_sbrk_r>
 800c500:	4581      	cmp	r9, r0
 800c502:	d142      	bne.n	800c58a <_malloc_r+0xea>
 800c504:	6821      	ldr	r1, [r4, #0]
 800c506:	1a6d      	subs	r5, r5, r1
 800c508:	4629      	mov	r1, r5
 800c50a:	4630      	mov	r0, r6
 800c50c:	f7ff ffa6 	bl	800c45c <sbrk_aligned>
 800c510:	3001      	adds	r0, #1
 800c512:	d03a      	beq.n	800c58a <_malloc_r+0xea>
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	442b      	add	r3, r5
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	f8d8 3000 	ldr.w	r3, [r8]
 800c51e:	685a      	ldr	r2, [r3, #4]
 800c520:	bb62      	cbnz	r2, 800c57c <_malloc_r+0xdc>
 800c522:	f8c8 7000 	str.w	r7, [r8]
 800c526:	e00f      	b.n	800c548 <_malloc_r+0xa8>
 800c528:	6822      	ldr	r2, [r4, #0]
 800c52a:	1b52      	subs	r2, r2, r5
 800c52c:	d420      	bmi.n	800c570 <_malloc_r+0xd0>
 800c52e:	2a0b      	cmp	r2, #11
 800c530:	d917      	bls.n	800c562 <_malloc_r+0xc2>
 800c532:	1961      	adds	r1, r4, r5
 800c534:	42a3      	cmp	r3, r4
 800c536:	6025      	str	r5, [r4, #0]
 800c538:	bf18      	it	ne
 800c53a:	6059      	strne	r1, [r3, #4]
 800c53c:	6863      	ldr	r3, [r4, #4]
 800c53e:	bf08      	it	eq
 800c540:	f8c8 1000 	streq.w	r1, [r8]
 800c544:	5162      	str	r2, [r4, r5]
 800c546:	604b      	str	r3, [r1, #4]
 800c548:	4630      	mov	r0, r6
 800c54a:	f000 f82f 	bl	800c5ac <__malloc_unlock>
 800c54e:	f104 000b 	add.w	r0, r4, #11
 800c552:	1d23      	adds	r3, r4, #4
 800c554:	f020 0007 	bic.w	r0, r0, #7
 800c558:	1ac2      	subs	r2, r0, r3
 800c55a:	bf1c      	itt	ne
 800c55c:	1a1b      	subne	r3, r3, r0
 800c55e:	50a3      	strne	r3, [r4, r2]
 800c560:	e7af      	b.n	800c4c2 <_malloc_r+0x22>
 800c562:	6862      	ldr	r2, [r4, #4]
 800c564:	42a3      	cmp	r3, r4
 800c566:	bf0c      	ite	eq
 800c568:	f8c8 2000 	streq.w	r2, [r8]
 800c56c:	605a      	strne	r2, [r3, #4]
 800c56e:	e7eb      	b.n	800c548 <_malloc_r+0xa8>
 800c570:	4623      	mov	r3, r4
 800c572:	6864      	ldr	r4, [r4, #4]
 800c574:	e7ae      	b.n	800c4d4 <_malloc_r+0x34>
 800c576:	463c      	mov	r4, r7
 800c578:	687f      	ldr	r7, [r7, #4]
 800c57a:	e7b6      	b.n	800c4ea <_malloc_r+0x4a>
 800c57c:	461a      	mov	r2, r3
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	42a3      	cmp	r3, r4
 800c582:	d1fb      	bne.n	800c57c <_malloc_r+0xdc>
 800c584:	2300      	movs	r3, #0
 800c586:	6053      	str	r3, [r2, #4]
 800c588:	e7de      	b.n	800c548 <_malloc_r+0xa8>
 800c58a:	230c      	movs	r3, #12
 800c58c:	6033      	str	r3, [r6, #0]
 800c58e:	4630      	mov	r0, r6
 800c590:	f000 f80c 	bl	800c5ac <__malloc_unlock>
 800c594:	e794      	b.n	800c4c0 <_malloc_r+0x20>
 800c596:	6005      	str	r5, [r0, #0]
 800c598:	e7d6      	b.n	800c548 <_malloc_r+0xa8>
 800c59a:	bf00      	nop
 800c59c:	200050bc 	.word	0x200050bc

0800c5a0 <__malloc_lock>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	@ (800c5a8 <__malloc_lock+0x8>)
 800c5a2:	f7ff b8ac 	b.w	800b6fe <__retarget_lock_acquire_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	200050b4 	.word	0x200050b4

0800c5ac <__malloc_unlock>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	@ (800c5b4 <__malloc_unlock+0x8>)
 800c5ae:	f7ff b8a7 	b.w	800b700 <__retarget_lock_release_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	200050b4 	.word	0x200050b4

0800c5b8 <_Balloc>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	69c6      	ldr	r6, [r0, #28]
 800c5bc:	4604      	mov	r4, r0
 800c5be:	460d      	mov	r5, r1
 800c5c0:	b976      	cbnz	r6, 800c5e0 <_Balloc+0x28>
 800c5c2:	2010      	movs	r0, #16
 800c5c4:	f7ff ff42 	bl	800c44c <malloc>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	61e0      	str	r0, [r4, #28]
 800c5cc:	b920      	cbnz	r0, 800c5d8 <_Balloc+0x20>
 800c5ce:	4b18      	ldr	r3, [pc, #96]	@ (800c630 <_Balloc+0x78>)
 800c5d0:	4818      	ldr	r0, [pc, #96]	@ (800c634 <_Balloc+0x7c>)
 800c5d2:	216b      	movs	r1, #107	@ 0x6b
 800c5d4:	f000 fdf4 	bl	800d1c0 <__assert_func>
 800c5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5dc:	6006      	str	r6, [r0, #0]
 800c5de:	60c6      	str	r6, [r0, #12]
 800c5e0:	69e6      	ldr	r6, [r4, #28]
 800c5e2:	68f3      	ldr	r3, [r6, #12]
 800c5e4:	b183      	cbz	r3, 800c608 <_Balloc+0x50>
 800c5e6:	69e3      	ldr	r3, [r4, #28]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5ee:	b9b8      	cbnz	r0, 800c620 <_Balloc+0x68>
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c5f6:	1d72      	adds	r2, r6, #5
 800c5f8:	0092      	lsls	r2, r2, #2
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 fdfe 	bl	800d1fc <_calloc_r>
 800c600:	b160      	cbz	r0, 800c61c <_Balloc+0x64>
 800c602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c606:	e00e      	b.n	800c626 <_Balloc+0x6e>
 800c608:	2221      	movs	r2, #33	@ 0x21
 800c60a:	2104      	movs	r1, #4
 800c60c:	4620      	mov	r0, r4
 800c60e:	f000 fdf5 	bl	800d1fc <_calloc_r>
 800c612:	69e3      	ldr	r3, [r4, #28]
 800c614:	60f0      	str	r0, [r6, #12]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1e4      	bne.n	800c5e6 <_Balloc+0x2e>
 800c61c:	2000      	movs	r0, #0
 800c61e:	bd70      	pop	{r4, r5, r6, pc}
 800c620:	6802      	ldr	r2, [r0, #0]
 800c622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c626:	2300      	movs	r3, #0
 800c628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c62c:	e7f7      	b.n	800c61e <_Balloc+0x66>
 800c62e:	bf00      	nop
 800c630:	0800e9fa 	.word	0x0800e9fa
 800c634:	0800ea7a 	.word	0x0800ea7a

0800c638 <_Bfree>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	69c6      	ldr	r6, [r0, #28]
 800c63c:	4605      	mov	r5, r0
 800c63e:	460c      	mov	r4, r1
 800c640:	b976      	cbnz	r6, 800c660 <_Bfree+0x28>
 800c642:	2010      	movs	r0, #16
 800c644:	f7ff ff02 	bl	800c44c <malloc>
 800c648:	4602      	mov	r2, r0
 800c64a:	61e8      	str	r0, [r5, #28]
 800c64c:	b920      	cbnz	r0, 800c658 <_Bfree+0x20>
 800c64e:	4b09      	ldr	r3, [pc, #36]	@ (800c674 <_Bfree+0x3c>)
 800c650:	4809      	ldr	r0, [pc, #36]	@ (800c678 <_Bfree+0x40>)
 800c652:	218f      	movs	r1, #143	@ 0x8f
 800c654:	f000 fdb4 	bl	800d1c0 <__assert_func>
 800c658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c65c:	6006      	str	r6, [r0, #0]
 800c65e:	60c6      	str	r6, [r0, #12]
 800c660:	b13c      	cbz	r4, 800c672 <_Bfree+0x3a>
 800c662:	69eb      	ldr	r3, [r5, #28]
 800c664:	6862      	ldr	r2, [r4, #4]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c66c:	6021      	str	r1, [r4, #0]
 800c66e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	0800e9fa 	.word	0x0800e9fa
 800c678:	0800ea7a 	.word	0x0800ea7a

0800c67c <__multadd>:
 800c67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c680:	690d      	ldr	r5, [r1, #16]
 800c682:	4607      	mov	r7, r0
 800c684:	460c      	mov	r4, r1
 800c686:	461e      	mov	r6, r3
 800c688:	f101 0c14 	add.w	ip, r1, #20
 800c68c:	2000      	movs	r0, #0
 800c68e:	f8dc 3000 	ldr.w	r3, [ip]
 800c692:	b299      	uxth	r1, r3
 800c694:	fb02 6101 	mla	r1, r2, r1, r6
 800c698:	0c1e      	lsrs	r6, r3, #16
 800c69a:	0c0b      	lsrs	r3, r1, #16
 800c69c:	fb02 3306 	mla	r3, r2, r6, r3
 800c6a0:	b289      	uxth	r1, r1
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6a8:	4285      	cmp	r5, r0
 800c6aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c6ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6b2:	dcec      	bgt.n	800c68e <__multadd+0x12>
 800c6b4:	b30e      	cbz	r6, 800c6fa <__multadd+0x7e>
 800c6b6:	68a3      	ldr	r3, [r4, #8]
 800c6b8:	42ab      	cmp	r3, r5
 800c6ba:	dc19      	bgt.n	800c6f0 <__multadd+0x74>
 800c6bc:	6861      	ldr	r1, [r4, #4]
 800c6be:	4638      	mov	r0, r7
 800c6c0:	3101      	adds	r1, #1
 800c6c2:	f7ff ff79 	bl	800c5b8 <_Balloc>
 800c6c6:	4680      	mov	r8, r0
 800c6c8:	b928      	cbnz	r0, 800c6d6 <__multadd+0x5a>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c700 <__multadd+0x84>)
 800c6ce:	480d      	ldr	r0, [pc, #52]	@ (800c704 <__multadd+0x88>)
 800c6d0:	21ba      	movs	r1, #186	@ 0xba
 800c6d2:	f000 fd75 	bl	800d1c0 <__assert_func>
 800c6d6:	6922      	ldr	r2, [r4, #16]
 800c6d8:	3202      	adds	r2, #2
 800c6da:	f104 010c 	add.w	r1, r4, #12
 800c6de:	0092      	lsls	r2, r2, #2
 800c6e0:	300c      	adds	r0, #12
 800c6e2:	f7ff f80e 	bl	800b702 <memcpy>
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f7ff ffa5 	bl	800c638 <_Bfree>
 800c6ee:	4644      	mov	r4, r8
 800c6f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6f4:	3501      	adds	r5, #1
 800c6f6:	615e      	str	r6, [r3, #20]
 800c6f8:	6125      	str	r5, [r4, #16]
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c700:	0800ea69 	.word	0x0800ea69
 800c704:	0800ea7a 	.word	0x0800ea7a

0800c708 <__hi0bits>:
 800c708:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c70c:	4603      	mov	r3, r0
 800c70e:	bf36      	itet	cc
 800c710:	0403      	lslcc	r3, r0, #16
 800c712:	2000      	movcs	r0, #0
 800c714:	2010      	movcc	r0, #16
 800c716:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c71a:	bf3c      	itt	cc
 800c71c:	021b      	lslcc	r3, r3, #8
 800c71e:	3008      	addcc	r0, #8
 800c720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c724:	bf3c      	itt	cc
 800c726:	011b      	lslcc	r3, r3, #4
 800c728:	3004      	addcc	r0, #4
 800c72a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c72e:	bf3c      	itt	cc
 800c730:	009b      	lslcc	r3, r3, #2
 800c732:	3002      	addcc	r0, #2
 800c734:	2b00      	cmp	r3, #0
 800c736:	db05      	blt.n	800c744 <__hi0bits+0x3c>
 800c738:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c73c:	f100 0001 	add.w	r0, r0, #1
 800c740:	bf08      	it	eq
 800c742:	2020      	moveq	r0, #32
 800c744:	4770      	bx	lr

0800c746 <__lo0bits>:
 800c746:	6803      	ldr	r3, [r0, #0]
 800c748:	4602      	mov	r2, r0
 800c74a:	f013 0007 	ands.w	r0, r3, #7
 800c74e:	d00b      	beq.n	800c768 <__lo0bits+0x22>
 800c750:	07d9      	lsls	r1, r3, #31
 800c752:	d421      	bmi.n	800c798 <__lo0bits+0x52>
 800c754:	0798      	lsls	r0, r3, #30
 800c756:	bf49      	itett	mi
 800c758:	085b      	lsrmi	r3, r3, #1
 800c75a:	089b      	lsrpl	r3, r3, #2
 800c75c:	2001      	movmi	r0, #1
 800c75e:	6013      	strmi	r3, [r2, #0]
 800c760:	bf5c      	itt	pl
 800c762:	6013      	strpl	r3, [r2, #0]
 800c764:	2002      	movpl	r0, #2
 800c766:	4770      	bx	lr
 800c768:	b299      	uxth	r1, r3
 800c76a:	b909      	cbnz	r1, 800c770 <__lo0bits+0x2a>
 800c76c:	0c1b      	lsrs	r3, r3, #16
 800c76e:	2010      	movs	r0, #16
 800c770:	b2d9      	uxtb	r1, r3
 800c772:	b909      	cbnz	r1, 800c778 <__lo0bits+0x32>
 800c774:	3008      	adds	r0, #8
 800c776:	0a1b      	lsrs	r3, r3, #8
 800c778:	0719      	lsls	r1, r3, #28
 800c77a:	bf04      	itt	eq
 800c77c:	091b      	lsreq	r3, r3, #4
 800c77e:	3004      	addeq	r0, #4
 800c780:	0799      	lsls	r1, r3, #30
 800c782:	bf04      	itt	eq
 800c784:	089b      	lsreq	r3, r3, #2
 800c786:	3002      	addeq	r0, #2
 800c788:	07d9      	lsls	r1, r3, #31
 800c78a:	d403      	bmi.n	800c794 <__lo0bits+0x4e>
 800c78c:	085b      	lsrs	r3, r3, #1
 800c78e:	f100 0001 	add.w	r0, r0, #1
 800c792:	d003      	beq.n	800c79c <__lo0bits+0x56>
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	4770      	bx	lr
 800c798:	2000      	movs	r0, #0
 800c79a:	4770      	bx	lr
 800c79c:	2020      	movs	r0, #32
 800c79e:	4770      	bx	lr

0800c7a0 <__i2b>:
 800c7a0:	b510      	push	{r4, lr}
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	2101      	movs	r1, #1
 800c7a6:	f7ff ff07 	bl	800c5b8 <_Balloc>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	b928      	cbnz	r0, 800c7ba <__i2b+0x1a>
 800c7ae:	4b05      	ldr	r3, [pc, #20]	@ (800c7c4 <__i2b+0x24>)
 800c7b0:	4805      	ldr	r0, [pc, #20]	@ (800c7c8 <__i2b+0x28>)
 800c7b2:	f240 1145 	movw	r1, #325	@ 0x145
 800c7b6:	f000 fd03 	bl	800d1c0 <__assert_func>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	6144      	str	r4, [r0, #20]
 800c7be:	6103      	str	r3, [r0, #16]
 800c7c0:	bd10      	pop	{r4, pc}
 800c7c2:	bf00      	nop
 800c7c4:	0800ea69 	.word	0x0800ea69
 800c7c8:	0800ea7a 	.word	0x0800ea7a

0800c7cc <__multiply>:
 800c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	690a      	ldr	r2, [r1, #16]
 800c7d4:	6923      	ldr	r3, [r4, #16]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	bfa8      	it	ge
 800c7da:	4623      	movge	r3, r4
 800c7dc:	460f      	mov	r7, r1
 800c7de:	bfa4      	itt	ge
 800c7e0:	460c      	movge	r4, r1
 800c7e2:	461f      	movge	r7, r3
 800c7e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c7e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c7ec:	68a3      	ldr	r3, [r4, #8]
 800c7ee:	6861      	ldr	r1, [r4, #4]
 800c7f0:	eb0a 0609 	add.w	r6, sl, r9
 800c7f4:	42b3      	cmp	r3, r6
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	bfb8      	it	lt
 800c7fa:	3101      	addlt	r1, #1
 800c7fc:	f7ff fedc 	bl	800c5b8 <_Balloc>
 800c800:	b930      	cbnz	r0, 800c810 <__multiply+0x44>
 800c802:	4602      	mov	r2, r0
 800c804:	4b44      	ldr	r3, [pc, #272]	@ (800c918 <__multiply+0x14c>)
 800c806:	4845      	ldr	r0, [pc, #276]	@ (800c91c <__multiply+0x150>)
 800c808:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c80c:	f000 fcd8 	bl	800d1c0 <__assert_func>
 800c810:	f100 0514 	add.w	r5, r0, #20
 800c814:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c818:	462b      	mov	r3, r5
 800c81a:	2200      	movs	r2, #0
 800c81c:	4543      	cmp	r3, r8
 800c81e:	d321      	bcc.n	800c864 <__multiply+0x98>
 800c820:	f107 0114 	add.w	r1, r7, #20
 800c824:	f104 0214 	add.w	r2, r4, #20
 800c828:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c82c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c830:	9302      	str	r3, [sp, #8]
 800c832:	1b13      	subs	r3, r2, r4
 800c834:	3b15      	subs	r3, #21
 800c836:	f023 0303 	bic.w	r3, r3, #3
 800c83a:	3304      	adds	r3, #4
 800c83c:	f104 0715 	add.w	r7, r4, #21
 800c840:	42ba      	cmp	r2, r7
 800c842:	bf38      	it	cc
 800c844:	2304      	movcc	r3, #4
 800c846:	9301      	str	r3, [sp, #4]
 800c848:	9b02      	ldr	r3, [sp, #8]
 800c84a:	9103      	str	r1, [sp, #12]
 800c84c:	428b      	cmp	r3, r1
 800c84e:	d80c      	bhi.n	800c86a <__multiply+0x9e>
 800c850:	2e00      	cmp	r6, #0
 800c852:	dd03      	ble.n	800c85c <__multiply+0x90>
 800c854:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d05b      	beq.n	800c914 <__multiply+0x148>
 800c85c:	6106      	str	r6, [r0, #16]
 800c85e:	b005      	add	sp, #20
 800c860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c864:	f843 2b04 	str.w	r2, [r3], #4
 800c868:	e7d8      	b.n	800c81c <__multiply+0x50>
 800c86a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c86e:	f1ba 0f00 	cmp.w	sl, #0
 800c872:	d024      	beq.n	800c8be <__multiply+0xf2>
 800c874:	f104 0e14 	add.w	lr, r4, #20
 800c878:	46a9      	mov	r9, r5
 800c87a:	f04f 0c00 	mov.w	ip, #0
 800c87e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c882:	f8d9 3000 	ldr.w	r3, [r9]
 800c886:	fa1f fb87 	uxth.w	fp, r7
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c890:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c894:	f8d9 7000 	ldr.w	r7, [r9]
 800c898:	4463      	add	r3, ip
 800c89a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c89e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c8a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8ac:	4572      	cmp	r2, lr
 800c8ae:	f849 3b04 	str.w	r3, [r9], #4
 800c8b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8b6:	d8e2      	bhi.n	800c87e <__multiply+0xb2>
 800c8b8:	9b01      	ldr	r3, [sp, #4]
 800c8ba:	f845 c003 	str.w	ip, [r5, r3]
 800c8be:	9b03      	ldr	r3, [sp, #12]
 800c8c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8c4:	3104      	adds	r1, #4
 800c8c6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ca:	d021      	beq.n	800c910 <__multiply+0x144>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	f104 0c14 	add.w	ip, r4, #20
 800c8d2:	46ae      	mov	lr, r5
 800c8d4:	f04f 0a00 	mov.w	sl, #0
 800c8d8:	f8bc b000 	ldrh.w	fp, [ip]
 800c8dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c8e0:	fb09 770b 	mla	r7, r9, fp, r7
 800c8e4:	4457      	add	r7, sl
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8ec:	f84e 3b04 	str.w	r3, [lr], #4
 800c8f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8f8:	f8be 3000 	ldrh.w	r3, [lr]
 800c8fc:	fb09 330a 	mla	r3, r9, sl, r3
 800c900:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c904:	4562      	cmp	r2, ip
 800c906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c90a:	d8e5      	bhi.n	800c8d8 <__multiply+0x10c>
 800c90c:	9f01      	ldr	r7, [sp, #4]
 800c90e:	51eb      	str	r3, [r5, r7]
 800c910:	3504      	adds	r5, #4
 800c912:	e799      	b.n	800c848 <__multiply+0x7c>
 800c914:	3e01      	subs	r6, #1
 800c916:	e79b      	b.n	800c850 <__multiply+0x84>
 800c918:	0800ea69 	.word	0x0800ea69
 800c91c:	0800ea7a 	.word	0x0800ea7a

0800c920 <__pow5mult>:
 800c920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c924:	4615      	mov	r5, r2
 800c926:	f012 0203 	ands.w	r2, r2, #3
 800c92a:	4607      	mov	r7, r0
 800c92c:	460e      	mov	r6, r1
 800c92e:	d007      	beq.n	800c940 <__pow5mult+0x20>
 800c930:	4c25      	ldr	r4, [pc, #148]	@ (800c9c8 <__pow5mult+0xa8>)
 800c932:	3a01      	subs	r2, #1
 800c934:	2300      	movs	r3, #0
 800c936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c93a:	f7ff fe9f 	bl	800c67c <__multadd>
 800c93e:	4606      	mov	r6, r0
 800c940:	10ad      	asrs	r5, r5, #2
 800c942:	d03d      	beq.n	800c9c0 <__pow5mult+0xa0>
 800c944:	69fc      	ldr	r4, [r7, #28]
 800c946:	b97c      	cbnz	r4, 800c968 <__pow5mult+0x48>
 800c948:	2010      	movs	r0, #16
 800c94a:	f7ff fd7f 	bl	800c44c <malloc>
 800c94e:	4602      	mov	r2, r0
 800c950:	61f8      	str	r0, [r7, #28]
 800c952:	b928      	cbnz	r0, 800c960 <__pow5mult+0x40>
 800c954:	4b1d      	ldr	r3, [pc, #116]	@ (800c9cc <__pow5mult+0xac>)
 800c956:	481e      	ldr	r0, [pc, #120]	@ (800c9d0 <__pow5mult+0xb0>)
 800c958:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c95c:	f000 fc30 	bl	800d1c0 <__assert_func>
 800c960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c964:	6004      	str	r4, [r0, #0]
 800c966:	60c4      	str	r4, [r0, #12]
 800c968:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c96c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c970:	b94c      	cbnz	r4, 800c986 <__pow5mult+0x66>
 800c972:	f240 2171 	movw	r1, #625	@ 0x271
 800c976:	4638      	mov	r0, r7
 800c978:	f7ff ff12 	bl	800c7a0 <__i2b>
 800c97c:	2300      	movs	r3, #0
 800c97e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c982:	4604      	mov	r4, r0
 800c984:	6003      	str	r3, [r0, #0]
 800c986:	f04f 0900 	mov.w	r9, #0
 800c98a:	07eb      	lsls	r3, r5, #31
 800c98c:	d50a      	bpl.n	800c9a4 <__pow5mult+0x84>
 800c98e:	4631      	mov	r1, r6
 800c990:	4622      	mov	r2, r4
 800c992:	4638      	mov	r0, r7
 800c994:	f7ff ff1a 	bl	800c7cc <__multiply>
 800c998:	4631      	mov	r1, r6
 800c99a:	4680      	mov	r8, r0
 800c99c:	4638      	mov	r0, r7
 800c99e:	f7ff fe4b 	bl	800c638 <_Bfree>
 800c9a2:	4646      	mov	r6, r8
 800c9a4:	106d      	asrs	r5, r5, #1
 800c9a6:	d00b      	beq.n	800c9c0 <__pow5mult+0xa0>
 800c9a8:	6820      	ldr	r0, [r4, #0]
 800c9aa:	b938      	cbnz	r0, 800c9bc <__pow5mult+0x9c>
 800c9ac:	4622      	mov	r2, r4
 800c9ae:	4621      	mov	r1, r4
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	f7ff ff0b 	bl	800c7cc <__multiply>
 800c9b6:	6020      	str	r0, [r4, #0]
 800c9b8:	f8c0 9000 	str.w	r9, [r0]
 800c9bc:	4604      	mov	r4, r0
 800c9be:	e7e4      	b.n	800c98a <__pow5mult+0x6a>
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c6:	bf00      	nop
 800c9c8:	0800ead4 	.word	0x0800ead4
 800c9cc:	0800e9fa 	.word	0x0800e9fa
 800c9d0:	0800ea7a 	.word	0x0800ea7a

0800c9d4 <__lshift>:
 800c9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d8:	460c      	mov	r4, r1
 800c9da:	6849      	ldr	r1, [r1, #4]
 800c9dc:	6923      	ldr	r3, [r4, #16]
 800c9de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	4607      	mov	r7, r0
 800c9e6:	4691      	mov	r9, r2
 800c9e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9ec:	f108 0601 	add.w	r6, r8, #1
 800c9f0:	42b3      	cmp	r3, r6
 800c9f2:	db0b      	blt.n	800ca0c <__lshift+0x38>
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	f7ff fddf 	bl	800c5b8 <_Balloc>
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	b948      	cbnz	r0, 800ca12 <__lshift+0x3e>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	4b28      	ldr	r3, [pc, #160]	@ (800caa4 <__lshift+0xd0>)
 800ca02:	4829      	ldr	r0, [pc, #164]	@ (800caa8 <__lshift+0xd4>)
 800ca04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca08:	f000 fbda 	bl	800d1c0 <__assert_func>
 800ca0c:	3101      	adds	r1, #1
 800ca0e:	005b      	lsls	r3, r3, #1
 800ca10:	e7ee      	b.n	800c9f0 <__lshift+0x1c>
 800ca12:	2300      	movs	r3, #0
 800ca14:	f100 0114 	add.w	r1, r0, #20
 800ca18:	f100 0210 	add.w	r2, r0, #16
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	4553      	cmp	r3, sl
 800ca20:	db33      	blt.n	800ca8a <__lshift+0xb6>
 800ca22:	6920      	ldr	r0, [r4, #16]
 800ca24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca28:	f104 0314 	add.w	r3, r4, #20
 800ca2c:	f019 091f 	ands.w	r9, r9, #31
 800ca30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca38:	d02b      	beq.n	800ca92 <__lshift+0xbe>
 800ca3a:	f1c9 0e20 	rsb	lr, r9, #32
 800ca3e:	468a      	mov	sl, r1
 800ca40:	2200      	movs	r2, #0
 800ca42:	6818      	ldr	r0, [r3, #0]
 800ca44:	fa00 f009 	lsl.w	r0, r0, r9
 800ca48:	4310      	orrs	r0, r2
 800ca4a:	f84a 0b04 	str.w	r0, [sl], #4
 800ca4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca52:	459c      	cmp	ip, r3
 800ca54:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca58:	d8f3      	bhi.n	800ca42 <__lshift+0x6e>
 800ca5a:	ebac 0304 	sub.w	r3, ip, r4
 800ca5e:	3b15      	subs	r3, #21
 800ca60:	f023 0303 	bic.w	r3, r3, #3
 800ca64:	3304      	adds	r3, #4
 800ca66:	f104 0015 	add.w	r0, r4, #21
 800ca6a:	4584      	cmp	ip, r0
 800ca6c:	bf38      	it	cc
 800ca6e:	2304      	movcc	r3, #4
 800ca70:	50ca      	str	r2, [r1, r3]
 800ca72:	b10a      	cbz	r2, 800ca78 <__lshift+0xa4>
 800ca74:	f108 0602 	add.w	r6, r8, #2
 800ca78:	3e01      	subs	r6, #1
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	612e      	str	r6, [r5, #16]
 800ca7e:	4621      	mov	r1, r4
 800ca80:	f7ff fdda 	bl	800c638 <_Bfree>
 800ca84:	4628      	mov	r0, r5
 800ca86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca8e:	3301      	adds	r3, #1
 800ca90:	e7c5      	b.n	800ca1e <__lshift+0x4a>
 800ca92:	3904      	subs	r1, #4
 800ca94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca98:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca9c:	459c      	cmp	ip, r3
 800ca9e:	d8f9      	bhi.n	800ca94 <__lshift+0xc0>
 800caa0:	e7ea      	b.n	800ca78 <__lshift+0xa4>
 800caa2:	bf00      	nop
 800caa4:	0800ea69 	.word	0x0800ea69
 800caa8:	0800ea7a 	.word	0x0800ea7a

0800caac <__mcmp>:
 800caac:	690a      	ldr	r2, [r1, #16]
 800caae:	4603      	mov	r3, r0
 800cab0:	6900      	ldr	r0, [r0, #16]
 800cab2:	1a80      	subs	r0, r0, r2
 800cab4:	b530      	push	{r4, r5, lr}
 800cab6:	d10e      	bne.n	800cad6 <__mcmp+0x2a>
 800cab8:	3314      	adds	r3, #20
 800caba:	3114      	adds	r1, #20
 800cabc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cac0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cac4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cac8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cacc:	4295      	cmp	r5, r2
 800cace:	d003      	beq.n	800cad8 <__mcmp+0x2c>
 800cad0:	d205      	bcs.n	800cade <__mcmp+0x32>
 800cad2:	f04f 30ff 	mov.w	r0, #4294967295
 800cad6:	bd30      	pop	{r4, r5, pc}
 800cad8:	42a3      	cmp	r3, r4
 800cada:	d3f3      	bcc.n	800cac4 <__mcmp+0x18>
 800cadc:	e7fb      	b.n	800cad6 <__mcmp+0x2a>
 800cade:	2001      	movs	r0, #1
 800cae0:	e7f9      	b.n	800cad6 <__mcmp+0x2a>
	...

0800cae4 <__mdiff>:
 800cae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae8:	4689      	mov	r9, r1
 800caea:	4606      	mov	r6, r0
 800caec:	4611      	mov	r1, r2
 800caee:	4648      	mov	r0, r9
 800caf0:	4614      	mov	r4, r2
 800caf2:	f7ff ffdb 	bl	800caac <__mcmp>
 800caf6:	1e05      	subs	r5, r0, #0
 800caf8:	d112      	bne.n	800cb20 <__mdiff+0x3c>
 800cafa:	4629      	mov	r1, r5
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7ff fd5b 	bl	800c5b8 <_Balloc>
 800cb02:	4602      	mov	r2, r0
 800cb04:	b928      	cbnz	r0, 800cb12 <__mdiff+0x2e>
 800cb06:	4b3f      	ldr	r3, [pc, #252]	@ (800cc04 <__mdiff+0x120>)
 800cb08:	f240 2137 	movw	r1, #567	@ 0x237
 800cb0c:	483e      	ldr	r0, [pc, #248]	@ (800cc08 <__mdiff+0x124>)
 800cb0e:	f000 fb57 	bl	800d1c0 <__assert_func>
 800cb12:	2301      	movs	r3, #1
 800cb14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb18:	4610      	mov	r0, r2
 800cb1a:	b003      	add	sp, #12
 800cb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb20:	bfbc      	itt	lt
 800cb22:	464b      	movlt	r3, r9
 800cb24:	46a1      	movlt	r9, r4
 800cb26:	4630      	mov	r0, r6
 800cb28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb2c:	bfba      	itte	lt
 800cb2e:	461c      	movlt	r4, r3
 800cb30:	2501      	movlt	r5, #1
 800cb32:	2500      	movge	r5, #0
 800cb34:	f7ff fd40 	bl	800c5b8 <_Balloc>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	b918      	cbnz	r0, 800cb44 <__mdiff+0x60>
 800cb3c:	4b31      	ldr	r3, [pc, #196]	@ (800cc04 <__mdiff+0x120>)
 800cb3e:	f240 2145 	movw	r1, #581	@ 0x245
 800cb42:	e7e3      	b.n	800cb0c <__mdiff+0x28>
 800cb44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb48:	6926      	ldr	r6, [r4, #16]
 800cb4a:	60c5      	str	r5, [r0, #12]
 800cb4c:	f109 0310 	add.w	r3, r9, #16
 800cb50:	f109 0514 	add.w	r5, r9, #20
 800cb54:	f104 0e14 	add.w	lr, r4, #20
 800cb58:	f100 0b14 	add.w	fp, r0, #20
 800cb5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	46d9      	mov	r9, fp
 800cb68:	f04f 0c00 	mov.w	ip, #0
 800cb6c:	9b01      	ldr	r3, [sp, #4]
 800cb6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb72:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	fa1f f38a 	uxth.w	r3, sl
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	b283      	uxth	r3, r0
 800cb80:	1acb      	subs	r3, r1, r3
 800cb82:	0c00      	lsrs	r0, r0, #16
 800cb84:	4463      	add	r3, ip
 800cb86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb94:	4576      	cmp	r6, lr
 800cb96:	f849 3b04 	str.w	r3, [r9], #4
 800cb9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb9e:	d8e5      	bhi.n	800cb6c <__mdiff+0x88>
 800cba0:	1b33      	subs	r3, r6, r4
 800cba2:	3b15      	subs	r3, #21
 800cba4:	f023 0303 	bic.w	r3, r3, #3
 800cba8:	3415      	adds	r4, #21
 800cbaa:	3304      	adds	r3, #4
 800cbac:	42a6      	cmp	r6, r4
 800cbae:	bf38      	it	cc
 800cbb0:	2304      	movcc	r3, #4
 800cbb2:	441d      	add	r5, r3
 800cbb4:	445b      	add	r3, fp
 800cbb6:	461e      	mov	r6, r3
 800cbb8:	462c      	mov	r4, r5
 800cbba:	4544      	cmp	r4, r8
 800cbbc:	d30e      	bcc.n	800cbdc <__mdiff+0xf8>
 800cbbe:	f108 0103 	add.w	r1, r8, #3
 800cbc2:	1b49      	subs	r1, r1, r5
 800cbc4:	f021 0103 	bic.w	r1, r1, #3
 800cbc8:	3d03      	subs	r5, #3
 800cbca:	45a8      	cmp	r8, r5
 800cbcc:	bf38      	it	cc
 800cbce:	2100      	movcc	r1, #0
 800cbd0:	440b      	add	r3, r1
 800cbd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbd6:	b191      	cbz	r1, 800cbfe <__mdiff+0x11a>
 800cbd8:	6117      	str	r7, [r2, #16]
 800cbda:	e79d      	b.n	800cb18 <__mdiff+0x34>
 800cbdc:	f854 1b04 	ldr.w	r1, [r4], #4
 800cbe0:	46e6      	mov	lr, ip
 800cbe2:	0c08      	lsrs	r0, r1, #16
 800cbe4:	fa1c fc81 	uxtah	ip, ip, r1
 800cbe8:	4471      	add	r1, lr
 800cbea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cbee:	b289      	uxth	r1, r1
 800cbf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cbf4:	f846 1b04 	str.w	r1, [r6], #4
 800cbf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbfc:	e7dd      	b.n	800cbba <__mdiff+0xd6>
 800cbfe:	3f01      	subs	r7, #1
 800cc00:	e7e7      	b.n	800cbd2 <__mdiff+0xee>
 800cc02:	bf00      	nop
 800cc04:	0800ea69 	.word	0x0800ea69
 800cc08:	0800ea7a 	.word	0x0800ea7a

0800cc0c <__d2b>:
 800cc0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc10:	460f      	mov	r7, r1
 800cc12:	2101      	movs	r1, #1
 800cc14:	ec59 8b10 	vmov	r8, r9, d0
 800cc18:	4616      	mov	r6, r2
 800cc1a:	f7ff fccd 	bl	800c5b8 <_Balloc>
 800cc1e:	4604      	mov	r4, r0
 800cc20:	b930      	cbnz	r0, 800cc30 <__d2b+0x24>
 800cc22:	4602      	mov	r2, r0
 800cc24:	4b23      	ldr	r3, [pc, #140]	@ (800ccb4 <__d2b+0xa8>)
 800cc26:	4824      	ldr	r0, [pc, #144]	@ (800ccb8 <__d2b+0xac>)
 800cc28:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc2c:	f000 fac8 	bl	800d1c0 <__assert_func>
 800cc30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc38:	b10d      	cbz	r5, 800cc3e <__d2b+0x32>
 800cc3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc3e:	9301      	str	r3, [sp, #4]
 800cc40:	f1b8 0300 	subs.w	r3, r8, #0
 800cc44:	d023      	beq.n	800cc8e <__d2b+0x82>
 800cc46:	4668      	mov	r0, sp
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	f7ff fd7c 	bl	800c746 <__lo0bits>
 800cc4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc52:	b1d0      	cbz	r0, 800cc8a <__d2b+0x7e>
 800cc54:	f1c0 0320 	rsb	r3, r0, #32
 800cc58:	fa02 f303 	lsl.w	r3, r2, r3
 800cc5c:	430b      	orrs	r3, r1
 800cc5e:	40c2      	lsrs	r2, r0
 800cc60:	6163      	str	r3, [r4, #20]
 800cc62:	9201      	str	r2, [sp, #4]
 800cc64:	9b01      	ldr	r3, [sp, #4]
 800cc66:	61a3      	str	r3, [r4, #24]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	bf0c      	ite	eq
 800cc6c:	2201      	moveq	r2, #1
 800cc6e:	2202      	movne	r2, #2
 800cc70:	6122      	str	r2, [r4, #16]
 800cc72:	b1a5      	cbz	r5, 800cc9e <__d2b+0x92>
 800cc74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc78:	4405      	add	r5, r0
 800cc7a:	603d      	str	r5, [r7, #0]
 800cc7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc80:	6030      	str	r0, [r6, #0]
 800cc82:	4620      	mov	r0, r4
 800cc84:	b003      	add	sp, #12
 800cc86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc8a:	6161      	str	r1, [r4, #20]
 800cc8c:	e7ea      	b.n	800cc64 <__d2b+0x58>
 800cc8e:	a801      	add	r0, sp, #4
 800cc90:	f7ff fd59 	bl	800c746 <__lo0bits>
 800cc94:	9b01      	ldr	r3, [sp, #4]
 800cc96:	6163      	str	r3, [r4, #20]
 800cc98:	3020      	adds	r0, #32
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	e7e8      	b.n	800cc70 <__d2b+0x64>
 800cc9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cca2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cca6:	6038      	str	r0, [r7, #0]
 800cca8:	6918      	ldr	r0, [r3, #16]
 800ccaa:	f7ff fd2d 	bl	800c708 <__hi0bits>
 800ccae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccb2:	e7e5      	b.n	800cc80 <__d2b+0x74>
 800ccb4:	0800ea69 	.word	0x0800ea69
 800ccb8:	0800ea7a 	.word	0x0800ea7a

0800ccbc <__sfputc_r>:
 800ccbc:	6893      	ldr	r3, [r2, #8]
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	b410      	push	{r4}
 800ccc4:	6093      	str	r3, [r2, #8]
 800ccc6:	da08      	bge.n	800ccda <__sfputc_r+0x1e>
 800ccc8:	6994      	ldr	r4, [r2, #24]
 800ccca:	42a3      	cmp	r3, r4
 800cccc:	db01      	blt.n	800ccd2 <__sfputc_r+0x16>
 800ccce:	290a      	cmp	r1, #10
 800ccd0:	d103      	bne.n	800ccda <__sfputc_r+0x1e>
 800ccd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccd6:	f7fe bbdc 	b.w	800b492 <__swbuf_r>
 800ccda:	6813      	ldr	r3, [r2, #0]
 800ccdc:	1c58      	adds	r0, r3, #1
 800ccde:	6010      	str	r0, [r2, #0]
 800cce0:	7019      	strb	r1, [r3, #0]
 800cce2:	4608      	mov	r0, r1
 800cce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cce8:	4770      	bx	lr

0800ccea <__sfputs_r>:
 800ccea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccec:	4606      	mov	r6, r0
 800ccee:	460f      	mov	r7, r1
 800ccf0:	4614      	mov	r4, r2
 800ccf2:	18d5      	adds	r5, r2, r3
 800ccf4:	42ac      	cmp	r4, r5
 800ccf6:	d101      	bne.n	800ccfc <__sfputs_r+0x12>
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	e007      	b.n	800cd0c <__sfputs_r+0x22>
 800ccfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd00:	463a      	mov	r2, r7
 800cd02:	4630      	mov	r0, r6
 800cd04:	f7ff ffda 	bl	800ccbc <__sfputc_r>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	d1f3      	bne.n	800ccf4 <__sfputs_r+0xa>
 800cd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd10 <_vfiprintf_r>:
 800cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd14:	460d      	mov	r5, r1
 800cd16:	b09d      	sub	sp, #116	@ 0x74
 800cd18:	4614      	mov	r4, r2
 800cd1a:	4698      	mov	r8, r3
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	b118      	cbz	r0, 800cd28 <_vfiprintf_r+0x18>
 800cd20:	6a03      	ldr	r3, [r0, #32]
 800cd22:	b90b      	cbnz	r3, 800cd28 <_vfiprintf_r+0x18>
 800cd24:	f7fe facc 	bl	800b2c0 <__sinit>
 800cd28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd2a:	07d9      	lsls	r1, r3, #31
 800cd2c:	d405      	bmi.n	800cd3a <_vfiprintf_r+0x2a>
 800cd2e:	89ab      	ldrh	r3, [r5, #12]
 800cd30:	059a      	lsls	r2, r3, #22
 800cd32:	d402      	bmi.n	800cd3a <_vfiprintf_r+0x2a>
 800cd34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd36:	f7fe fce2 	bl	800b6fe <__retarget_lock_acquire_recursive>
 800cd3a:	89ab      	ldrh	r3, [r5, #12]
 800cd3c:	071b      	lsls	r3, r3, #28
 800cd3e:	d501      	bpl.n	800cd44 <_vfiprintf_r+0x34>
 800cd40:	692b      	ldr	r3, [r5, #16]
 800cd42:	b99b      	cbnz	r3, 800cd6c <_vfiprintf_r+0x5c>
 800cd44:	4629      	mov	r1, r5
 800cd46:	4630      	mov	r0, r6
 800cd48:	f7fe fbe2 	bl	800b510 <__swsetup_r>
 800cd4c:	b170      	cbz	r0, 800cd6c <_vfiprintf_r+0x5c>
 800cd4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd50:	07dc      	lsls	r4, r3, #31
 800cd52:	d504      	bpl.n	800cd5e <_vfiprintf_r+0x4e>
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	b01d      	add	sp, #116	@ 0x74
 800cd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5e:	89ab      	ldrh	r3, [r5, #12]
 800cd60:	0598      	lsls	r0, r3, #22
 800cd62:	d4f7      	bmi.n	800cd54 <_vfiprintf_r+0x44>
 800cd64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd66:	f7fe fccb 	bl	800b700 <__retarget_lock_release_recursive>
 800cd6a:	e7f3      	b.n	800cd54 <_vfiprintf_r+0x44>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd70:	2320      	movs	r3, #32
 800cd72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd76:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd7a:	2330      	movs	r3, #48	@ 0x30
 800cd7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf2c <_vfiprintf_r+0x21c>
 800cd80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd84:	f04f 0901 	mov.w	r9, #1
 800cd88:	4623      	mov	r3, r4
 800cd8a:	469a      	mov	sl, r3
 800cd8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd90:	b10a      	cbz	r2, 800cd96 <_vfiprintf_r+0x86>
 800cd92:	2a25      	cmp	r2, #37	@ 0x25
 800cd94:	d1f9      	bne.n	800cd8a <_vfiprintf_r+0x7a>
 800cd96:	ebba 0b04 	subs.w	fp, sl, r4
 800cd9a:	d00b      	beq.n	800cdb4 <_vfiprintf_r+0xa4>
 800cd9c:	465b      	mov	r3, fp
 800cd9e:	4622      	mov	r2, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7ff ffa1 	bl	800ccea <__sfputs_r>
 800cda8:	3001      	adds	r0, #1
 800cdaa:	f000 80a7 	beq.w	800cefc <_vfiprintf_r+0x1ec>
 800cdae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdb0:	445a      	add	r2, fp
 800cdb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdb4:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 809f 	beq.w	800cefc <_vfiprintf_r+0x1ec>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdc8:	f10a 0a01 	add.w	sl, sl, #1
 800cdcc:	9304      	str	r3, [sp, #16]
 800cdce:	9307      	str	r3, [sp, #28]
 800cdd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdd6:	4654      	mov	r4, sl
 800cdd8:	2205      	movs	r2, #5
 800cdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdde:	4853      	ldr	r0, [pc, #332]	@ (800cf2c <_vfiprintf_r+0x21c>)
 800cde0:	f7f3 fa16 	bl	8000210 <memchr>
 800cde4:	9a04      	ldr	r2, [sp, #16]
 800cde6:	b9d8      	cbnz	r0, 800ce20 <_vfiprintf_r+0x110>
 800cde8:	06d1      	lsls	r1, r2, #27
 800cdea:	bf44      	itt	mi
 800cdec:	2320      	movmi	r3, #32
 800cdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdf2:	0713      	lsls	r3, r2, #28
 800cdf4:	bf44      	itt	mi
 800cdf6:	232b      	movmi	r3, #43	@ 0x2b
 800cdf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ce00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce02:	d015      	beq.n	800ce30 <_vfiprintf_r+0x120>
 800ce04:	9a07      	ldr	r2, [sp, #28]
 800ce06:	4654      	mov	r4, sl
 800ce08:	2000      	movs	r0, #0
 800ce0a:	f04f 0c0a 	mov.w	ip, #10
 800ce0e:	4621      	mov	r1, r4
 800ce10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce14:	3b30      	subs	r3, #48	@ 0x30
 800ce16:	2b09      	cmp	r3, #9
 800ce18:	d94b      	bls.n	800ceb2 <_vfiprintf_r+0x1a2>
 800ce1a:	b1b0      	cbz	r0, 800ce4a <_vfiprintf_r+0x13a>
 800ce1c:	9207      	str	r2, [sp, #28]
 800ce1e:	e014      	b.n	800ce4a <_vfiprintf_r+0x13a>
 800ce20:	eba0 0308 	sub.w	r3, r0, r8
 800ce24:	fa09 f303 	lsl.w	r3, r9, r3
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	46a2      	mov	sl, r4
 800ce2e:	e7d2      	b.n	800cdd6 <_vfiprintf_r+0xc6>
 800ce30:	9b03      	ldr	r3, [sp, #12]
 800ce32:	1d19      	adds	r1, r3, #4
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	9103      	str	r1, [sp, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	bfbb      	ittet	lt
 800ce3c:	425b      	neglt	r3, r3
 800ce3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ce42:	9307      	strge	r3, [sp, #28]
 800ce44:	9307      	strlt	r3, [sp, #28]
 800ce46:	bfb8      	it	lt
 800ce48:	9204      	strlt	r2, [sp, #16]
 800ce4a:	7823      	ldrb	r3, [r4, #0]
 800ce4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce4e:	d10a      	bne.n	800ce66 <_vfiprintf_r+0x156>
 800ce50:	7863      	ldrb	r3, [r4, #1]
 800ce52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce54:	d132      	bne.n	800cebc <_vfiprintf_r+0x1ac>
 800ce56:	9b03      	ldr	r3, [sp, #12]
 800ce58:	1d1a      	adds	r2, r3, #4
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	9203      	str	r2, [sp, #12]
 800ce5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce62:	3402      	adds	r4, #2
 800ce64:	9305      	str	r3, [sp, #20]
 800ce66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf3c <_vfiprintf_r+0x22c>
 800ce6a:	7821      	ldrb	r1, [r4, #0]
 800ce6c:	2203      	movs	r2, #3
 800ce6e:	4650      	mov	r0, sl
 800ce70:	f7f3 f9ce 	bl	8000210 <memchr>
 800ce74:	b138      	cbz	r0, 800ce86 <_vfiprintf_r+0x176>
 800ce76:	9b04      	ldr	r3, [sp, #16]
 800ce78:	eba0 000a 	sub.w	r0, r0, sl
 800ce7c:	2240      	movs	r2, #64	@ 0x40
 800ce7e:	4082      	lsls	r2, r0
 800ce80:	4313      	orrs	r3, r2
 800ce82:	3401      	adds	r4, #1
 800ce84:	9304      	str	r3, [sp, #16]
 800ce86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce8a:	4829      	ldr	r0, [pc, #164]	@ (800cf30 <_vfiprintf_r+0x220>)
 800ce8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce90:	2206      	movs	r2, #6
 800ce92:	f7f3 f9bd 	bl	8000210 <memchr>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d03f      	beq.n	800cf1a <_vfiprintf_r+0x20a>
 800ce9a:	4b26      	ldr	r3, [pc, #152]	@ (800cf34 <_vfiprintf_r+0x224>)
 800ce9c:	bb1b      	cbnz	r3, 800cee6 <_vfiprintf_r+0x1d6>
 800ce9e:	9b03      	ldr	r3, [sp, #12]
 800cea0:	3307      	adds	r3, #7
 800cea2:	f023 0307 	bic.w	r3, r3, #7
 800cea6:	3308      	adds	r3, #8
 800cea8:	9303      	str	r3, [sp, #12]
 800ceaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceac:	443b      	add	r3, r7
 800ceae:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceb0:	e76a      	b.n	800cd88 <_vfiprintf_r+0x78>
 800ceb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	2001      	movs	r0, #1
 800ceba:	e7a8      	b.n	800ce0e <_vfiprintf_r+0xfe>
 800cebc:	2300      	movs	r3, #0
 800cebe:	3401      	adds	r4, #1
 800cec0:	9305      	str	r3, [sp, #20]
 800cec2:	4619      	mov	r1, r3
 800cec4:	f04f 0c0a 	mov.w	ip, #10
 800cec8:	4620      	mov	r0, r4
 800ceca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cece:	3a30      	subs	r2, #48	@ 0x30
 800ced0:	2a09      	cmp	r2, #9
 800ced2:	d903      	bls.n	800cedc <_vfiprintf_r+0x1cc>
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d0c6      	beq.n	800ce66 <_vfiprintf_r+0x156>
 800ced8:	9105      	str	r1, [sp, #20]
 800ceda:	e7c4      	b.n	800ce66 <_vfiprintf_r+0x156>
 800cedc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cee0:	4604      	mov	r4, r0
 800cee2:	2301      	movs	r3, #1
 800cee4:	e7f0      	b.n	800cec8 <_vfiprintf_r+0x1b8>
 800cee6:	ab03      	add	r3, sp, #12
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	462a      	mov	r2, r5
 800ceec:	4b12      	ldr	r3, [pc, #72]	@ (800cf38 <_vfiprintf_r+0x228>)
 800ceee:	a904      	add	r1, sp, #16
 800cef0:	4630      	mov	r0, r6
 800cef2:	f7fd fda1 	bl	800aa38 <_printf_float>
 800cef6:	4607      	mov	r7, r0
 800cef8:	1c78      	adds	r0, r7, #1
 800cefa:	d1d6      	bne.n	800ceaa <_vfiprintf_r+0x19a>
 800cefc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cefe:	07d9      	lsls	r1, r3, #31
 800cf00:	d405      	bmi.n	800cf0e <_vfiprintf_r+0x1fe>
 800cf02:	89ab      	ldrh	r3, [r5, #12]
 800cf04:	059a      	lsls	r2, r3, #22
 800cf06:	d402      	bmi.n	800cf0e <_vfiprintf_r+0x1fe>
 800cf08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf0a:	f7fe fbf9 	bl	800b700 <__retarget_lock_release_recursive>
 800cf0e:	89ab      	ldrh	r3, [r5, #12]
 800cf10:	065b      	lsls	r3, r3, #25
 800cf12:	f53f af1f 	bmi.w	800cd54 <_vfiprintf_r+0x44>
 800cf16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf18:	e71e      	b.n	800cd58 <_vfiprintf_r+0x48>
 800cf1a:	ab03      	add	r3, sp, #12
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	462a      	mov	r2, r5
 800cf20:	4b05      	ldr	r3, [pc, #20]	@ (800cf38 <_vfiprintf_r+0x228>)
 800cf22:	a904      	add	r1, sp, #16
 800cf24:	4630      	mov	r0, r6
 800cf26:	f7fe f81f 	bl	800af68 <_printf_i>
 800cf2a:	e7e4      	b.n	800cef6 <_vfiprintf_r+0x1e6>
 800cf2c:	0800ebd0 	.word	0x0800ebd0
 800cf30:	0800ebda 	.word	0x0800ebda
 800cf34:	0800aa39 	.word	0x0800aa39
 800cf38:	0800cceb 	.word	0x0800cceb
 800cf3c:	0800ebd6 	.word	0x0800ebd6

0800cf40 <__sflush_r>:
 800cf40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf48:	0716      	lsls	r6, r2, #28
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	d454      	bmi.n	800cffa <__sflush_r+0xba>
 800cf50:	684b      	ldr	r3, [r1, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	dc02      	bgt.n	800cf5c <__sflush_r+0x1c>
 800cf56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	dd48      	ble.n	800cfee <__sflush_r+0xae>
 800cf5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf5e:	2e00      	cmp	r6, #0
 800cf60:	d045      	beq.n	800cfee <__sflush_r+0xae>
 800cf62:	2300      	movs	r3, #0
 800cf64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf68:	682f      	ldr	r7, [r5, #0]
 800cf6a:	6a21      	ldr	r1, [r4, #32]
 800cf6c:	602b      	str	r3, [r5, #0]
 800cf6e:	d030      	beq.n	800cfd2 <__sflush_r+0x92>
 800cf70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	0759      	lsls	r1, r3, #29
 800cf76:	d505      	bpl.n	800cf84 <__sflush_r+0x44>
 800cf78:	6863      	ldr	r3, [r4, #4]
 800cf7a:	1ad2      	subs	r2, r2, r3
 800cf7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf7e:	b10b      	cbz	r3, 800cf84 <__sflush_r+0x44>
 800cf80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf82:	1ad2      	subs	r2, r2, r3
 800cf84:	2300      	movs	r3, #0
 800cf86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf88:	6a21      	ldr	r1, [r4, #32]
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	47b0      	blx	r6
 800cf8e:	1c43      	adds	r3, r0, #1
 800cf90:	89a3      	ldrh	r3, [r4, #12]
 800cf92:	d106      	bne.n	800cfa2 <__sflush_r+0x62>
 800cf94:	6829      	ldr	r1, [r5, #0]
 800cf96:	291d      	cmp	r1, #29
 800cf98:	d82b      	bhi.n	800cff2 <__sflush_r+0xb2>
 800cf9a:	4a2a      	ldr	r2, [pc, #168]	@ (800d044 <__sflush_r+0x104>)
 800cf9c:	410a      	asrs	r2, r1
 800cf9e:	07d6      	lsls	r6, r2, #31
 800cfa0:	d427      	bmi.n	800cff2 <__sflush_r+0xb2>
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	6062      	str	r2, [r4, #4]
 800cfa6:	04d9      	lsls	r1, r3, #19
 800cfa8:	6922      	ldr	r2, [r4, #16]
 800cfaa:	6022      	str	r2, [r4, #0]
 800cfac:	d504      	bpl.n	800cfb8 <__sflush_r+0x78>
 800cfae:	1c42      	adds	r2, r0, #1
 800cfb0:	d101      	bne.n	800cfb6 <__sflush_r+0x76>
 800cfb2:	682b      	ldr	r3, [r5, #0]
 800cfb4:	b903      	cbnz	r3, 800cfb8 <__sflush_r+0x78>
 800cfb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800cfb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfba:	602f      	str	r7, [r5, #0]
 800cfbc:	b1b9      	cbz	r1, 800cfee <__sflush_r+0xae>
 800cfbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfc2:	4299      	cmp	r1, r3
 800cfc4:	d002      	beq.n	800cfcc <__sflush_r+0x8c>
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	f7ff f9f6 	bl	800c3b8 <_free_r>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfd0:	e00d      	b.n	800cfee <__sflush_r+0xae>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	47b0      	blx	r6
 800cfd8:	4602      	mov	r2, r0
 800cfda:	1c50      	adds	r0, r2, #1
 800cfdc:	d1c9      	bne.n	800cf72 <__sflush_r+0x32>
 800cfde:	682b      	ldr	r3, [r5, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d0c6      	beq.n	800cf72 <__sflush_r+0x32>
 800cfe4:	2b1d      	cmp	r3, #29
 800cfe6:	d001      	beq.n	800cfec <__sflush_r+0xac>
 800cfe8:	2b16      	cmp	r3, #22
 800cfea:	d11e      	bne.n	800d02a <__sflush_r+0xea>
 800cfec:	602f      	str	r7, [r5, #0]
 800cfee:	2000      	movs	r0, #0
 800cff0:	e022      	b.n	800d038 <__sflush_r+0xf8>
 800cff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cff6:	b21b      	sxth	r3, r3
 800cff8:	e01b      	b.n	800d032 <__sflush_r+0xf2>
 800cffa:	690f      	ldr	r7, [r1, #16]
 800cffc:	2f00      	cmp	r7, #0
 800cffe:	d0f6      	beq.n	800cfee <__sflush_r+0xae>
 800d000:	0793      	lsls	r3, r2, #30
 800d002:	680e      	ldr	r6, [r1, #0]
 800d004:	bf08      	it	eq
 800d006:	694b      	ldreq	r3, [r1, #20]
 800d008:	600f      	str	r7, [r1, #0]
 800d00a:	bf18      	it	ne
 800d00c:	2300      	movne	r3, #0
 800d00e:	eba6 0807 	sub.w	r8, r6, r7
 800d012:	608b      	str	r3, [r1, #8]
 800d014:	f1b8 0f00 	cmp.w	r8, #0
 800d018:	dde9      	ble.n	800cfee <__sflush_r+0xae>
 800d01a:	6a21      	ldr	r1, [r4, #32]
 800d01c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d01e:	4643      	mov	r3, r8
 800d020:	463a      	mov	r2, r7
 800d022:	4628      	mov	r0, r5
 800d024:	47b0      	blx	r6
 800d026:	2800      	cmp	r0, #0
 800d028:	dc08      	bgt.n	800d03c <__sflush_r+0xfc>
 800d02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d032:	81a3      	strh	r3, [r4, #12]
 800d034:	f04f 30ff 	mov.w	r0, #4294967295
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	4407      	add	r7, r0
 800d03e:	eba8 0800 	sub.w	r8, r8, r0
 800d042:	e7e7      	b.n	800d014 <__sflush_r+0xd4>
 800d044:	dfbffffe 	.word	0xdfbffffe

0800d048 <_fflush_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	690b      	ldr	r3, [r1, #16]
 800d04c:	4605      	mov	r5, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	b913      	cbnz	r3, 800d058 <_fflush_r+0x10>
 800d052:	2500      	movs	r5, #0
 800d054:	4628      	mov	r0, r5
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	b118      	cbz	r0, 800d062 <_fflush_r+0x1a>
 800d05a:	6a03      	ldr	r3, [r0, #32]
 800d05c:	b90b      	cbnz	r3, 800d062 <_fflush_r+0x1a>
 800d05e:	f7fe f92f 	bl	800b2c0 <__sinit>
 800d062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d0f3      	beq.n	800d052 <_fflush_r+0xa>
 800d06a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d06c:	07d0      	lsls	r0, r2, #31
 800d06e:	d404      	bmi.n	800d07a <_fflush_r+0x32>
 800d070:	0599      	lsls	r1, r3, #22
 800d072:	d402      	bmi.n	800d07a <_fflush_r+0x32>
 800d074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d076:	f7fe fb42 	bl	800b6fe <__retarget_lock_acquire_recursive>
 800d07a:	4628      	mov	r0, r5
 800d07c:	4621      	mov	r1, r4
 800d07e:	f7ff ff5f 	bl	800cf40 <__sflush_r>
 800d082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d084:	07da      	lsls	r2, r3, #31
 800d086:	4605      	mov	r5, r0
 800d088:	d4e4      	bmi.n	800d054 <_fflush_r+0xc>
 800d08a:	89a3      	ldrh	r3, [r4, #12]
 800d08c:	059b      	lsls	r3, r3, #22
 800d08e:	d4e1      	bmi.n	800d054 <_fflush_r+0xc>
 800d090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d092:	f7fe fb35 	bl	800b700 <__retarget_lock_release_recursive>
 800d096:	e7dd      	b.n	800d054 <_fflush_r+0xc>

0800d098 <__swhatbuf_r>:
 800d098:	b570      	push	{r4, r5, r6, lr}
 800d09a:	460c      	mov	r4, r1
 800d09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a0:	2900      	cmp	r1, #0
 800d0a2:	b096      	sub	sp, #88	@ 0x58
 800d0a4:	4615      	mov	r5, r2
 800d0a6:	461e      	mov	r6, r3
 800d0a8:	da0d      	bge.n	800d0c6 <__swhatbuf_r+0x2e>
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0b0:	f04f 0100 	mov.w	r1, #0
 800d0b4:	bf14      	ite	ne
 800d0b6:	2340      	movne	r3, #64	@ 0x40
 800d0b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0bc:	2000      	movs	r0, #0
 800d0be:	6031      	str	r1, [r6, #0]
 800d0c0:	602b      	str	r3, [r5, #0]
 800d0c2:	b016      	add	sp, #88	@ 0x58
 800d0c4:	bd70      	pop	{r4, r5, r6, pc}
 800d0c6:	466a      	mov	r2, sp
 800d0c8:	f000 f848 	bl	800d15c <_fstat_r>
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	dbec      	blt.n	800d0aa <__swhatbuf_r+0x12>
 800d0d0:	9901      	ldr	r1, [sp, #4]
 800d0d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0da:	4259      	negs	r1, r3
 800d0dc:	4159      	adcs	r1, r3
 800d0de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0e2:	e7eb      	b.n	800d0bc <__swhatbuf_r+0x24>

0800d0e4 <__smakebuf_r>:
 800d0e4:	898b      	ldrh	r3, [r1, #12]
 800d0e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0e8:	079d      	lsls	r5, r3, #30
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	460c      	mov	r4, r1
 800d0ee:	d507      	bpl.n	800d100 <__smakebuf_r+0x1c>
 800d0f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	6123      	str	r3, [r4, #16]
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	6163      	str	r3, [r4, #20]
 800d0fc:	b003      	add	sp, #12
 800d0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d100:	ab01      	add	r3, sp, #4
 800d102:	466a      	mov	r2, sp
 800d104:	f7ff ffc8 	bl	800d098 <__swhatbuf_r>
 800d108:	9f00      	ldr	r7, [sp, #0]
 800d10a:	4605      	mov	r5, r0
 800d10c:	4639      	mov	r1, r7
 800d10e:	4630      	mov	r0, r6
 800d110:	f7ff f9c6 	bl	800c4a0 <_malloc_r>
 800d114:	b948      	cbnz	r0, 800d12a <__smakebuf_r+0x46>
 800d116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d11a:	059a      	lsls	r2, r3, #22
 800d11c:	d4ee      	bmi.n	800d0fc <__smakebuf_r+0x18>
 800d11e:	f023 0303 	bic.w	r3, r3, #3
 800d122:	f043 0302 	orr.w	r3, r3, #2
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	e7e2      	b.n	800d0f0 <__smakebuf_r+0xc>
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	6020      	str	r0, [r4, #0]
 800d12e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d132:	81a3      	strh	r3, [r4, #12]
 800d134:	9b01      	ldr	r3, [sp, #4]
 800d136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d13a:	b15b      	cbz	r3, 800d154 <__smakebuf_r+0x70>
 800d13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d140:	4630      	mov	r0, r6
 800d142:	f000 f81d 	bl	800d180 <_isatty_r>
 800d146:	b128      	cbz	r0, 800d154 <__smakebuf_r+0x70>
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	f023 0303 	bic.w	r3, r3, #3
 800d14e:	f043 0301 	orr.w	r3, r3, #1
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	89a3      	ldrh	r3, [r4, #12]
 800d156:	431d      	orrs	r5, r3
 800d158:	81a5      	strh	r5, [r4, #12]
 800d15a:	e7cf      	b.n	800d0fc <__smakebuf_r+0x18>

0800d15c <_fstat_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d07      	ldr	r5, [pc, #28]	@ (800d17c <_fstat_r+0x20>)
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	4611      	mov	r1, r2
 800d168:	602b      	str	r3, [r5, #0]
 800d16a:	f7f5 f9cd 	bl	8002508 <_fstat>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	d102      	bne.n	800d178 <_fstat_r+0x1c>
 800d172:	682b      	ldr	r3, [r5, #0]
 800d174:	b103      	cbz	r3, 800d178 <_fstat_r+0x1c>
 800d176:	6023      	str	r3, [r4, #0]
 800d178:	bd38      	pop	{r3, r4, r5, pc}
 800d17a:	bf00      	nop
 800d17c:	200050b0 	.word	0x200050b0

0800d180 <_isatty_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4d06      	ldr	r5, [pc, #24]	@ (800d19c <_isatty_r+0x1c>)
 800d184:	2300      	movs	r3, #0
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	602b      	str	r3, [r5, #0]
 800d18c:	f7f5 f9cc 	bl	8002528 <_isatty>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_isatty_r+0x1a>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_isatty_r+0x1a>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	200050b0 	.word	0x200050b0

0800d1a0 <_sbrk_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4d06      	ldr	r5, [pc, #24]	@ (800d1bc <_sbrk_r+0x1c>)
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4608      	mov	r0, r1
 800d1aa:	602b      	str	r3, [r5, #0]
 800d1ac:	f7f5 f9d4 	bl	8002558 <_sbrk>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d102      	bne.n	800d1ba <_sbrk_r+0x1a>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b103      	cbz	r3, 800d1ba <_sbrk_r+0x1a>
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	200050b0 	.word	0x200050b0

0800d1c0 <__assert_func>:
 800d1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1c2:	4614      	mov	r4, r2
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	4b09      	ldr	r3, [pc, #36]	@ (800d1ec <__assert_func+0x2c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	68d8      	ldr	r0, [r3, #12]
 800d1ce:	b954      	cbnz	r4, 800d1e6 <__assert_func+0x26>
 800d1d0:	4b07      	ldr	r3, [pc, #28]	@ (800d1f0 <__assert_func+0x30>)
 800d1d2:	461c      	mov	r4, r3
 800d1d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1d8:	9100      	str	r1, [sp, #0]
 800d1da:	462b      	mov	r3, r5
 800d1dc:	4905      	ldr	r1, [pc, #20]	@ (800d1f4 <__assert_func+0x34>)
 800d1de:	f000 f841 	bl	800d264 <fiprintf>
 800d1e2:	f000 f851 	bl	800d288 <abort>
 800d1e6:	4b04      	ldr	r3, [pc, #16]	@ (800d1f8 <__assert_func+0x38>)
 800d1e8:	e7f4      	b.n	800d1d4 <__assert_func+0x14>
 800d1ea:	bf00      	nop
 800d1ec:	2000001c 	.word	0x2000001c
 800d1f0:	0800ec26 	.word	0x0800ec26
 800d1f4:	0800ebf8 	.word	0x0800ebf8
 800d1f8:	0800ebeb 	.word	0x0800ebeb

0800d1fc <_calloc_r>:
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	fba1 5402 	umull	r5, r4, r1, r2
 800d202:	b93c      	cbnz	r4, 800d214 <_calloc_r+0x18>
 800d204:	4629      	mov	r1, r5
 800d206:	f7ff f94b 	bl	800c4a0 <_malloc_r>
 800d20a:	4606      	mov	r6, r0
 800d20c:	b928      	cbnz	r0, 800d21a <_calloc_r+0x1e>
 800d20e:	2600      	movs	r6, #0
 800d210:	4630      	mov	r0, r6
 800d212:	bd70      	pop	{r4, r5, r6, pc}
 800d214:	220c      	movs	r2, #12
 800d216:	6002      	str	r2, [r0, #0]
 800d218:	e7f9      	b.n	800d20e <_calloc_r+0x12>
 800d21a:	462a      	mov	r2, r5
 800d21c:	4621      	mov	r1, r4
 800d21e:	f7fe f9cd 	bl	800b5bc <memset>
 800d222:	e7f5      	b.n	800d210 <_calloc_r+0x14>

0800d224 <__ascii_mbtowc>:
 800d224:	b082      	sub	sp, #8
 800d226:	b901      	cbnz	r1, 800d22a <__ascii_mbtowc+0x6>
 800d228:	a901      	add	r1, sp, #4
 800d22a:	b142      	cbz	r2, 800d23e <__ascii_mbtowc+0x1a>
 800d22c:	b14b      	cbz	r3, 800d242 <__ascii_mbtowc+0x1e>
 800d22e:	7813      	ldrb	r3, [r2, #0]
 800d230:	600b      	str	r3, [r1, #0]
 800d232:	7812      	ldrb	r2, [r2, #0]
 800d234:	1e10      	subs	r0, r2, #0
 800d236:	bf18      	it	ne
 800d238:	2001      	movne	r0, #1
 800d23a:	b002      	add	sp, #8
 800d23c:	4770      	bx	lr
 800d23e:	4610      	mov	r0, r2
 800d240:	e7fb      	b.n	800d23a <__ascii_mbtowc+0x16>
 800d242:	f06f 0001 	mvn.w	r0, #1
 800d246:	e7f8      	b.n	800d23a <__ascii_mbtowc+0x16>

0800d248 <__ascii_wctomb>:
 800d248:	4603      	mov	r3, r0
 800d24a:	4608      	mov	r0, r1
 800d24c:	b141      	cbz	r1, 800d260 <__ascii_wctomb+0x18>
 800d24e:	2aff      	cmp	r2, #255	@ 0xff
 800d250:	d904      	bls.n	800d25c <__ascii_wctomb+0x14>
 800d252:	228a      	movs	r2, #138	@ 0x8a
 800d254:	601a      	str	r2, [r3, #0]
 800d256:	f04f 30ff 	mov.w	r0, #4294967295
 800d25a:	4770      	bx	lr
 800d25c:	700a      	strb	r2, [r1, #0]
 800d25e:	2001      	movs	r0, #1
 800d260:	4770      	bx	lr
	...

0800d264 <fiprintf>:
 800d264:	b40e      	push	{r1, r2, r3}
 800d266:	b503      	push	{r0, r1, lr}
 800d268:	4601      	mov	r1, r0
 800d26a:	ab03      	add	r3, sp, #12
 800d26c:	4805      	ldr	r0, [pc, #20]	@ (800d284 <fiprintf+0x20>)
 800d26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d272:	6800      	ldr	r0, [r0, #0]
 800d274:	9301      	str	r3, [sp, #4]
 800d276:	f7ff fd4b 	bl	800cd10 <_vfiprintf_r>
 800d27a:	b002      	add	sp, #8
 800d27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d280:	b003      	add	sp, #12
 800d282:	4770      	bx	lr
 800d284:	2000001c 	.word	0x2000001c

0800d288 <abort>:
 800d288:	b508      	push	{r3, lr}
 800d28a:	2006      	movs	r0, #6
 800d28c:	f000 f82c 	bl	800d2e8 <raise>
 800d290:	2001      	movs	r0, #1
 800d292:	f7f5 f8e9 	bl	8002468 <_exit>

0800d296 <_raise_r>:
 800d296:	291f      	cmp	r1, #31
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4605      	mov	r5, r0
 800d29c:	460c      	mov	r4, r1
 800d29e:	d904      	bls.n	800d2aa <_raise_r+0x14>
 800d2a0:	2316      	movs	r3, #22
 800d2a2:	6003      	str	r3, [r0, #0]
 800d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a8:	bd38      	pop	{r3, r4, r5, pc}
 800d2aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d2ac:	b112      	cbz	r2, 800d2b4 <_raise_r+0x1e>
 800d2ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2b2:	b94b      	cbnz	r3, 800d2c8 <_raise_r+0x32>
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	f000 f831 	bl	800d31c <_getpid_r>
 800d2ba:	4622      	mov	r2, r4
 800d2bc:	4601      	mov	r1, r0
 800d2be:	4628      	mov	r0, r5
 800d2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2c4:	f000 b818 	b.w	800d2f8 <_kill_r>
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d00a      	beq.n	800d2e2 <_raise_r+0x4c>
 800d2cc:	1c59      	adds	r1, r3, #1
 800d2ce:	d103      	bne.n	800d2d8 <_raise_r+0x42>
 800d2d0:	2316      	movs	r3, #22
 800d2d2:	6003      	str	r3, [r0, #0]
 800d2d4:	2001      	movs	r0, #1
 800d2d6:	e7e7      	b.n	800d2a8 <_raise_r+0x12>
 800d2d8:	2100      	movs	r1, #0
 800d2da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d2de:	4620      	mov	r0, r4
 800d2e0:	4798      	blx	r3
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	e7e0      	b.n	800d2a8 <_raise_r+0x12>
	...

0800d2e8 <raise>:
 800d2e8:	4b02      	ldr	r3, [pc, #8]	@ (800d2f4 <raise+0xc>)
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	6818      	ldr	r0, [r3, #0]
 800d2ee:	f7ff bfd2 	b.w	800d296 <_raise_r>
 800d2f2:	bf00      	nop
 800d2f4:	2000001c 	.word	0x2000001c

0800d2f8 <_kill_r>:
 800d2f8:	b538      	push	{r3, r4, r5, lr}
 800d2fa:	4d07      	ldr	r5, [pc, #28]	@ (800d318 <_kill_r+0x20>)
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	4604      	mov	r4, r0
 800d300:	4608      	mov	r0, r1
 800d302:	4611      	mov	r1, r2
 800d304:	602b      	str	r3, [r5, #0]
 800d306:	f7f5 f89f 	bl	8002448 <_kill>
 800d30a:	1c43      	adds	r3, r0, #1
 800d30c:	d102      	bne.n	800d314 <_kill_r+0x1c>
 800d30e:	682b      	ldr	r3, [r5, #0]
 800d310:	b103      	cbz	r3, 800d314 <_kill_r+0x1c>
 800d312:	6023      	str	r3, [r4, #0]
 800d314:	bd38      	pop	{r3, r4, r5, pc}
 800d316:	bf00      	nop
 800d318:	200050b0 	.word	0x200050b0

0800d31c <_getpid_r>:
 800d31c:	f7f5 b88c 	b.w	8002438 <_getpid>

0800d320 <pow>:
 800d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d322:	ed2d 8b02 	vpush	{d8}
 800d326:	eeb0 8a40 	vmov.f32	s16, s0
 800d32a:	eef0 8a60 	vmov.f32	s17, s1
 800d32e:	ec55 4b11 	vmov	r4, r5, d1
 800d332:	f000 f895 	bl	800d460 <__ieee754_pow>
 800d336:	4622      	mov	r2, r4
 800d338:	462b      	mov	r3, r5
 800d33a:	4620      	mov	r0, r4
 800d33c:	4629      	mov	r1, r5
 800d33e:	ec57 6b10 	vmov	r6, r7, d0
 800d342:	f7f3 fc13 	bl	8000b6c <__aeabi_dcmpun>
 800d346:	2800      	cmp	r0, #0
 800d348:	d13b      	bne.n	800d3c2 <pow+0xa2>
 800d34a:	ec51 0b18 	vmov	r0, r1, d8
 800d34e:	2200      	movs	r2, #0
 800d350:	2300      	movs	r3, #0
 800d352:	f7f3 fbd9 	bl	8000b08 <__aeabi_dcmpeq>
 800d356:	b1b8      	cbz	r0, 800d388 <pow+0x68>
 800d358:	2200      	movs	r2, #0
 800d35a:	2300      	movs	r3, #0
 800d35c:	4620      	mov	r0, r4
 800d35e:	4629      	mov	r1, r5
 800d360:	f7f3 fbd2 	bl	8000b08 <__aeabi_dcmpeq>
 800d364:	2800      	cmp	r0, #0
 800d366:	d146      	bne.n	800d3f6 <pow+0xd6>
 800d368:	ec45 4b10 	vmov	d0, r4, r5
 800d36c:	f000 f868 	bl	800d440 <finite>
 800d370:	b338      	cbz	r0, 800d3c2 <pow+0xa2>
 800d372:	2200      	movs	r2, #0
 800d374:	2300      	movs	r3, #0
 800d376:	4620      	mov	r0, r4
 800d378:	4629      	mov	r1, r5
 800d37a:	f7f3 fbcf 	bl	8000b1c <__aeabi_dcmplt>
 800d37e:	b300      	cbz	r0, 800d3c2 <pow+0xa2>
 800d380:	f7fe f992 	bl	800b6a8 <__errno>
 800d384:	2322      	movs	r3, #34	@ 0x22
 800d386:	e01b      	b.n	800d3c0 <pow+0xa0>
 800d388:	ec47 6b10 	vmov	d0, r6, r7
 800d38c:	f000 f858 	bl	800d440 <finite>
 800d390:	b9e0      	cbnz	r0, 800d3cc <pow+0xac>
 800d392:	eeb0 0a48 	vmov.f32	s0, s16
 800d396:	eef0 0a68 	vmov.f32	s1, s17
 800d39a:	f000 f851 	bl	800d440 <finite>
 800d39e:	b1a8      	cbz	r0, 800d3cc <pow+0xac>
 800d3a0:	ec45 4b10 	vmov	d0, r4, r5
 800d3a4:	f000 f84c 	bl	800d440 <finite>
 800d3a8:	b180      	cbz	r0, 800d3cc <pow+0xac>
 800d3aa:	4632      	mov	r2, r6
 800d3ac:	463b      	mov	r3, r7
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	f7f3 fbdb 	bl	8000b6c <__aeabi_dcmpun>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d0e2      	beq.n	800d380 <pow+0x60>
 800d3ba:	f7fe f975 	bl	800b6a8 <__errno>
 800d3be:	2321      	movs	r3, #33	@ 0x21
 800d3c0:	6003      	str	r3, [r0, #0]
 800d3c2:	ecbd 8b02 	vpop	{d8}
 800d3c6:	ec47 6b10 	vmov	d0, r6, r7
 800d3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	4639      	mov	r1, r7
 800d3d4:	f7f3 fb98 	bl	8000b08 <__aeabi_dcmpeq>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d0f2      	beq.n	800d3c2 <pow+0xa2>
 800d3dc:	eeb0 0a48 	vmov.f32	s0, s16
 800d3e0:	eef0 0a68 	vmov.f32	s1, s17
 800d3e4:	f000 f82c 	bl	800d440 <finite>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d0ea      	beq.n	800d3c2 <pow+0xa2>
 800d3ec:	ec45 4b10 	vmov	d0, r4, r5
 800d3f0:	f000 f826 	bl	800d440 <finite>
 800d3f4:	e7c3      	b.n	800d37e <pow+0x5e>
 800d3f6:	4f01      	ldr	r7, [pc, #4]	@ (800d3fc <pow+0xdc>)
 800d3f8:	2600      	movs	r6, #0
 800d3fa:	e7e2      	b.n	800d3c2 <pow+0xa2>
 800d3fc:	3ff00000 	.word	0x3ff00000

0800d400 <atan2f>:
 800d400:	f000 bd7a 	b.w	800def8 <__ieee754_atan2f>

0800d404 <sqrtf>:
 800d404:	b508      	push	{r3, lr}
 800d406:	ed2d 8b02 	vpush	{d8}
 800d40a:	eeb0 8a40 	vmov.f32	s16, s0
 800d40e:	f000 f822 	bl	800d456 <__ieee754_sqrtf>
 800d412:	eeb4 8a48 	vcmp.f32	s16, s16
 800d416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d41a:	d60c      	bvs.n	800d436 <sqrtf+0x32>
 800d41c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d43c <sqrtf+0x38>
 800d420:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d428:	d505      	bpl.n	800d436 <sqrtf+0x32>
 800d42a:	f7fe f93d 	bl	800b6a8 <__errno>
 800d42e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d432:	2321      	movs	r3, #33	@ 0x21
 800d434:	6003      	str	r3, [r0, #0]
 800d436:	ecbd 8b02 	vpop	{d8}
 800d43a:	bd08      	pop	{r3, pc}
 800d43c:	00000000 	.word	0x00000000

0800d440 <finite>:
 800d440:	b082      	sub	sp, #8
 800d442:	ed8d 0b00 	vstr	d0, [sp]
 800d446:	9801      	ldr	r0, [sp, #4]
 800d448:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d44c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d450:	0fc0      	lsrs	r0, r0, #31
 800d452:	b002      	add	sp, #8
 800d454:	4770      	bx	lr

0800d456 <__ieee754_sqrtf>:
 800d456:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d45a:	4770      	bx	lr
 800d45c:	0000      	movs	r0, r0
	...

0800d460 <__ieee754_pow>:
 800d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	b091      	sub	sp, #68	@ 0x44
 800d466:	ed8d 1b00 	vstr	d1, [sp]
 800d46a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800d46e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800d472:	ea5a 0001 	orrs.w	r0, sl, r1
 800d476:	ec57 6b10 	vmov	r6, r7, d0
 800d47a:	d113      	bne.n	800d4a4 <__ieee754_pow+0x44>
 800d47c:	19b3      	adds	r3, r6, r6
 800d47e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800d482:	4152      	adcs	r2, r2
 800d484:	4298      	cmp	r0, r3
 800d486:	4b98      	ldr	r3, [pc, #608]	@ (800d6e8 <__ieee754_pow+0x288>)
 800d488:	4193      	sbcs	r3, r2
 800d48a:	f080 84ea 	bcs.w	800de62 <__ieee754_pow+0xa02>
 800d48e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d492:	4630      	mov	r0, r6
 800d494:	4639      	mov	r1, r7
 800d496:	f7f2 ff19 	bl	80002cc <__adddf3>
 800d49a:	ec41 0b10 	vmov	d0, r0, r1
 800d49e:	b011      	add	sp, #68	@ 0x44
 800d4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a4:	4a91      	ldr	r2, [pc, #580]	@ (800d6ec <__ieee754_pow+0x28c>)
 800d4a6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d4aa:	4590      	cmp	r8, r2
 800d4ac:	463d      	mov	r5, r7
 800d4ae:	4633      	mov	r3, r6
 800d4b0:	d806      	bhi.n	800d4c0 <__ieee754_pow+0x60>
 800d4b2:	d101      	bne.n	800d4b8 <__ieee754_pow+0x58>
 800d4b4:	2e00      	cmp	r6, #0
 800d4b6:	d1ea      	bne.n	800d48e <__ieee754_pow+0x2e>
 800d4b8:	4592      	cmp	sl, r2
 800d4ba:	d801      	bhi.n	800d4c0 <__ieee754_pow+0x60>
 800d4bc:	d10e      	bne.n	800d4dc <__ieee754_pow+0x7c>
 800d4be:	b169      	cbz	r1, 800d4dc <__ieee754_pow+0x7c>
 800d4c0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800d4c4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800d4c8:	431d      	orrs	r5, r3
 800d4ca:	d1e0      	bne.n	800d48e <__ieee754_pow+0x2e>
 800d4cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d4d0:	18db      	adds	r3, r3, r3
 800d4d2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800d4d6:	4152      	adcs	r2, r2
 800d4d8:	429d      	cmp	r5, r3
 800d4da:	e7d4      	b.n	800d486 <__ieee754_pow+0x26>
 800d4dc:	2d00      	cmp	r5, #0
 800d4de:	46c3      	mov	fp, r8
 800d4e0:	da3a      	bge.n	800d558 <__ieee754_pow+0xf8>
 800d4e2:	4a83      	ldr	r2, [pc, #524]	@ (800d6f0 <__ieee754_pow+0x290>)
 800d4e4:	4592      	cmp	sl, r2
 800d4e6:	d84d      	bhi.n	800d584 <__ieee754_pow+0x124>
 800d4e8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800d4ec:	4592      	cmp	sl, r2
 800d4ee:	f240 84c7 	bls.w	800de80 <__ieee754_pow+0xa20>
 800d4f2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800d4f6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d4fa:	2a14      	cmp	r2, #20
 800d4fc:	dd0f      	ble.n	800d51e <__ieee754_pow+0xbe>
 800d4fe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800d502:	fa21 f402 	lsr.w	r4, r1, r2
 800d506:	fa04 f202 	lsl.w	r2, r4, r2
 800d50a:	428a      	cmp	r2, r1
 800d50c:	f040 84b8 	bne.w	800de80 <__ieee754_pow+0xa20>
 800d510:	f004 0401 	and.w	r4, r4, #1
 800d514:	f1c4 0402 	rsb	r4, r4, #2
 800d518:	2900      	cmp	r1, #0
 800d51a:	d158      	bne.n	800d5ce <__ieee754_pow+0x16e>
 800d51c:	e00e      	b.n	800d53c <__ieee754_pow+0xdc>
 800d51e:	2900      	cmp	r1, #0
 800d520:	d154      	bne.n	800d5cc <__ieee754_pow+0x16c>
 800d522:	f1c2 0214 	rsb	r2, r2, #20
 800d526:	fa4a f402 	asr.w	r4, sl, r2
 800d52a:	fa04 f202 	lsl.w	r2, r4, r2
 800d52e:	4552      	cmp	r2, sl
 800d530:	f040 84a3 	bne.w	800de7a <__ieee754_pow+0xa1a>
 800d534:	f004 0401 	and.w	r4, r4, #1
 800d538:	f1c4 0402 	rsb	r4, r4, #2
 800d53c:	4a6d      	ldr	r2, [pc, #436]	@ (800d6f4 <__ieee754_pow+0x294>)
 800d53e:	4592      	cmp	sl, r2
 800d540:	d12e      	bne.n	800d5a0 <__ieee754_pow+0x140>
 800d542:	f1b9 0f00 	cmp.w	r9, #0
 800d546:	f280 8494 	bge.w	800de72 <__ieee754_pow+0xa12>
 800d54a:	496a      	ldr	r1, [pc, #424]	@ (800d6f4 <__ieee754_pow+0x294>)
 800d54c:	4632      	mov	r2, r6
 800d54e:	463b      	mov	r3, r7
 800d550:	2000      	movs	r0, #0
 800d552:	f7f3 f99b 	bl	800088c <__aeabi_ddiv>
 800d556:	e7a0      	b.n	800d49a <__ieee754_pow+0x3a>
 800d558:	2400      	movs	r4, #0
 800d55a:	bbc1      	cbnz	r1, 800d5ce <__ieee754_pow+0x16e>
 800d55c:	4a63      	ldr	r2, [pc, #396]	@ (800d6ec <__ieee754_pow+0x28c>)
 800d55e:	4592      	cmp	sl, r2
 800d560:	d1ec      	bne.n	800d53c <__ieee754_pow+0xdc>
 800d562:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800d566:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800d56a:	431a      	orrs	r2, r3
 800d56c:	f000 8479 	beq.w	800de62 <__ieee754_pow+0xa02>
 800d570:	4b61      	ldr	r3, [pc, #388]	@ (800d6f8 <__ieee754_pow+0x298>)
 800d572:	4598      	cmp	r8, r3
 800d574:	d908      	bls.n	800d588 <__ieee754_pow+0x128>
 800d576:	f1b9 0f00 	cmp.w	r9, #0
 800d57a:	f2c0 8476 	blt.w	800de6a <__ieee754_pow+0xa0a>
 800d57e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d582:	e78a      	b.n	800d49a <__ieee754_pow+0x3a>
 800d584:	2402      	movs	r4, #2
 800d586:	e7e8      	b.n	800d55a <__ieee754_pow+0xfa>
 800d588:	f1b9 0f00 	cmp.w	r9, #0
 800d58c:	f04f 0000 	mov.w	r0, #0
 800d590:	f04f 0100 	mov.w	r1, #0
 800d594:	da81      	bge.n	800d49a <__ieee754_pow+0x3a>
 800d596:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d59a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d59e:	e77c      	b.n	800d49a <__ieee754_pow+0x3a>
 800d5a0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800d5a4:	d106      	bne.n	800d5b4 <__ieee754_pow+0x154>
 800d5a6:	4632      	mov	r2, r6
 800d5a8:	463b      	mov	r3, r7
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	4639      	mov	r1, r7
 800d5ae:	f7f3 f843 	bl	8000638 <__aeabi_dmul>
 800d5b2:	e772      	b.n	800d49a <__ieee754_pow+0x3a>
 800d5b4:	4a51      	ldr	r2, [pc, #324]	@ (800d6fc <__ieee754_pow+0x29c>)
 800d5b6:	4591      	cmp	r9, r2
 800d5b8:	d109      	bne.n	800d5ce <__ieee754_pow+0x16e>
 800d5ba:	2d00      	cmp	r5, #0
 800d5bc:	db07      	blt.n	800d5ce <__ieee754_pow+0x16e>
 800d5be:	ec47 6b10 	vmov	d0, r6, r7
 800d5c2:	b011      	add	sp, #68	@ 0x44
 800d5c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c8:	f000 bece 	b.w	800e368 <__ieee754_sqrt>
 800d5cc:	2400      	movs	r4, #0
 800d5ce:	ec47 6b10 	vmov	d0, r6, r7
 800d5d2:	9302      	str	r3, [sp, #8]
 800d5d4:	f000 fc88 	bl	800dee8 <fabs>
 800d5d8:	9b02      	ldr	r3, [sp, #8]
 800d5da:	ec51 0b10 	vmov	r0, r1, d0
 800d5de:	bb53      	cbnz	r3, 800d636 <__ieee754_pow+0x1d6>
 800d5e0:	4b44      	ldr	r3, [pc, #272]	@ (800d6f4 <__ieee754_pow+0x294>)
 800d5e2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d002      	beq.n	800d5f0 <__ieee754_pow+0x190>
 800d5ea:	f1b8 0f00 	cmp.w	r8, #0
 800d5ee:	d122      	bne.n	800d636 <__ieee754_pow+0x1d6>
 800d5f0:	f1b9 0f00 	cmp.w	r9, #0
 800d5f4:	da05      	bge.n	800d602 <__ieee754_pow+0x1a2>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	493d      	ldr	r1, [pc, #244]	@ (800d6f4 <__ieee754_pow+0x294>)
 800d5fe:	f7f3 f945 	bl	800088c <__aeabi_ddiv>
 800d602:	2d00      	cmp	r5, #0
 800d604:	f6bf af49 	bge.w	800d49a <__ieee754_pow+0x3a>
 800d608:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800d60c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800d610:	ea58 0804 	orrs.w	r8, r8, r4
 800d614:	d108      	bne.n	800d628 <__ieee754_pow+0x1c8>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	4610      	mov	r0, r2
 800d61c:	4619      	mov	r1, r3
 800d61e:	f7f2 fe53 	bl	80002c8 <__aeabi_dsub>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	e794      	b.n	800d552 <__ieee754_pow+0xf2>
 800d628:	2c01      	cmp	r4, #1
 800d62a:	f47f af36 	bne.w	800d49a <__ieee754_pow+0x3a>
 800d62e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d632:	4619      	mov	r1, r3
 800d634:	e731      	b.n	800d49a <__ieee754_pow+0x3a>
 800d636:	0feb      	lsrs	r3, r5, #31
 800d638:	3b01      	subs	r3, #1
 800d63a:	ea53 0204 	orrs.w	r2, r3, r4
 800d63e:	d102      	bne.n	800d646 <__ieee754_pow+0x1e6>
 800d640:	4632      	mov	r2, r6
 800d642:	463b      	mov	r3, r7
 800d644:	e7e9      	b.n	800d61a <__ieee754_pow+0x1ba>
 800d646:	3c01      	subs	r4, #1
 800d648:	431c      	orrs	r4, r3
 800d64a:	d016      	beq.n	800d67a <__ieee754_pow+0x21a>
 800d64c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800d6d8 <__ieee754_pow+0x278>
 800d650:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800d654:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d658:	f240 8112 	bls.w	800d880 <__ieee754_pow+0x420>
 800d65c:	4b28      	ldr	r3, [pc, #160]	@ (800d700 <__ieee754_pow+0x2a0>)
 800d65e:	459a      	cmp	sl, r3
 800d660:	4b25      	ldr	r3, [pc, #148]	@ (800d6f8 <__ieee754_pow+0x298>)
 800d662:	d916      	bls.n	800d692 <__ieee754_pow+0x232>
 800d664:	4598      	cmp	r8, r3
 800d666:	d80b      	bhi.n	800d680 <__ieee754_pow+0x220>
 800d668:	f1b9 0f00 	cmp.w	r9, #0
 800d66c:	da0b      	bge.n	800d686 <__ieee754_pow+0x226>
 800d66e:	2000      	movs	r0, #0
 800d670:	b011      	add	sp, #68	@ 0x44
 800d672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d676:	f000 be6f 	b.w	800e358 <__math_oflow>
 800d67a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800d6e0 <__ieee754_pow+0x280>
 800d67e:	e7e7      	b.n	800d650 <__ieee754_pow+0x1f0>
 800d680:	f1b9 0f00 	cmp.w	r9, #0
 800d684:	dcf3      	bgt.n	800d66e <__ieee754_pow+0x20e>
 800d686:	2000      	movs	r0, #0
 800d688:	b011      	add	sp, #68	@ 0x44
 800d68a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68e:	f000 be5b 	b.w	800e348 <__math_uflow>
 800d692:	4598      	cmp	r8, r3
 800d694:	d20c      	bcs.n	800d6b0 <__ieee754_pow+0x250>
 800d696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d69a:	2200      	movs	r2, #0
 800d69c:	2300      	movs	r3, #0
 800d69e:	f7f3 fa3d 	bl	8000b1c <__aeabi_dcmplt>
 800d6a2:	3800      	subs	r0, #0
 800d6a4:	bf18      	it	ne
 800d6a6:	2001      	movne	r0, #1
 800d6a8:	f1b9 0f00 	cmp.w	r9, #0
 800d6ac:	daec      	bge.n	800d688 <__ieee754_pow+0x228>
 800d6ae:	e7df      	b.n	800d670 <__ieee754_pow+0x210>
 800d6b0:	4b10      	ldr	r3, [pc, #64]	@ (800d6f4 <__ieee754_pow+0x294>)
 800d6b2:	4598      	cmp	r8, r3
 800d6b4:	f04f 0200 	mov.w	r2, #0
 800d6b8:	d924      	bls.n	800d704 <__ieee754_pow+0x2a4>
 800d6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6be:	2300      	movs	r3, #0
 800d6c0:	f7f3 fa2c 	bl	8000b1c <__aeabi_dcmplt>
 800d6c4:	3800      	subs	r0, #0
 800d6c6:	bf18      	it	ne
 800d6c8:	2001      	movne	r0, #1
 800d6ca:	f1b9 0f00 	cmp.w	r9, #0
 800d6ce:	dccf      	bgt.n	800d670 <__ieee754_pow+0x210>
 800d6d0:	e7da      	b.n	800d688 <__ieee754_pow+0x228>
 800d6d2:	bf00      	nop
 800d6d4:	f3af 8000 	nop.w
 800d6d8:	00000000 	.word	0x00000000
 800d6dc:	3ff00000 	.word	0x3ff00000
 800d6e0:	00000000 	.word	0x00000000
 800d6e4:	bff00000 	.word	0xbff00000
 800d6e8:	fff00000 	.word	0xfff00000
 800d6ec:	7ff00000 	.word	0x7ff00000
 800d6f0:	433fffff 	.word	0x433fffff
 800d6f4:	3ff00000 	.word	0x3ff00000
 800d6f8:	3fefffff 	.word	0x3fefffff
 800d6fc:	3fe00000 	.word	0x3fe00000
 800d700:	43f00000 	.word	0x43f00000
 800d704:	4b5a      	ldr	r3, [pc, #360]	@ (800d870 <__ieee754_pow+0x410>)
 800d706:	f7f2 fddf 	bl	80002c8 <__aeabi_dsub>
 800d70a:	a351      	add	r3, pc, #324	@ (adr r3, 800d850 <__ieee754_pow+0x3f0>)
 800d70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d710:	4604      	mov	r4, r0
 800d712:	460d      	mov	r5, r1
 800d714:	f7f2 ff90 	bl	8000638 <__aeabi_dmul>
 800d718:	a34f      	add	r3, pc, #316	@ (adr r3, 800d858 <__ieee754_pow+0x3f8>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	4606      	mov	r6, r0
 800d720:	460f      	mov	r7, r1
 800d722:	4620      	mov	r0, r4
 800d724:	4629      	mov	r1, r5
 800d726:	f7f2 ff87 	bl	8000638 <__aeabi_dmul>
 800d72a:	4b52      	ldr	r3, [pc, #328]	@ (800d874 <__ieee754_pow+0x414>)
 800d72c:	4682      	mov	sl, r0
 800d72e:	468b      	mov	fp, r1
 800d730:	2200      	movs	r2, #0
 800d732:	4620      	mov	r0, r4
 800d734:	4629      	mov	r1, r5
 800d736:	f7f2 ff7f 	bl	8000638 <__aeabi_dmul>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	a148      	add	r1, pc, #288	@ (adr r1, 800d860 <__ieee754_pow+0x400>)
 800d740:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d744:	f7f2 fdc0 	bl	80002c8 <__aeabi_dsub>
 800d748:	4622      	mov	r2, r4
 800d74a:	462b      	mov	r3, r5
 800d74c:	f7f2 ff74 	bl	8000638 <__aeabi_dmul>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	2000      	movs	r0, #0
 800d756:	4948      	ldr	r1, [pc, #288]	@ (800d878 <__ieee754_pow+0x418>)
 800d758:	f7f2 fdb6 	bl	80002c8 <__aeabi_dsub>
 800d75c:	4622      	mov	r2, r4
 800d75e:	4680      	mov	r8, r0
 800d760:	4689      	mov	r9, r1
 800d762:	462b      	mov	r3, r5
 800d764:	4620      	mov	r0, r4
 800d766:	4629      	mov	r1, r5
 800d768:	f7f2 ff66 	bl	8000638 <__aeabi_dmul>
 800d76c:	4602      	mov	r2, r0
 800d76e:	460b      	mov	r3, r1
 800d770:	4640      	mov	r0, r8
 800d772:	4649      	mov	r1, r9
 800d774:	f7f2 ff60 	bl	8000638 <__aeabi_dmul>
 800d778:	a33b      	add	r3, pc, #236	@ (adr r3, 800d868 <__ieee754_pow+0x408>)
 800d77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77e:	f7f2 ff5b 	bl	8000638 <__aeabi_dmul>
 800d782:	4602      	mov	r2, r0
 800d784:	460b      	mov	r3, r1
 800d786:	4650      	mov	r0, sl
 800d788:	4659      	mov	r1, fp
 800d78a:	f7f2 fd9d 	bl	80002c8 <__aeabi_dsub>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	4680      	mov	r8, r0
 800d794:	4689      	mov	r9, r1
 800d796:	4630      	mov	r0, r6
 800d798:	4639      	mov	r1, r7
 800d79a:	f7f2 fd97 	bl	80002cc <__adddf3>
 800d79e:	2400      	movs	r4, #0
 800d7a0:	4632      	mov	r2, r6
 800d7a2:	463b      	mov	r3, r7
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	460d      	mov	r5, r1
 800d7a8:	f7f2 fd8e 	bl	80002c8 <__aeabi_dsub>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4640      	mov	r0, r8
 800d7b2:	4649      	mov	r1, r9
 800d7b4:	f7f2 fd88 	bl	80002c8 <__aeabi_dsub>
 800d7b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	9304      	str	r3, [sp, #16]
 800d7c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d7c8:	4606      	mov	r6, r0
 800d7ca:	460f      	mov	r7, r1
 800d7cc:	4652      	mov	r2, sl
 800d7ce:	465b      	mov	r3, fp
 800d7d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7d4:	f7f2 fd78 	bl	80002c8 <__aeabi_dsub>
 800d7d8:	4622      	mov	r2, r4
 800d7da:	462b      	mov	r3, r5
 800d7dc:	f7f2 ff2c 	bl	8000638 <__aeabi_dmul>
 800d7e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	4689      	mov	r9, r1
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	4639      	mov	r1, r7
 800d7ec:	f7f2 ff24 	bl	8000638 <__aeabi_dmul>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	f7f2 fd68 	bl	80002cc <__adddf3>
 800d7fc:	4652      	mov	r2, sl
 800d7fe:	465b      	mov	r3, fp
 800d800:	4606      	mov	r6, r0
 800d802:	460f      	mov	r7, r1
 800d804:	4620      	mov	r0, r4
 800d806:	4629      	mov	r1, r5
 800d808:	f7f2 ff16 	bl	8000638 <__aeabi_dmul>
 800d80c:	460b      	mov	r3, r1
 800d80e:	4602      	mov	r2, r0
 800d810:	4680      	mov	r8, r0
 800d812:	4689      	mov	r9, r1
 800d814:	4630      	mov	r0, r6
 800d816:	4639      	mov	r1, r7
 800d818:	f7f2 fd58 	bl	80002cc <__adddf3>
 800d81c:	4b17      	ldr	r3, [pc, #92]	@ (800d87c <__ieee754_pow+0x41c>)
 800d81e:	4299      	cmp	r1, r3
 800d820:	4604      	mov	r4, r0
 800d822:	460d      	mov	r5, r1
 800d824:	468a      	mov	sl, r1
 800d826:	468b      	mov	fp, r1
 800d828:	f340 82ef 	ble.w	800de0a <__ieee754_pow+0x9aa>
 800d82c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d830:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d834:	4303      	orrs	r3, r0
 800d836:	f000 81e8 	beq.w	800dc0a <__ieee754_pow+0x7aa>
 800d83a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d83e:	2200      	movs	r2, #0
 800d840:	2300      	movs	r3, #0
 800d842:	f7f3 f96b 	bl	8000b1c <__aeabi_dcmplt>
 800d846:	3800      	subs	r0, #0
 800d848:	bf18      	it	ne
 800d84a:	2001      	movne	r0, #1
 800d84c:	e710      	b.n	800d670 <__ieee754_pow+0x210>
 800d84e:	bf00      	nop
 800d850:	60000000 	.word	0x60000000
 800d854:	3ff71547 	.word	0x3ff71547
 800d858:	f85ddf44 	.word	0xf85ddf44
 800d85c:	3e54ae0b 	.word	0x3e54ae0b
 800d860:	55555555 	.word	0x55555555
 800d864:	3fd55555 	.word	0x3fd55555
 800d868:	652b82fe 	.word	0x652b82fe
 800d86c:	3ff71547 	.word	0x3ff71547
 800d870:	3ff00000 	.word	0x3ff00000
 800d874:	3fd00000 	.word	0x3fd00000
 800d878:	3fe00000 	.word	0x3fe00000
 800d87c:	408fffff 	.word	0x408fffff
 800d880:	4bd5      	ldr	r3, [pc, #852]	@ (800dbd8 <__ieee754_pow+0x778>)
 800d882:	402b      	ands	r3, r5
 800d884:	2200      	movs	r2, #0
 800d886:	b92b      	cbnz	r3, 800d894 <__ieee754_pow+0x434>
 800d888:	4bd4      	ldr	r3, [pc, #848]	@ (800dbdc <__ieee754_pow+0x77c>)
 800d88a:	f7f2 fed5 	bl	8000638 <__aeabi_dmul>
 800d88e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800d892:	468b      	mov	fp, r1
 800d894:	ea4f 532b 	mov.w	r3, fp, asr #20
 800d898:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d89c:	4413      	add	r3, r2
 800d89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8a0:	4bcf      	ldr	r3, [pc, #828]	@ (800dbe0 <__ieee754_pow+0x780>)
 800d8a2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800d8a6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800d8aa:	459b      	cmp	fp, r3
 800d8ac:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d8b0:	dd08      	ble.n	800d8c4 <__ieee754_pow+0x464>
 800d8b2:	4bcc      	ldr	r3, [pc, #816]	@ (800dbe4 <__ieee754_pow+0x784>)
 800d8b4:	459b      	cmp	fp, r3
 800d8b6:	f340 81a5 	ble.w	800dc04 <__ieee754_pow+0x7a4>
 800d8ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8bc:	3301      	adds	r3, #1
 800d8be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8c0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d8c4:	f04f 0a00 	mov.w	sl, #0
 800d8c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d8cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8ce:	4bc6      	ldr	r3, [pc, #792]	@ (800dbe8 <__ieee754_pow+0x788>)
 800d8d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d8d4:	ed93 7b00 	vldr	d7, [r3]
 800d8d8:	4629      	mov	r1, r5
 800d8da:	ec53 2b17 	vmov	r2, r3, d7
 800d8de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8e2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d8e6:	f7f2 fcef 	bl	80002c8 <__aeabi_dsub>
 800d8ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d8ee:	4606      	mov	r6, r0
 800d8f0:	460f      	mov	r7, r1
 800d8f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8f6:	f7f2 fce9 	bl	80002cc <__adddf3>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	2000      	movs	r0, #0
 800d900:	49ba      	ldr	r1, [pc, #744]	@ (800dbec <__ieee754_pow+0x78c>)
 800d902:	f7f2 ffc3 	bl	800088c <__aeabi_ddiv>
 800d906:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d90a:	4602      	mov	r2, r0
 800d90c:	460b      	mov	r3, r1
 800d90e:	4630      	mov	r0, r6
 800d910:	4639      	mov	r1, r7
 800d912:	f7f2 fe91 	bl	8000638 <__aeabi_dmul>
 800d916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d91a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800d91e:	106d      	asrs	r5, r5, #1
 800d920:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d924:	f04f 0b00 	mov.w	fp, #0
 800d928:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d92c:	4661      	mov	r1, ip
 800d92e:	2200      	movs	r2, #0
 800d930:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d934:	4658      	mov	r0, fp
 800d936:	46e1      	mov	r9, ip
 800d938:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800d93c:	4614      	mov	r4, r2
 800d93e:	461d      	mov	r5, r3
 800d940:	f7f2 fe7a 	bl	8000638 <__aeabi_dmul>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4630      	mov	r0, r6
 800d94a:	4639      	mov	r1, r7
 800d94c:	f7f2 fcbc 	bl	80002c8 <__aeabi_dsub>
 800d950:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d954:	4606      	mov	r6, r0
 800d956:	460f      	mov	r7, r1
 800d958:	4620      	mov	r0, r4
 800d95a:	4629      	mov	r1, r5
 800d95c:	f7f2 fcb4 	bl	80002c8 <__aeabi_dsub>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d968:	f7f2 fcae 	bl	80002c8 <__aeabi_dsub>
 800d96c:	465a      	mov	r2, fp
 800d96e:	464b      	mov	r3, r9
 800d970:	f7f2 fe62 	bl	8000638 <__aeabi_dmul>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4630      	mov	r0, r6
 800d97a:	4639      	mov	r1, r7
 800d97c:	f7f2 fca4 	bl	80002c8 <__aeabi_dsub>
 800d980:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d984:	f7f2 fe58 	bl	8000638 <__aeabi_dmul>
 800d988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d98c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d990:	4610      	mov	r0, r2
 800d992:	4619      	mov	r1, r3
 800d994:	f7f2 fe50 	bl	8000638 <__aeabi_dmul>
 800d998:	a37d      	add	r3, pc, #500	@ (adr r3, 800db90 <__ieee754_pow+0x730>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	4604      	mov	r4, r0
 800d9a0:	460d      	mov	r5, r1
 800d9a2:	f7f2 fe49 	bl	8000638 <__aeabi_dmul>
 800d9a6:	a37c      	add	r3, pc, #496	@ (adr r3, 800db98 <__ieee754_pow+0x738>)
 800d9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ac:	f7f2 fc8e 	bl	80002cc <__adddf3>
 800d9b0:	4622      	mov	r2, r4
 800d9b2:	462b      	mov	r3, r5
 800d9b4:	f7f2 fe40 	bl	8000638 <__aeabi_dmul>
 800d9b8:	a379      	add	r3, pc, #484	@ (adr r3, 800dba0 <__ieee754_pow+0x740>)
 800d9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9be:	f7f2 fc85 	bl	80002cc <__adddf3>
 800d9c2:	4622      	mov	r2, r4
 800d9c4:	462b      	mov	r3, r5
 800d9c6:	f7f2 fe37 	bl	8000638 <__aeabi_dmul>
 800d9ca:	a377      	add	r3, pc, #476	@ (adr r3, 800dba8 <__ieee754_pow+0x748>)
 800d9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d0:	f7f2 fc7c 	bl	80002cc <__adddf3>
 800d9d4:	4622      	mov	r2, r4
 800d9d6:	462b      	mov	r3, r5
 800d9d8:	f7f2 fe2e 	bl	8000638 <__aeabi_dmul>
 800d9dc:	a374      	add	r3, pc, #464	@ (adr r3, 800dbb0 <__ieee754_pow+0x750>)
 800d9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e2:	f7f2 fc73 	bl	80002cc <__adddf3>
 800d9e6:	4622      	mov	r2, r4
 800d9e8:	462b      	mov	r3, r5
 800d9ea:	f7f2 fe25 	bl	8000638 <__aeabi_dmul>
 800d9ee:	a372      	add	r3, pc, #456	@ (adr r3, 800dbb8 <__ieee754_pow+0x758>)
 800d9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f4:	f7f2 fc6a 	bl	80002cc <__adddf3>
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	4606      	mov	r6, r0
 800d9fc:	460f      	mov	r7, r1
 800d9fe:	462b      	mov	r3, r5
 800da00:	4620      	mov	r0, r4
 800da02:	4629      	mov	r1, r5
 800da04:	f7f2 fe18 	bl	8000638 <__aeabi_dmul>
 800da08:	4602      	mov	r2, r0
 800da0a:	460b      	mov	r3, r1
 800da0c:	4630      	mov	r0, r6
 800da0e:	4639      	mov	r1, r7
 800da10:	f7f2 fe12 	bl	8000638 <__aeabi_dmul>
 800da14:	465a      	mov	r2, fp
 800da16:	4604      	mov	r4, r0
 800da18:	460d      	mov	r5, r1
 800da1a:	464b      	mov	r3, r9
 800da1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da20:	f7f2 fc54 	bl	80002cc <__adddf3>
 800da24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da28:	f7f2 fe06 	bl	8000638 <__aeabi_dmul>
 800da2c:	4622      	mov	r2, r4
 800da2e:	462b      	mov	r3, r5
 800da30:	f7f2 fc4c 	bl	80002cc <__adddf3>
 800da34:	465a      	mov	r2, fp
 800da36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da3a:	464b      	mov	r3, r9
 800da3c:	4658      	mov	r0, fp
 800da3e:	4649      	mov	r1, r9
 800da40:	f7f2 fdfa 	bl	8000638 <__aeabi_dmul>
 800da44:	4b6a      	ldr	r3, [pc, #424]	@ (800dbf0 <__ieee754_pow+0x790>)
 800da46:	2200      	movs	r2, #0
 800da48:	4606      	mov	r6, r0
 800da4a:	460f      	mov	r7, r1
 800da4c:	f7f2 fc3e 	bl	80002cc <__adddf3>
 800da50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da54:	f7f2 fc3a 	bl	80002cc <__adddf3>
 800da58:	46d8      	mov	r8, fp
 800da5a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800da5e:	460d      	mov	r5, r1
 800da60:	465a      	mov	r2, fp
 800da62:	460b      	mov	r3, r1
 800da64:	4640      	mov	r0, r8
 800da66:	4649      	mov	r1, r9
 800da68:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800da6c:	f7f2 fde4 	bl	8000638 <__aeabi_dmul>
 800da70:	465c      	mov	r4, fp
 800da72:	4680      	mov	r8, r0
 800da74:	4689      	mov	r9, r1
 800da76:	4b5e      	ldr	r3, [pc, #376]	@ (800dbf0 <__ieee754_pow+0x790>)
 800da78:	2200      	movs	r2, #0
 800da7a:	4620      	mov	r0, r4
 800da7c:	4629      	mov	r1, r5
 800da7e:	f7f2 fc23 	bl	80002c8 <__aeabi_dsub>
 800da82:	4632      	mov	r2, r6
 800da84:	463b      	mov	r3, r7
 800da86:	f7f2 fc1f 	bl	80002c8 <__aeabi_dsub>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da92:	f7f2 fc19 	bl	80002c8 <__aeabi_dsub>
 800da96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da9a:	f7f2 fdcd 	bl	8000638 <__aeabi_dmul>
 800da9e:	4622      	mov	r2, r4
 800daa0:	4606      	mov	r6, r0
 800daa2:	460f      	mov	r7, r1
 800daa4:	462b      	mov	r3, r5
 800daa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800daaa:	f7f2 fdc5 	bl	8000638 <__aeabi_dmul>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	4630      	mov	r0, r6
 800dab4:	4639      	mov	r1, r7
 800dab6:	f7f2 fc09 	bl	80002cc <__adddf3>
 800daba:	4606      	mov	r6, r0
 800dabc:	460f      	mov	r7, r1
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	4640      	mov	r0, r8
 800dac4:	4649      	mov	r1, r9
 800dac6:	f7f2 fc01 	bl	80002cc <__adddf3>
 800daca:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800dace:	a33c      	add	r3, pc, #240	@ (adr r3, 800dbc0 <__ieee754_pow+0x760>)
 800dad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad4:	4658      	mov	r0, fp
 800dad6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800dada:	460d      	mov	r5, r1
 800dadc:	f7f2 fdac 	bl	8000638 <__aeabi_dmul>
 800dae0:	465c      	mov	r4, fp
 800dae2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dae6:	4642      	mov	r2, r8
 800dae8:	464b      	mov	r3, r9
 800daea:	4620      	mov	r0, r4
 800daec:	4629      	mov	r1, r5
 800daee:	f7f2 fbeb 	bl	80002c8 <__aeabi_dsub>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	4630      	mov	r0, r6
 800daf8:	4639      	mov	r1, r7
 800dafa:	f7f2 fbe5 	bl	80002c8 <__aeabi_dsub>
 800dafe:	a332      	add	r3, pc, #200	@ (adr r3, 800dbc8 <__ieee754_pow+0x768>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	f7f2 fd98 	bl	8000638 <__aeabi_dmul>
 800db08:	a331      	add	r3, pc, #196	@ (adr r3, 800dbd0 <__ieee754_pow+0x770>)
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	4606      	mov	r6, r0
 800db10:	460f      	mov	r7, r1
 800db12:	4620      	mov	r0, r4
 800db14:	4629      	mov	r1, r5
 800db16:	f7f2 fd8f 	bl	8000638 <__aeabi_dmul>
 800db1a:	4602      	mov	r2, r0
 800db1c:	460b      	mov	r3, r1
 800db1e:	4630      	mov	r0, r6
 800db20:	4639      	mov	r1, r7
 800db22:	f7f2 fbd3 	bl	80002cc <__adddf3>
 800db26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db28:	4b32      	ldr	r3, [pc, #200]	@ (800dbf4 <__ieee754_pow+0x794>)
 800db2a:	4413      	add	r3, r2
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	f7f2 fbcc 	bl	80002cc <__adddf3>
 800db34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800db38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800db3a:	f7f2 fd13 	bl	8000564 <__aeabi_i2d>
 800db3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db40:	4b2d      	ldr	r3, [pc, #180]	@ (800dbf8 <__ieee754_pow+0x798>)
 800db42:	4413      	add	r3, r2
 800db44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db48:	4606      	mov	r6, r0
 800db4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db4e:	460f      	mov	r7, r1
 800db50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db54:	f7f2 fbba 	bl	80002cc <__adddf3>
 800db58:	4642      	mov	r2, r8
 800db5a:	464b      	mov	r3, r9
 800db5c:	f7f2 fbb6 	bl	80002cc <__adddf3>
 800db60:	4632      	mov	r2, r6
 800db62:	463b      	mov	r3, r7
 800db64:	f7f2 fbb2 	bl	80002cc <__adddf3>
 800db68:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800db6c:	4632      	mov	r2, r6
 800db6e:	463b      	mov	r3, r7
 800db70:	4658      	mov	r0, fp
 800db72:	460d      	mov	r5, r1
 800db74:	f7f2 fba8 	bl	80002c8 <__aeabi_dsub>
 800db78:	4642      	mov	r2, r8
 800db7a:	464b      	mov	r3, r9
 800db7c:	f7f2 fba4 	bl	80002c8 <__aeabi_dsub>
 800db80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db84:	f7f2 fba0 	bl	80002c8 <__aeabi_dsub>
 800db88:	465c      	mov	r4, fp
 800db8a:	4602      	mov	r2, r0
 800db8c:	e036      	b.n	800dbfc <__ieee754_pow+0x79c>
 800db8e:	bf00      	nop
 800db90:	4a454eef 	.word	0x4a454eef
 800db94:	3fca7e28 	.word	0x3fca7e28
 800db98:	93c9db65 	.word	0x93c9db65
 800db9c:	3fcd864a 	.word	0x3fcd864a
 800dba0:	a91d4101 	.word	0xa91d4101
 800dba4:	3fd17460 	.word	0x3fd17460
 800dba8:	518f264d 	.word	0x518f264d
 800dbac:	3fd55555 	.word	0x3fd55555
 800dbb0:	db6fabff 	.word	0xdb6fabff
 800dbb4:	3fdb6db6 	.word	0x3fdb6db6
 800dbb8:	33333303 	.word	0x33333303
 800dbbc:	3fe33333 	.word	0x3fe33333
 800dbc0:	e0000000 	.word	0xe0000000
 800dbc4:	3feec709 	.word	0x3feec709
 800dbc8:	dc3a03fd 	.word	0xdc3a03fd
 800dbcc:	3feec709 	.word	0x3feec709
 800dbd0:	145b01f5 	.word	0x145b01f5
 800dbd4:	be3e2fe0 	.word	0xbe3e2fe0
 800dbd8:	7ff00000 	.word	0x7ff00000
 800dbdc:	43400000 	.word	0x43400000
 800dbe0:	0003988e 	.word	0x0003988e
 800dbe4:	000bb679 	.word	0x000bb679
 800dbe8:	0800ec48 	.word	0x0800ec48
 800dbec:	3ff00000 	.word	0x3ff00000
 800dbf0:	40080000 	.word	0x40080000
 800dbf4:	0800ec28 	.word	0x0800ec28
 800dbf8:	0800ec38 	.word	0x0800ec38
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc02:	e5d7      	b.n	800d7b4 <__ieee754_pow+0x354>
 800dc04:	f04f 0a01 	mov.w	sl, #1
 800dc08:	e65e      	b.n	800d8c8 <__ieee754_pow+0x468>
 800dc0a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800dedc <__ieee754_pow+0xa7c>)
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	4630      	mov	r0, r6
 800dc12:	4639      	mov	r1, r7
 800dc14:	f7f2 fb5a 	bl	80002cc <__adddf3>
 800dc18:	4642      	mov	r2, r8
 800dc1a:	e9cd 0100 	strd	r0, r1, [sp]
 800dc1e:	464b      	mov	r3, r9
 800dc20:	4620      	mov	r0, r4
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7f2 fb50 	bl	80002c8 <__aeabi_dsub>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc30:	f7f2 ff92 	bl	8000b58 <__aeabi_dcmpgt>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	f47f ae00 	bne.w	800d83a <__ieee754_pow+0x3da>
 800dc3a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800dc3e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800dc42:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800dc46:	fa43 fa0a 	asr.w	sl, r3, sl
 800dc4a:	44da      	add	sl, fp
 800dc4c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800dc50:	489d      	ldr	r0, [pc, #628]	@ (800dec8 <__ieee754_pow+0xa68>)
 800dc52:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800dc56:	4108      	asrs	r0, r1
 800dc58:	ea00 030a 	and.w	r3, r0, sl
 800dc5c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800dc60:	f1c1 0114 	rsb	r1, r1, #20
 800dc64:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800dc68:	fa4a fa01 	asr.w	sl, sl, r1
 800dc6c:	f1bb 0f00 	cmp.w	fp, #0
 800dc70:	4640      	mov	r0, r8
 800dc72:	4649      	mov	r1, r9
 800dc74:	f04f 0200 	mov.w	r2, #0
 800dc78:	bfb8      	it	lt
 800dc7a:	f1ca 0a00 	rsblt	sl, sl, #0
 800dc7e:	f7f2 fb23 	bl	80002c8 <__aeabi_dsub>
 800dc82:	4680      	mov	r8, r0
 800dc84:	4689      	mov	r9, r1
 800dc86:	4632      	mov	r2, r6
 800dc88:	463b      	mov	r3, r7
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	f7f2 fb1d 	bl	80002cc <__adddf3>
 800dc92:	2400      	movs	r4, #0
 800dc94:	a37c      	add	r3, pc, #496	@ (adr r3, 800de88 <__ieee754_pow+0xa28>)
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	460d      	mov	r5, r1
 800dc9e:	f7f2 fccb 	bl	8000638 <__aeabi_dmul>
 800dca2:	4642      	mov	r2, r8
 800dca4:	e9cd 0100 	strd	r0, r1, [sp]
 800dca8:	464b      	mov	r3, r9
 800dcaa:	4620      	mov	r0, r4
 800dcac:	4629      	mov	r1, r5
 800dcae:	f7f2 fb0b 	bl	80002c8 <__aeabi_dsub>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	4639      	mov	r1, r7
 800dcba:	f7f2 fb05 	bl	80002c8 <__aeabi_dsub>
 800dcbe:	a374      	add	r3, pc, #464	@ (adr r3, 800de90 <__ieee754_pow+0xa30>)
 800dcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc4:	f7f2 fcb8 	bl	8000638 <__aeabi_dmul>
 800dcc8:	a373      	add	r3, pc, #460	@ (adr r3, 800de98 <__ieee754_pow+0xa38>)
 800dcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcce:	4680      	mov	r8, r0
 800dcd0:	4689      	mov	r9, r1
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	f7f2 fcaf 	bl	8000638 <__aeabi_dmul>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4640      	mov	r0, r8
 800dce0:	4649      	mov	r1, r9
 800dce2:	f7f2 faf3 	bl	80002cc <__adddf3>
 800dce6:	4604      	mov	r4, r0
 800dce8:	460d      	mov	r5, r1
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcf2:	f7f2 faeb 	bl	80002cc <__adddf3>
 800dcf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcfa:	4680      	mov	r8, r0
 800dcfc:	4689      	mov	r9, r1
 800dcfe:	f7f2 fae3 	bl	80002c8 <__aeabi_dsub>
 800dd02:	4602      	mov	r2, r0
 800dd04:	460b      	mov	r3, r1
 800dd06:	4620      	mov	r0, r4
 800dd08:	4629      	mov	r1, r5
 800dd0a:	f7f2 fadd 	bl	80002c8 <__aeabi_dsub>
 800dd0e:	4642      	mov	r2, r8
 800dd10:	4606      	mov	r6, r0
 800dd12:	460f      	mov	r7, r1
 800dd14:	464b      	mov	r3, r9
 800dd16:	4640      	mov	r0, r8
 800dd18:	4649      	mov	r1, r9
 800dd1a:	f7f2 fc8d 	bl	8000638 <__aeabi_dmul>
 800dd1e:	a360      	add	r3, pc, #384	@ (adr r3, 800dea0 <__ieee754_pow+0xa40>)
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	4604      	mov	r4, r0
 800dd26:	460d      	mov	r5, r1
 800dd28:	f7f2 fc86 	bl	8000638 <__aeabi_dmul>
 800dd2c:	a35e      	add	r3, pc, #376	@ (adr r3, 800dea8 <__ieee754_pow+0xa48>)
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	f7f2 fac9 	bl	80002c8 <__aeabi_dsub>
 800dd36:	4622      	mov	r2, r4
 800dd38:	462b      	mov	r3, r5
 800dd3a:	f7f2 fc7d 	bl	8000638 <__aeabi_dmul>
 800dd3e:	a35c      	add	r3, pc, #368	@ (adr r3, 800deb0 <__ieee754_pow+0xa50>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	f7f2 fac2 	bl	80002cc <__adddf3>
 800dd48:	4622      	mov	r2, r4
 800dd4a:	462b      	mov	r3, r5
 800dd4c:	f7f2 fc74 	bl	8000638 <__aeabi_dmul>
 800dd50:	a359      	add	r3, pc, #356	@ (adr r3, 800deb8 <__ieee754_pow+0xa58>)
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	f7f2 fab7 	bl	80002c8 <__aeabi_dsub>
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	462b      	mov	r3, r5
 800dd5e:	f7f2 fc6b 	bl	8000638 <__aeabi_dmul>
 800dd62:	a357      	add	r3, pc, #348	@ (adr r3, 800dec0 <__ieee754_pow+0xa60>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 fab0 	bl	80002cc <__adddf3>
 800dd6c:	4622      	mov	r2, r4
 800dd6e:	462b      	mov	r3, r5
 800dd70:	f7f2 fc62 	bl	8000638 <__aeabi_dmul>
 800dd74:	4602      	mov	r2, r0
 800dd76:	460b      	mov	r3, r1
 800dd78:	4640      	mov	r0, r8
 800dd7a:	4649      	mov	r1, r9
 800dd7c:	f7f2 faa4 	bl	80002c8 <__aeabi_dsub>
 800dd80:	4604      	mov	r4, r0
 800dd82:	460d      	mov	r5, r1
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4640      	mov	r0, r8
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	f7f2 fc54 	bl	8000638 <__aeabi_dmul>
 800dd90:	2200      	movs	r2, #0
 800dd92:	e9cd 0100 	strd	r0, r1, [sp]
 800dd96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	f7f2 fa93 	bl	80002c8 <__aeabi_dsub>
 800dda2:	4602      	mov	r2, r0
 800dda4:	460b      	mov	r3, r1
 800dda6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddaa:	f7f2 fd6f 	bl	800088c <__aeabi_ddiv>
 800ddae:	4632      	mov	r2, r6
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	463b      	mov	r3, r7
 800ddb6:	4640      	mov	r0, r8
 800ddb8:	4649      	mov	r1, r9
 800ddba:	f7f2 fc3d 	bl	8000638 <__aeabi_dmul>
 800ddbe:	4632      	mov	r2, r6
 800ddc0:	463b      	mov	r3, r7
 800ddc2:	f7f2 fa83 	bl	80002cc <__adddf3>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	4620      	mov	r0, r4
 800ddcc:	4629      	mov	r1, r5
 800ddce:	f7f2 fa7b 	bl	80002c8 <__aeabi_dsub>
 800ddd2:	4642      	mov	r2, r8
 800ddd4:	464b      	mov	r3, r9
 800ddd6:	f7f2 fa77 	bl	80002c8 <__aeabi_dsub>
 800ddda:	460b      	mov	r3, r1
 800dddc:	4602      	mov	r2, r0
 800ddde:	493b      	ldr	r1, [pc, #236]	@ (800decc <__ieee754_pow+0xa6c>)
 800dde0:	2000      	movs	r0, #0
 800dde2:	f7f2 fa71 	bl	80002c8 <__aeabi_dsub>
 800dde6:	ec41 0b10 	vmov	d0, r0, r1
 800ddea:	ee10 3a90 	vmov	r3, s1
 800ddee:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ddf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddf6:	da30      	bge.n	800de5a <__ieee754_pow+0x9fa>
 800ddf8:	4650      	mov	r0, sl
 800ddfa:	f000 f9f9 	bl	800e1f0 <scalbn>
 800ddfe:	ec51 0b10 	vmov	r0, r1, d0
 800de02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de06:	f7ff bbd2 	b.w	800d5ae <__ieee754_pow+0x14e>
 800de0a:	4c31      	ldr	r4, [pc, #196]	@ (800ded0 <__ieee754_pow+0xa70>)
 800de0c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800de10:	42a3      	cmp	r3, r4
 800de12:	d91a      	bls.n	800de4a <__ieee754_pow+0x9ea>
 800de14:	4b2f      	ldr	r3, [pc, #188]	@ (800ded4 <__ieee754_pow+0xa74>)
 800de16:	440b      	add	r3, r1
 800de18:	4303      	orrs	r3, r0
 800de1a:	d009      	beq.n	800de30 <__ieee754_pow+0x9d0>
 800de1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de20:	2200      	movs	r2, #0
 800de22:	2300      	movs	r3, #0
 800de24:	f7f2 fe7a 	bl	8000b1c <__aeabi_dcmplt>
 800de28:	3800      	subs	r0, #0
 800de2a:	bf18      	it	ne
 800de2c:	2001      	movne	r0, #1
 800de2e:	e42b      	b.n	800d688 <__ieee754_pow+0x228>
 800de30:	4642      	mov	r2, r8
 800de32:	464b      	mov	r3, r9
 800de34:	f7f2 fa48 	bl	80002c8 <__aeabi_dsub>
 800de38:	4632      	mov	r2, r6
 800de3a:	463b      	mov	r3, r7
 800de3c:	f7f2 fe82 	bl	8000b44 <__aeabi_dcmpge>
 800de40:	2800      	cmp	r0, #0
 800de42:	d1eb      	bne.n	800de1c <__ieee754_pow+0x9bc>
 800de44:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800dee4 <__ieee754_pow+0xa84>
 800de48:	e6f7      	b.n	800dc3a <__ieee754_pow+0x7da>
 800de4a:	469a      	mov	sl, r3
 800de4c:	4b22      	ldr	r3, [pc, #136]	@ (800ded8 <__ieee754_pow+0xa78>)
 800de4e:	459a      	cmp	sl, r3
 800de50:	f63f aef3 	bhi.w	800dc3a <__ieee754_pow+0x7da>
 800de54:	f8dd a010 	ldr.w	sl, [sp, #16]
 800de58:	e715      	b.n	800dc86 <__ieee754_pow+0x826>
 800de5a:	ec51 0b10 	vmov	r0, r1, d0
 800de5e:	4619      	mov	r1, r3
 800de60:	e7cf      	b.n	800de02 <__ieee754_pow+0x9a2>
 800de62:	491a      	ldr	r1, [pc, #104]	@ (800decc <__ieee754_pow+0xa6c>)
 800de64:	2000      	movs	r0, #0
 800de66:	f7ff bb18 	b.w	800d49a <__ieee754_pow+0x3a>
 800de6a:	2000      	movs	r0, #0
 800de6c:	2100      	movs	r1, #0
 800de6e:	f7ff bb14 	b.w	800d49a <__ieee754_pow+0x3a>
 800de72:	4630      	mov	r0, r6
 800de74:	4639      	mov	r1, r7
 800de76:	f7ff bb10 	b.w	800d49a <__ieee754_pow+0x3a>
 800de7a:	460c      	mov	r4, r1
 800de7c:	f7ff bb5e 	b.w	800d53c <__ieee754_pow+0xdc>
 800de80:	2400      	movs	r4, #0
 800de82:	f7ff bb49 	b.w	800d518 <__ieee754_pow+0xb8>
 800de86:	bf00      	nop
 800de88:	00000000 	.word	0x00000000
 800de8c:	3fe62e43 	.word	0x3fe62e43
 800de90:	fefa39ef 	.word	0xfefa39ef
 800de94:	3fe62e42 	.word	0x3fe62e42
 800de98:	0ca86c39 	.word	0x0ca86c39
 800de9c:	be205c61 	.word	0xbe205c61
 800dea0:	72bea4d0 	.word	0x72bea4d0
 800dea4:	3e663769 	.word	0x3e663769
 800dea8:	c5d26bf1 	.word	0xc5d26bf1
 800deac:	3ebbbd41 	.word	0x3ebbbd41
 800deb0:	af25de2c 	.word	0xaf25de2c
 800deb4:	3f11566a 	.word	0x3f11566a
 800deb8:	16bebd93 	.word	0x16bebd93
 800debc:	3f66c16c 	.word	0x3f66c16c
 800dec0:	5555553e 	.word	0x5555553e
 800dec4:	3fc55555 	.word	0x3fc55555
 800dec8:	fff00000 	.word	0xfff00000
 800decc:	3ff00000 	.word	0x3ff00000
 800ded0:	4090cbff 	.word	0x4090cbff
 800ded4:	3f6f3400 	.word	0x3f6f3400
 800ded8:	3fe00000 	.word	0x3fe00000
 800dedc:	652b82fe 	.word	0x652b82fe
 800dee0:	3c971547 	.word	0x3c971547
 800dee4:	4090cc00 	.word	0x4090cc00

0800dee8 <fabs>:
 800dee8:	ec51 0b10 	vmov	r0, r1, d0
 800deec:	4602      	mov	r2, r0
 800deee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800def2:	ec43 2b10 	vmov	d0, r2, r3
 800def6:	4770      	bx	lr

0800def8 <__ieee754_atan2f>:
 800def8:	ee10 2a90 	vmov	r2, s1
 800defc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800df00:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800df04:	b510      	push	{r4, lr}
 800df06:	eef0 7a40 	vmov.f32	s15, s0
 800df0a:	d806      	bhi.n	800df1a <__ieee754_atan2f+0x22>
 800df0c:	ee10 0a10 	vmov	r0, s0
 800df10:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800df14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800df18:	d904      	bls.n	800df24 <__ieee754_atan2f+0x2c>
 800df1a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800df1e:	eeb0 0a67 	vmov.f32	s0, s15
 800df22:	bd10      	pop	{r4, pc}
 800df24:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800df28:	d103      	bne.n	800df32 <__ieee754_atan2f+0x3a>
 800df2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df2e:	f000 b883 	b.w	800e038 <atanf>
 800df32:	1794      	asrs	r4, r2, #30
 800df34:	f004 0402 	and.w	r4, r4, #2
 800df38:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800df3c:	b943      	cbnz	r3, 800df50 <__ieee754_atan2f+0x58>
 800df3e:	2c02      	cmp	r4, #2
 800df40:	d05e      	beq.n	800e000 <__ieee754_atan2f+0x108>
 800df42:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e014 <__ieee754_atan2f+0x11c>
 800df46:	2c03      	cmp	r4, #3
 800df48:	bf08      	it	eq
 800df4a:	eef0 7a47 	vmoveq.f32	s15, s14
 800df4e:	e7e6      	b.n	800df1e <__ieee754_atan2f+0x26>
 800df50:	b941      	cbnz	r1, 800df64 <__ieee754_atan2f+0x6c>
 800df52:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800e018 <__ieee754_atan2f+0x120>
 800df56:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e01c <__ieee754_atan2f+0x124>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	bfb8      	it	lt
 800df5e:	eef0 7a47 	vmovlt.f32	s15, s14
 800df62:	e7dc      	b.n	800df1e <__ieee754_atan2f+0x26>
 800df64:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800df68:	d110      	bne.n	800df8c <__ieee754_atan2f+0x94>
 800df6a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800df6e:	f104 34ff 	add.w	r4, r4, #4294967295
 800df72:	d107      	bne.n	800df84 <__ieee754_atan2f+0x8c>
 800df74:	2c02      	cmp	r4, #2
 800df76:	d846      	bhi.n	800e006 <__ieee754_atan2f+0x10e>
 800df78:	4b29      	ldr	r3, [pc, #164]	@ (800e020 <__ieee754_atan2f+0x128>)
 800df7a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800df7e:	edd3 7a00 	vldr	s15, [r3]
 800df82:	e7cc      	b.n	800df1e <__ieee754_atan2f+0x26>
 800df84:	2c02      	cmp	r4, #2
 800df86:	d841      	bhi.n	800e00c <__ieee754_atan2f+0x114>
 800df88:	4b26      	ldr	r3, [pc, #152]	@ (800e024 <__ieee754_atan2f+0x12c>)
 800df8a:	e7f6      	b.n	800df7a <__ieee754_atan2f+0x82>
 800df8c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800df90:	d0df      	beq.n	800df52 <__ieee754_atan2f+0x5a>
 800df92:	1a5b      	subs	r3, r3, r1
 800df94:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800df98:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800df9c:	da1a      	bge.n	800dfd4 <__ieee754_atan2f+0xdc>
 800df9e:	2a00      	cmp	r2, #0
 800dfa0:	da01      	bge.n	800dfa6 <__ieee754_atan2f+0xae>
 800dfa2:	313c      	adds	r1, #60	@ 0x3c
 800dfa4:	db19      	blt.n	800dfda <__ieee754_atan2f+0xe2>
 800dfa6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800dfaa:	f000 f919 	bl	800e1e0 <fabsf>
 800dfae:	f000 f843 	bl	800e038 <atanf>
 800dfb2:	eef0 7a40 	vmov.f32	s15, s0
 800dfb6:	2c01      	cmp	r4, #1
 800dfb8:	d012      	beq.n	800dfe0 <__ieee754_atan2f+0xe8>
 800dfba:	2c02      	cmp	r4, #2
 800dfbc:	d017      	beq.n	800dfee <__ieee754_atan2f+0xf6>
 800dfbe:	2c00      	cmp	r4, #0
 800dfc0:	d0ad      	beq.n	800df1e <__ieee754_atan2f+0x26>
 800dfc2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e028 <__ieee754_atan2f+0x130>
 800dfc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfca:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e02c <__ieee754_atan2f+0x134>
 800dfce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfd2:	e7a4      	b.n	800df1e <__ieee754_atan2f+0x26>
 800dfd4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800e018 <__ieee754_atan2f+0x120>
 800dfd8:	e7ed      	b.n	800dfb6 <__ieee754_atan2f+0xbe>
 800dfda:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e030 <__ieee754_atan2f+0x138>
 800dfde:	e7ea      	b.n	800dfb6 <__ieee754_atan2f+0xbe>
 800dfe0:	ee17 3a90 	vmov	r3, s15
 800dfe4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800dfe8:	ee07 3a90 	vmov	s15, r3
 800dfec:	e797      	b.n	800df1e <__ieee754_atan2f+0x26>
 800dfee:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e028 <__ieee754_atan2f+0x130>
 800dff2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dff6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e02c <__ieee754_atan2f+0x134>
 800dffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dffe:	e78e      	b.n	800df1e <__ieee754_atan2f+0x26>
 800e000:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e02c <__ieee754_atan2f+0x134>
 800e004:	e78b      	b.n	800df1e <__ieee754_atan2f+0x26>
 800e006:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e034 <__ieee754_atan2f+0x13c>
 800e00a:	e788      	b.n	800df1e <__ieee754_atan2f+0x26>
 800e00c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e030 <__ieee754_atan2f+0x138>
 800e010:	e785      	b.n	800df1e <__ieee754_atan2f+0x26>
 800e012:	bf00      	nop
 800e014:	c0490fdb 	.word	0xc0490fdb
 800e018:	3fc90fdb 	.word	0x3fc90fdb
 800e01c:	bfc90fdb 	.word	0xbfc90fdb
 800e020:	0800ec64 	.word	0x0800ec64
 800e024:	0800ec58 	.word	0x0800ec58
 800e028:	33bbbd2e 	.word	0x33bbbd2e
 800e02c:	40490fdb 	.word	0x40490fdb
 800e030:	00000000 	.word	0x00000000
 800e034:	3f490fdb 	.word	0x3f490fdb

0800e038 <atanf>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	ee10 5a10 	vmov	r5, s0
 800e03e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e042:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e046:	eef0 7a40 	vmov.f32	s15, s0
 800e04a:	d310      	bcc.n	800e06e <atanf+0x36>
 800e04c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e050:	d904      	bls.n	800e05c <atanf+0x24>
 800e052:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e056:	eeb0 0a67 	vmov.f32	s0, s15
 800e05a:	bd38      	pop	{r3, r4, r5, pc}
 800e05c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e194 <atanf+0x15c>
 800e060:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e198 <atanf+0x160>
 800e064:	2d00      	cmp	r5, #0
 800e066:	bfc8      	it	gt
 800e068:	eef0 7a47 	vmovgt.f32	s15, s14
 800e06c:	e7f3      	b.n	800e056 <atanf+0x1e>
 800e06e:	4b4b      	ldr	r3, [pc, #300]	@ (800e19c <atanf+0x164>)
 800e070:	429c      	cmp	r4, r3
 800e072:	d810      	bhi.n	800e096 <atanf+0x5e>
 800e074:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e078:	d20a      	bcs.n	800e090 <atanf+0x58>
 800e07a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e1a0 <atanf+0x168>
 800e07e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e086:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e08e:	dce2      	bgt.n	800e056 <atanf+0x1e>
 800e090:	f04f 33ff 	mov.w	r3, #4294967295
 800e094:	e013      	b.n	800e0be <atanf+0x86>
 800e096:	f000 f8a3 	bl	800e1e0 <fabsf>
 800e09a:	4b42      	ldr	r3, [pc, #264]	@ (800e1a4 <atanf+0x16c>)
 800e09c:	429c      	cmp	r4, r3
 800e09e:	d84f      	bhi.n	800e140 <atanf+0x108>
 800e0a0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e0a4:	429c      	cmp	r4, r3
 800e0a6:	d841      	bhi.n	800e12c <atanf+0xf4>
 800e0a8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e0ac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e0b0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e0ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e0be:	1c5a      	adds	r2, r3, #1
 800e0c0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e0c4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800e1a8 <atanf+0x170>
 800e0c8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800e1ac <atanf+0x174>
 800e0cc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800e1b0 <atanf+0x178>
 800e0d0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e0d4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e0d8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800e1b4 <atanf+0x17c>
 800e0dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e0e0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800e1b8 <atanf+0x180>
 800e0e4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e0e8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e1bc <atanf+0x184>
 800e0ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e0f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e1c0 <atanf+0x188>
 800e0f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e0f8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e1c4 <atanf+0x18c>
 800e0fc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e100:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e1c8 <atanf+0x190>
 800e104:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e108:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800e1cc <atanf+0x194>
 800e10c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e110:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800e1d0 <atanf+0x198>
 800e114:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e118:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e11c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e120:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e124:	d121      	bne.n	800e16a <atanf+0x132>
 800e126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e12a:	e794      	b.n	800e056 <atanf+0x1e>
 800e12c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e130:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e134:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e138:	2301      	movs	r3, #1
 800e13a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e13e:	e7be      	b.n	800e0be <atanf+0x86>
 800e140:	4b24      	ldr	r3, [pc, #144]	@ (800e1d4 <atanf+0x19c>)
 800e142:	429c      	cmp	r4, r3
 800e144:	d80b      	bhi.n	800e15e <atanf+0x126>
 800e146:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e14a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e14e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e152:	2302      	movs	r3, #2
 800e154:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e15c:	e7af      	b.n	800e0be <atanf+0x86>
 800e15e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e162:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e166:	2303      	movs	r3, #3
 800e168:	e7a9      	b.n	800e0be <atanf+0x86>
 800e16a:	4a1b      	ldr	r2, [pc, #108]	@ (800e1d8 <atanf+0x1a0>)
 800e16c:	491b      	ldr	r1, [pc, #108]	@ (800e1dc <atanf+0x1a4>)
 800e16e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e172:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e176:	edd3 6a00 	vldr	s13, [r3]
 800e17a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e17e:	2d00      	cmp	r5, #0
 800e180:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e184:	edd2 7a00 	vldr	s15, [r2]
 800e188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e18c:	bfb8      	it	lt
 800e18e:	eef1 7a67 	vneglt.f32	s15, s15
 800e192:	e760      	b.n	800e056 <atanf+0x1e>
 800e194:	bfc90fdb 	.word	0xbfc90fdb
 800e198:	3fc90fdb 	.word	0x3fc90fdb
 800e19c:	3edfffff 	.word	0x3edfffff
 800e1a0:	7149f2ca 	.word	0x7149f2ca
 800e1a4:	3f97ffff 	.word	0x3f97ffff
 800e1a8:	3c8569d7 	.word	0x3c8569d7
 800e1ac:	3d4bda59 	.word	0x3d4bda59
 800e1b0:	bd6ef16b 	.word	0xbd6ef16b
 800e1b4:	3d886b35 	.word	0x3d886b35
 800e1b8:	3dba2e6e 	.word	0x3dba2e6e
 800e1bc:	3e124925 	.word	0x3e124925
 800e1c0:	3eaaaaab 	.word	0x3eaaaaab
 800e1c4:	bd15a221 	.word	0xbd15a221
 800e1c8:	bd9d8795 	.word	0xbd9d8795
 800e1cc:	bde38e38 	.word	0xbde38e38
 800e1d0:	be4ccccd 	.word	0xbe4ccccd
 800e1d4:	401bffff 	.word	0x401bffff
 800e1d8:	0800ec80 	.word	0x0800ec80
 800e1dc:	0800ec70 	.word	0x0800ec70

0800e1e0 <fabsf>:
 800e1e0:	ee10 3a10 	vmov	r3, s0
 800e1e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e1e8:	ee00 3a10 	vmov	s0, r3
 800e1ec:	4770      	bx	lr
	...

0800e1f0 <scalbn>:
 800e1f0:	b570      	push	{r4, r5, r6, lr}
 800e1f2:	ec55 4b10 	vmov	r4, r5, d0
 800e1f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e1fa:	4606      	mov	r6, r0
 800e1fc:	462b      	mov	r3, r5
 800e1fe:	b991      	cbnz	r1, 800e226 <scalbn+0x36>
 800e200:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e204:	4323      	orrs	r3, r4
 800e206:	d03d      	beq.n	800e284 <scalbn+0x94>
 800e208:	4b35      	ldr	r3, [pc, #212]	@ (800e2e0 <scalbn+0xf0>)
 800e20a:	4620      	mov	r0, r4
 800e20c:	4629      	mov	r1, r5
 800e20e:	2200      	movs	r2, #0
 800e210:	f7f2 fa12 	bl	8000638 <__aeabi_dmul>
 800e214:	4b33      	ldr	r3, [pc, #204]	@ (800e2e4 <scalbn+0xf4>)
 800e216:	429e      	cmp	r6, r3
 800e218:	4604      	mov	r4, r0
 800e21a:	460d      	mov	r5, r1
 800e21c:	da0f      	bge.n	800e23e <scalbn+0x4e>
 800e21e:	a328      	add	r3, pc, #160	@ (adr r3, 800e2c0 <scalbn+0xd0>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	e01e      	b.n	800e264 <scalbn+0x74>
 800e226:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e22a:	4291      	cmp	r1, r2
 800e22c:	d10b      	bne.n	800e246 <scalbn+0x56>
 800e22e:	4622      	mov	r2, r4
 800e230:	4620      	mov	r0, r4
 800e232:	4629      	mov	r1, r5
 800e234:	f7f2 f84a 	bl	80002cc <__adddf3>
 800e238:	4604      	mov	r4, r0
 800e23a:	460d      	mov	r5, r1
 800e23c:	e022      	b.n	800e284 <scalbn+0x94>
 800e23e:	460b      	mov	r3, r1
 800e240:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e244:	3936      	subs	r1, #54	@ 0x36
 800e246:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e24a:	4296      	cmp	r6, r2
 800e24c:	dd0d      	ble.n	800e26a <scalbn+0x7a>
 800e24e:	2d00      	cmp	r5, #0
 800e250:	a11d      	add	r1, pc, #116	@ (adr r1, 800e2c8 <scalbn+0xd8>)
 800e252:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e256:	da02      	bge.n	800e25e <scalbn+0x6e>
 800e258:	a11d      	add	r1, pc, #116	@ (adr r1, 800e2d0 <scalbn+0xe0>)
 800e25a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e25e:	a31a      	add	r3, pc, #104	@ (adr r3, 800e2c8 <scalbn+0xd8>)
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	f7f2 f9e8 	bl	8000638 <__aeabi_dmul>
 800e268:	e7e6      	b.n	800e238 <scalbn+0x48>
 800e26a:	1872      	adds	r2, r6, r1
 800e26c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e270:	428a      	cmp	r2, r1
 800e272:	dcec      	bgt.n	800e24e <scalbn+0x5e>
 800e274:	2a00      	cmp	r2, #0
 800e276:	dd08      	ble.n	800e28a <scalbn+0x9a>
 800e278:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e27c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e280:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e284:	ec45 4b10 	vmov	d0, r4, r5
 800e288:	bd70      	pop	{r4, r5, r6, pc}
 800e28a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e28e:	da08      	bge.n	800e2a2 <scalbn+0xb2>
 800e290:	2d00      	cmp	r5, #0
 800e292:	a10b      	add	r1, pc, #44	@ (adr r1, 800e2c0 <scalbn+0xd0>)
 800e294:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e298:	dac1      	bge.n	800e21e <scalbn+0x2e>
 800e29a:	a10f      	add	r1, pc, #60	@ (adr r1, 800e2d8 <scalbn+0xe8>)
 800e29c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2a0:	e7bd      	b.n	800e21e <scalbn+0x2e>
 800e2a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e2a6:	3236      	adds	r2, #54	@ 0x36
 800e2a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e2ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2e8 <scalbn+0xf8>)
 800e2b4:	4629      	mov	r1, r5
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	e7d4      	b.n	800e264 <scalbn+0x74>
 800e2ba:	bf00      	nop
 800e2bc:	f3af 8000 	nop.w
 800e2c0:	c2f8f359 	.word	0xc2f8f359
 800e2c4:	01a56e1f 	.word	0x01a56e1f
 800e2c8:	8800759c 	.word	0x8800759c
 800e2cc:	7e37e43c 	.word	0x7e37e43c
 800e2d0:	8800759c 	.word	0x8800759c
 800e2d4:	fe37e43c 	.word	0xfe37e43c
 800e2d8:	c2f8f359 	.word	0xc2f8f359
 800e2dc:	81a56e1f 	.word	0x81a56e1f
 800e2e0:	43500000 	.word	0x43500000
 800e2e4:	ffff3cb0 	.word	0xffff3cb0
 800e2e8:	3c900000 	.word	0x3c900000

0800e2ec <with_errno>:
 800e2ec:	b510      	push	{r4, lr}
 800e2ee:	ed2d 8b02 	vpush	{d8}
 800e2f2:	eeb0 8a40 	vmov.f32	s16, s0
 800e2f6:	eef0 8a60 	vmov.f32	s17, s1
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	f7fd f9d4 	bl	800b6a8 <__errno>
 800e300:	eeb0 0a48 	vmov.f32	s0, s16
 800e304:	eef0 0a68 	vmov.f32	s1, s17
 800e308:	ecbd 8b02 	vpop	{d8}
 800e30c:	6004      	str	r4, [r0, #0]
 800e30e:	bd10      	pop	{r4, pc}

0800e310 <xflow>:
 800e310:	4603      	mov	r3, r0
 800e312:	b507      	push	{r0, r1, r2, lr}
 800e314:	ec51 0b10 	vmov	r0, r1, d0
 800e318:	b183      	cbz	r3, 800e33c <xflow+0x2c>
 800e31a:	4602      	mov	r2, r0
 800e31c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e320:	e9cd 2300 	strd	r2, r3, [sp]
 800e324:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e328:	f7f2 f986 	bl	8000638 <__aeabi_dmul>
 800e32c:	ec41 0b10 	vmov	d0, r0, r1
 800e330:	2022      	movs	r0, #34	@ 0x22
 800e332:	b003      	add	sp, #12
 800e334:	f85d eb04 	ldr.w	lr, [sp], #4
 800e338:	f7ff bfd8 	b.w	800e2ec <with_errno>
 800e33c:	4602      	mov	r2, r0
 800e33e:	460b      	mov	r3, r1
 800e340:	e7ee      	b.n	800e320 <xflow+0x10>
 800e342:	0000      	movs	r0, r0
 800e344:	0000      	movs	r0, r0
	...

0800e348 <__math_uflow>:
 800e348:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e350 <__math_uflow+0x8>
 800e34c:	f7ff bfe0 	b.w	800e310 <xflow>
 800e350:	00000000 	.word	0x00000000
 800e354:	10000000 	.word	0x10000000

0800e358 <__math_oflow>:
 800e358:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e360 <__math_oflow+0x8>
 800e35c:	f7ff bfd8 	b.w	800e310 <xflow>
 800e360:	00000000 	.word	0x00000000
 800e364:	70000000 	.word	0x70000000

0800e368 <__ieee754_sqrt>:
 800e368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36c:	4a68      	ldr	r2, [pc, #416]	@ (800e510 <__ieee754_sqrt+0x1a8>)
 800e36e:	ec55 4b10 	vmov	r4, r5, d0
 800e372:	43aa      	bics	r2, r5
 800e374:	462b      	mov	r3, r5
 800e376:	4621      	mov	r1, r4
 800e378:	d110      	bne.n	800e39c <__ieee754_sqrt+0x34>
 800e37a:	4622      	mov	r2, r4
 800e37c:	4620      	mov	r0, r4
 800e37e:	4629      	mov	r1, r5
 800e380:	f7f2 f95a 	bl	8000638 <__aeabi_dmul>
 800e384:	4602      	mov	r2, r0
 800e386:	460b      	mov	r3, r1
 800e388:	4620      	mov	r0, r4
 800e38a:	4629      	mov	r1, r5
 800e38c:	f7f1 ff9e 	bl	80002cc <__adddf3>
 800e390:	4604      	mov	r4, r0
 800e392:	460d      	mov	r5, r1
 800e394:	ec45 4b10 	vmov	d0, r4, r5
 800e398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39c:	2d00      	cmp	r5, #0
 800e39e:	dc0e      	bgt.n	800e3be <__ieee754_sqrt+0x56>
 800e3a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e3a4:	4322      	orrs	r2, r4
 800e3a6:	d0f5      	beq.n	800e394 <__ieee754_sqrt+0x2c>
 800e3a8:	b19d      	cbz	r5, 800e3d2 <__ieee754_sqrt+0x6a>
 800e3aa:	4622      	mov	r2, r4
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	f7f1 ff8a 	bl	80002c8 <__aeabi_dsub>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	f7f2 fa68 	bl	800088c <__aeabi_ddiv>
 800e3bc:	e7e8      	b.n	800e390 <__ieee754_sqrt+0x28>
 800e3be:	152a      	asrs	r2, r5, #20
 800e3c0:	d115      	bne.n	800e3ee <__ieee754_sqrt+0x86>
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	e009      	b.n	800e3da <__ieee754_sqrt+0x72>
 800e3c6:	0acb      	lsrs	r3, r1, #11
 800e3c8:	3a15      	subs	r2, #21
 800e3ca:	0549      	lsls	r1, r1, #21
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d0fa      	beq.n	800e3c6 <__ieee754_sqrt+0x5e>
 800e3d0:	e7f7      	b.n	800e3c2 <__ieee754_sqrt+0x5a>
 800e3d2:	462a      	mov	r2, r5
 800e3d4:	e7fa      	b.n	800e3cc <__ieee754_sqrt+0x64>
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	3001      	adds	r0, #1
 800e3da:	02dc      	lsls	r4, r3, #11
 800e3dc:	d5fb      	bpl.n	800e3d6 <__ieee754_sqrt+0x6e>
 800e3de:	1e44      	subs	r4, r0, #1
 800e3e0:	1b12      	subs	r2, r2, r4
 800e3e2:	f1c0 0420 	rsb	r4, r0, #32
 800e3e6:	fa21 f404 	lsr.w	r4, r1, r4
 800e3ea:	4323      	orrs	r3, r4
 800e3ec:	4081      	lsls	r1, r0
 800e3ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e3f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3fa:	07d2      	lsls	r2, r2, #31
 800e3fc:	bf5c      	itt	pl
 800e3fe:	005b      	lslpl	r3, r3, #1
 800e400:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e404:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e408:	bf58      	it	pl
 800e40a:	0049      	lslpl	r1, r1, #1
 800e40c:	2600      	movs	r6, #0
 800e40e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e412:	106d      	asrs	r5, r5, #1
 800e414:	0049      	lsls	r1, r1, #1
 800e416:	2016      	movs	r0, #22
 800e418:	4632      	mov	r2, r6
 800e41a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e41e:	1917      	adds	r7, r2, r4
 800e420:	429f      	cmp	r7, r3
 800e422:	bfde      	ittt	le
 800e424:	193a      	addle	r2, r7, r4
 800e426:	1bdb      	suble	r3, r3, r7
 800e428:	1936      	addle	r6, r6, r4
 800e42a:	0fcf      	lsrs	r7, r1, #31
 800e42c:	3801      	subs	r0, #1
 800e42e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e432:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e436:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e43a:	d1f0      	bne.n	800e41e <__ieee754_sqrt+0xb6>
 800e43c:	4604      	mov	r4, r0
 800e43e:	2720      	movs	r7, #32
 800e440:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e444:	429a      	cmp	r2, r3
 800e446:	eb00 0e0c 	add.w	lr, r0, ip
 800e44a:	db02      	blt.n	800e452 <__ieee754_sqrt+0xea>
 800e44c:	d113      	bne.n	800e476 <__ieee754_sqrt+0x10e>
 800e44e:	458e      	cmp	lr, r1
 800e450:	d811      	bhi.n	800e476 <__ieee754_sqrt+0x10e>
 800e452:	f1be 0f00 	cmp.w	lr, #0
 800e456:	eb0e 000c 	add.w	r0, lr, ip
 800e45a:	da42      	bge.n	800e4e2 <__ieee754_sqrt+0x17a>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	db40      	blt.n	800e4e2 <__ieee754_sqrt+0x17a>
 800e460:	f102 0801 	add.w	r8, r2, #1
 800e464:	1a9b      	subs	r3, r3, r2
 800e466:	458e      	cmp	lr, r1
 800e468:	bf88      	it	hi
 800e46a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e46e:	eba1 010e 	sub.w	r1, r1, lr
 800e472:	4464      	add	r4, ip
 800e474:	4642      	mov	r2, r8
 800e476:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e47a:	3f01      	subs	r7, #1
 800e47c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e480:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e484:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e488:	d1dc      	bne.n	800e444 <__ieee754_sqrt+0xdc>
 800e48a:	4319      	orrs	r1, r3
 800e48c:	d01b      	beq.n	800e4c6 <__ieee754_sqrt+0x15e>
 800e48e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e514 <__ieee754_sqrt+0x1ac>
 800e492:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e518 <__ieee754_sqrt+0x1b0>
 800e496:	e9da 0100 	ldrd	r0, r1, [sl]
 800e49a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e49e:	f7f1 ff13 	bl	80002c8 <__aeabi_dsub>
 800e4a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	4649      	mov	r1, r9
 800e4ae:	f7f2 fb3f 	bl	8000b30 <__aeabi_dcmple>
 800e4b2:	b140      	cbz	r0, 800e4c6 <__ieee754_sqrt+0x15e>
 800e4b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e4b8:	e9da 0100 	ldrd	r0, r1, [sl]
 800e4bc:	e9db 2300 	ldrd	r2, r3, [fp]
 800e4c0:	d111      	bne.n	800e4e6 <__ieee754_sqrt+0x17e>
 800e4c2:	3601      	adds	r6, #1
 800e4c4:	463c      	mov	r4, r7
 800e4c6:	1072      	asrs	r2, r6, #1
 800e4c8:	0863      	lsrs	r3, r4, #1
 800e4ca:	07f1      	lsls	r1, r6, #31
 800e4cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e4d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e4d4:	bf48      	it	mi
 800e4d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e4da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e4de:	4618      	mov	r0, r3
 800e4e0:	e756      	b.n	800e390 <__ieee754_sqrt+0x28>
 800e4e2:	4690      	mov	r8, r2
 800e4e4:	e7be      	b.n	800e464 <__ieee754_sqrt+0xfc>
 800e4e6:	f7f1 fef1 	bl	80002cc <__adddf3>
 800e4ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	4649      	mov	r1, r9
 800e4f6:	f7f2 fb11 	bl	8000b1c <__aeabi_dcmplt>
 800e4fa:	b120      	cbz	r0, 800e506 <__ieee754_sqrt+0x19e>
 800e4fc:	1ca0      	adds	r0, r4, #2
 800e4fe:	bf08      	it	eq
 800e500:	3601      	addeq	r6, #1
 800e502:	3402      	adds	r4, #2
 800e504:	e7df      	b.n	800e4c6 <__ieee754_sqrt+0x15e>
 800e506:	1c63      	adds	r3, r4, #1
 800e508:	f023 0401 	bic.w	r4, r3, #1
 800e50c:	e7db      	b.n	800e4c6 <__ieee754_sqrt+0x15e>
 800e50e:	bf00      	nop
 800e510:	7ff00000 	.word	0x7ff00000
 800e514:	200001e0 	.word	0x200001e0
 800e518:	200001d8 	.word	0x200001d8

0800e51c <_init>:
 800e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51e:	bf00      	nop
 800e520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e522:	bc08      	pop	{r3}
 800e524:	469e      	mov	lr, r3
 800e526:	4770      	bx	lr

0800e528 <_fini>:
 800e528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52a:	bf00      	nop
 800e52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e52e:	bc08      	pop	{r3}
 800e530:	469e      	mov	lr, r3
 800e532:	4770      	bx	lr
